Shader "Sphere/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_MainTexHandoverDist ("Handover Distance", Float) = 1
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_SunDir ("Sun Direction", Vector) = (1,1,1,1)
		_PlanetOpacity ("PlanetOpacity", Float) = 1
		_OceanRadius ("Ocean Radius", Float) = 63000
		_OceanColor ("Ocean Color Tint", Color) = (1,1,1,1)
		_OceanDepthFactor ("Ocean Depth Factor", Float) = .002
		_PlanetOrigin ("Planet Center", Vector) = (0,0,0,1)
	}


	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 43 to 53
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_LightTexture0, vec2(tmpvar_70)).w;
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_LightTexture0, vec2(tmpvar_70)).w;
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 444
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 448
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 501
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
dcl_texcoord9 o8
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.xy, v3
mov r1.zw, v4.xyxy
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r2.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
add r2.w, r1, c11.z
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o3.xyz, r0.x, r1
add r2.w, r0.y, c11
mul_sat r0.w, -r1, c11.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c8
mad o5.x, r0.w, r2.w, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r2
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
mov o8.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_73;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_73;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
#line 433
#line 463
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 441
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 445
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 450
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
#line 433
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 483
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 487
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 491
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 495
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    #line 499
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 503
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 507
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 511
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 515
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 523
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  highp float tmpvar_75;
  tmpvar_75 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w);
  atten_3 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  highp float tmpvar_75;
  tmpvar_75 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w);
  atten_3 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 453
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 457
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 486
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 490
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 494
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 498
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 502
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 506
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 510
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 514
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 519
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 523
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 527
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 531
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 535
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTextureB0, vec2(tmpvar_70)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTextureB0, vec2(tmpvar_70)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
#line 437
#line 457
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 445
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 449
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
#line 437
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 490
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 494
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 502
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 506
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 511
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 527
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2D (_LightTexture0, xlv_TEXCOORD2).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 444
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 448
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 501
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_34;
  tmpvar_34 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_35;
  if ((tmpvar_34.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_36));
  color_5.xyz = (color_5.xyz * tmpvar_36);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump float shadow_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_79;
  if ((tmpvar_78.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  shadow_77 = tmpvar_79;
  tmpvar_76 = shadow_77;
  highp float tmpvar_80;
  tmpvar_80 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump float shadow_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_79;
  if ((tmpvar_78.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  shadow_77 = tmpvar_79;
  tmpvar_76 = shadow_77;
  highp float tmpvar_80;
  tmpvar_80 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 452
#line 473
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 460
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 464
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 468
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 452
#line 473
#line 473
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 477
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 481
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 484
lowp vec4 frag( in v2f IN ) {
    #line 486
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 490
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 494
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 498
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 502
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 506
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 510
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 514
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 518
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 522
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 527
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 531
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 535
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 539
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 543
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp float tmpvar_77;
  tmpvar_77 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = (_LightShadowData.x + (shadow_76 * (1.0 - _LightShadowData.x)));
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 453
#line 474
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 461
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 465
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 469
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 453
#line 474
#line 474
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 478
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 482
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 485
lowp vec4 frag( in v2f IN ) {
    #line 487
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 491
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 495
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 499
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 503
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 507
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 511
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 515
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 519
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 523
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 528
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 532
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 536
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 540
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 544
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c11, c11
rsq r1.x, r1.x
mov r1.w, c13.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c11
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o5.xyz, -r0
add r2.w, r0, c13.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o4.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.z, r1.y, c13.w
mul_sat r0.w, -r0, c13.y
mad o6.x, r0.w, r1.z, c14.y
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r2.xyz, r1.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad o3.xy, r2.z, c10.zwzw, r2
add r2.xyz, -r0, c8
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o0, r1
mov o3.zw, r1
mov r1.xyz, c12
mov o1, v1
mul o8.xyz, r0.w, -r2
mov o2.xyz, v2
rcp o2.w, r0.w
add o7.xyz, -c8, r1
mov o9.xyz, r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  mediump float lightShadowDataX_71;
  highp float dist_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_72 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = _LightShadowData.x;
  lightShadowDataX_71 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = max (float((dist_72 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_71);
  tmpvar_70 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_79;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70.x), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
#line 442
#line 462
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 450
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 454
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 458
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
#line 442
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 495
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 499
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 507
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 511
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 516
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 520
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 528
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 532
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 52 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
mul o5.xyz, r1.x, r2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r1.xyz, r3.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mov o6.xyz, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp3 r1.w, r2, r2
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r2
mov r2.xyz, c16
mov o0, r3
mov o1, v1
mov o4.zw, r3
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r2
mov o10.xyz, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  mediump float lightShadowDataX_71;
  highp float dist_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_72 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = _LightShadowData.x;
  lightShadowDataX_71 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = max (float((dist_72 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_71);
  tmpvar_70 = tmpvar_75;
  lowp float tmpvar_76;
  tmpvar_76 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_70);
  mediump float tmpvar_77;
  tmpvar_77 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_76), 0.0, 1.0);
  highp vec3 tmpvar_78;
  tmpvar_78 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_77)), 0.0, 1.0);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_80;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
#line 445
#line 466
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 453
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 457
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
#line 445
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 499
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 503
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 507
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 511
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 515
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 520
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 524
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 528
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 532
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 536
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (tmpvar_32.w * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_36));
  color_5.xyz = (color_5.xyz * tmpvar_36);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = (tmpvar_73.w * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = (tmpvar_73.w * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
#line 450
#line 471
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 458
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 462
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 466
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
#line 450
#line 471
#line 471
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 475
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 479
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 492
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 496
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 500
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 504
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 508
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 512
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 516
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 520
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 525
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 529
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 533
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 537
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 541
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_34;
  tmpvar_34 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_35;
  tmpvar_35 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_36;
  if ((tmpvar_35 < tmpvar_34)) {
    tmpvar_36 = _LightShadowData.x;
  } else {
    tmpvar_36 = 1.0;
  };
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * ((tmpvar_32.w * tmpvar_33.w) * tmpvar_36)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_37));
  color_5.xyz = (color_5.xyz * tmpvar_37);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  tmpvar_75 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_79;
  if ((tmpvar_78 < tmpvar_75)) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  tmpvar_80 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_79);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  tmpvar_75 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_79;
  if ((tmpvar_78 < tmpvar_75)) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  tmpvar_80 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_79);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
#line 451
#line 472
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 459
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 463
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 493
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 497
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 501
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 505
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 509
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 513
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 517
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 521
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 526
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 530
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 534
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 538
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 542
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_34;
  vec3 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_34.x = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_34.y = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_34.z = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_34.w = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_36;
  tmpvar_36 = lessThan (shadowVals_34, tmpvar_35.zzzz);
  vec4 tmpvar_37;
  tmpvar_37 = _LightShadowData.xxxx;
  float tmpvar_38;
  if (tmpvar_36.x) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_36.y) {
    tmpvar_39 = tmpvar_37.y;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_36.z) {
    tmpvar_40 = tmpvar_37.z;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  if (tmpvar_36.w) {
    tmpvar_41 = tmpvar_37.w;
  } else {
    tmpvar_41 = 1.0;
  };
  vec4 tmpvar_42;
  tmpvar_42.x = tmpvar_38;
  tmpvar_42.y = tmpvar_39;
  tmpvar_42.z = tmpvar_40;
  tmpvar_42.w = tmpvar_41;
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * dot (tmpvar_42, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_43));
  color_5.xyz = (color_5.xyz * tmpvar_43);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_80;
  P_80 = (tmpvar_79.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_81;
  tmpvar_81 = texture2D (_ShadowMapTexture, P_80).x;
  shadowVals_78.x = tmpvar_81;
  highp vec2 P_82;
  P_82 = (tmpvar_79.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_78.y = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_79.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_78.z = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_79.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_78.w = tmpvar_87;
  bvec4 tmpvar_88;
  tmpvar_88 = lessThan (shadowVals_78, tmpvar_79.zzzz);
  highp vec4 tmpvar_89;
  tmpvar_89 = _LightShadowData.xxxx;
  highp float tmpvar_90;
  if (tmpvar_88.x) {
    tmpvar_90 = tmpvar_89.x;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_88.y) {
    tmpvar_91 = tmpvar_89.y;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_88.z) {
    tmpvar_92 = tmpvar_89.z;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_88.w) {
    tmpvar_93 = tmpvar_89.w;
  } else {
    tmpvar_93 = 1.0;
  };
  highp vec4 tmpvar_94;
  tmpvar_94.x = tmpvar_90;
  tmpvar_94.y = tmpvar_91;
  tmpvar_94.z = tmpvar_92;
  tmpvar_94.w = tmpvar_93;
  shadows_77 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_97)), 0.0, 1.0);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_100;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_80;
  P_80 = (tmpvar_79.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_81;
  tmpvar_81 = texture2D (_ShadowMapTexture, P_80).x;
  shadowVals_78.x = tmpvar_81;
  highp vec2 P_82;
  P_82 = (tmpvar_79.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_78.y = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_79.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_78.z = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_79.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_78.w = tmpvar_87;
  bvec4 tmpvar_88;
  tmpvar_88 = lessThan (shadowVals_78, tmpvar_79.zzzz);
  highp vec4 tmpvar_89;
  tmpvar_89 = _LightShadowData.xxxx;
  highp float tmpvar_90;
  if (tmpvar_88.x) {
    tmpvar_90 = tmpvar_89.x;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_88.y) {
    tmpvar_91 = tmpvar_89.y;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_88.z) {
    tmpvar_92 = tmpvar_89.z;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_88.w) {
    tmpvar_93 = tmpvar_89.w;
  } else {
    tmpvar_93 = 1.0;
  };
  highp vec4 tmpvar_94;
  tmpvar_94.x = tmpvar_90;
  tmpvar_94.y = tmpvar_91;
  tmpvar_94.z = tmpvar_92;
  tmpvar_94.w = tmpvar_93;
  shadows_77 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_97)), 0.0, 1.0);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_100;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 514
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 518
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 522
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 526
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 530
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 535
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 539
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 543
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 547
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 551
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec4 shadows_31;
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_31.x = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[0].xyz)).x;
  shadows_31.y = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[1].xyz)).x;
  shadows_31.z = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[2].xyz)).x;
  shadows_31.w = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_33;
  tmpvar_33 = (_LightShadowData.xxxx + (shadows_31 * (1.0 - _LightShadowData.xxxx)));
  shadows_31 = tmpvar_33;
  vec3 tmpvar_34;
  tmpvar_34 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_34));
  color_5.xyz = (color_5.xyz * tmpvar_34);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_78;
  coord_78 = (tmpvar_77 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_79;
  tmpvar_79 = shadow2DEXT (_ShadowMapTexture, coord_78);
  shadows_76.x = tmpvar_79;
  highp vec3 coord_80;
  coord_80 = (tmpvar_77 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_81;
  tmpvar_81 = shadow2DEXT (_ShadowMapTexture, coord_80);
  shadows_76.y = tmpvar_81;
  highp vec3 coord_82;
  coord_82 = (tmpvar_77 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_83;
  tmpvar_83 = shadow2DEXT (_ShadowMapTexture, coord_82);
  shadows_76.z = tmpvar_83;
  highp vec3 coord_84;
  coord_84 = (tmpvar_77 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_85;
  tmpvar_85 = shadow2DEXT (_ShadowMapTexture, coord_84);
  shadows_76.w = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (_LightShadowData.xxxx + (shadows_76 * (1.0 - _LightShadowData.xxxx)));
  shadows_76 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_88;
  mediump float tmpvar_89;
  tmpvar_89 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_90;
  tmpvar_90 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_89)), 0.0, 1.0);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_92;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 514
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 518
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 522
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 526
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 530
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 535
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 539
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 543
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 547
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 551
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  vec3 tmpvar_41;
  tmpvar_41 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (tmpvar_32.w * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_41));
  color_5.xyz = (color_5.xyz * tmpvar_41);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (tmpvar_73.w * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_102;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (tmpvar_73.w * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_102;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 456
#line 477
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 464
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 468
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 472
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 456
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 485
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 488
lowp vec4 frag( in v2f IN ) {
    #line 490
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 494
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 498
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 502
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 506
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 510
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 514
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 518
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 522
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 526
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 531
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 535
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 539
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 543
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_34;
  shadowVals_34.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_34, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * ((tmpvar_32.w * tmpvar_33.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_42));
  color_5.xyz = (color_5.xyz * tmpvar_42);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp float tmpvar_78;
  tmpvar_78 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_77.x = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_77.y = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_85;
  vec_85 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_86;
  lowp vec4 tmpvar_87;
  tmpvar_87 = textureCube (_ShadowMapTexture, vec_85);
  packDist_86 = tmpvar_87;
  shadowVals_77.z = dot (packDist_86, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_88;
  vec_88 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, vec_88);
  packDist_89 = tmpvar_90;
  shadowVals_77.w = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_91;
  tmpvar_91 = lessThan (shadowVals_77, vec4(tmpvar_78));
  highp vec4 tmpvar_92;
  tmpvar_92 = _LightShadowData.xxxx;
  highp float tmpvar_93;
  if (tmpvar_91.x) {
    tmpvar_93 = tmpvar_92.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_91.y) {
    tmpvar_94 = tmpvar_92.y;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_91.z) {
    tmpvar_95 = tmpvar_92.z;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_91.w) {
    tmpvar_96 = tmpvar_92.w;
  } else {
    tmpvar_96 = 1.0;
  };
  highp vec4 tmpvar_97;
  tmpvar_97.x = tmpvar_93;
  tmpvar_97.y = tmpvar_94;
  tmpvar_97.z = tmpvar_95;
  tmpvar_97.w = tmpvar_96;
  shadows_76 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_103;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp float tmpvar_78;
  tmpvar_78 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_77.x = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_77.y = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_85;
  vec_85 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_86;
  lowp vec4 tmpvar_87;
  tmpvar_87 = textureCube (_ShadowMapTexture, vec_85);
  packDist_86 = tmpvar_87;
  shadowVals_77.z = dot (packDist_86, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_88;
  vec_88 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, vec_88);
  packDist_89 = tmpvar_90;
  shadowVals_77.w = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_91;
  tmpvar_91 = lessThan (shadowVals_77, vec4(tmpvar_78));
  highp vec4 tmpvar_92;
  tmpvar_92 = _LightShadowData.xxxx;
  highp float tmpvar_93;
  if (tmpvar_91.x) {
    tmpvar_93 = tmpvar_92.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_91.y) {
    tmpvar_94 = tmpvar_92.y;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_91.z) {
    tmpvar_95 = tmpvar_92.z;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_91.w) {
    tmpvar_96 = tmpvar_92.w;
  } else {
    tmpvar_96 = 1.0;
  };
  highp vec4 tmpvar_97;
  tmpvar_97.x = tmpvar_93;
  tmpvar_97.y = tmpvar_94;
  tmpvar_97.z = tmpvar_95;
  tmpvar_97.w = tmpvar_96;
  shadows_76 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_103;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
#line 457
#line 478
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 465
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 469
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 473
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
#line 457
#line 478
#line 478
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 482
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 486
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 489
lowp vec4 frag( in v2f IN ) {
    #line 491
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 495
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 499
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 503
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 507
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 511
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 515
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 519
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 523
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 527
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 532
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 536
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 540
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 544
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 548
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_LightTexture0, vec2(tmpvar_70)).w;
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_LightTexture0, vec2(tmpvar_70)).w;
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 444
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 448
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 501
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
dcl_texcoord9 o8
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.xy, v3
mov r1.zw, v4.xyxy
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r2.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
add r2.w, r1, c11.z
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o3.xyz, r0.x, r1
add r2.w, r0.y, c11
mul_sat r0.w, -r1, c11.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c8
mad o5.x, r0.w, r2.w, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r2
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
mov o8.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_73;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_73;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
#line 433
#line 463
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 441
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 445
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 450
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
#line 433
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    #line 483
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    #line 487
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    #line 491
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 495
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    #line 499
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 503
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 507
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 511
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 515
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 523
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  highp float tmpvar_75;
  tmpvar_75 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w);
  atten_3 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  highp float tmpvar_75;
  tmpvar_75 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w);
  atten_3 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_79;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 453
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 457
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
#line 445
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 486
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 490
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 494
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 498
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 502
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 506
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 510
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 514
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 519
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 523
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 527
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 531
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 535
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTextureB0, vec2(tmpvar_70)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_71;
  tmpvar_71 = (texture2D (_LightTextureB0, vec2(tmpvar_70)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_72;
  tmpvar_72 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_71), 0.0, 1.0);
  highp vec3 tmpvar_73;
  tmpvar_73 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_72)), 0.0, 1.0);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_75;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
#line 437
#line 457
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 445
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 449
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
#line 437
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 490
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 494
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 502
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 506
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 511
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 515
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 519
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 523
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 527
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2D (_LightTexture0, xlv_TEXCOORD2).w), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 444
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 448
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 489
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 493
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 501
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 505
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 510
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 514
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 518
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 522
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 526
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_34;
  tmpvar_34 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_35;
  if ((tmpvar_34.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_36));
  color_5.xyz = (color_5.xyz * tmpvar_36);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump float shadow_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_79;
  if ((tmpvar_78.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  shadow_77 = tmpvar_79;
  tmpvar_76 = shadow_77;
  highp float tmpvar_80;
  tmpvar_80 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump float shadow_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_79;
  if ((tmpvar_78.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  shadow_77 = tmpvar_79;
  tmpvar_76 = shadow_77;
  highp float tmpvar_80;
  tmpvar_80 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 452
#line 473
#line 452
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 456
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 460
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 464
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 468
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 427
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
#line 452
#line 473
#line 473
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 477
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 481
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 484
lowp vec4 frag( in v2f IN ) {
    #line 486
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 490
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 494
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 498
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 502
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 506
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 510
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 514
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 518
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 522
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 527
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 531
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 535
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 539
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 543
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump float shadow_76;
  lowp float tmpvar_77;
  tmpvar_77 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = (_LightShadowData.x + (shadow_76 * (1.0 - _LightShadowData.x)));
  shadow_76 = tmpvar_78;
  tmpvar_75 = shadow_76;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 453
#line 474
#line 453
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 457
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 461
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 465
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 469
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 438
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
#line 453
#line 474
#line 474
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 478
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 482
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 485
lowp vec4 frag( in v2f IN ) {
    #line 487
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 491
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 495
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 499
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 503
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 507
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 511
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 515
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 519
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 523
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 528
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 532
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 536
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 540
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 544
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c11, c11
rsq r1.x, r1.x
mov r1.w, c13.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c11
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o5.xyz, -r0
add r2.w, r0, c13.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o4.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.z, r1.y, c13.w
mul_sat r0.w, -r0, c13.y
mad o6.x, r0.w, r1.z, c14.y
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r2.xyz, r1.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad o3.xy, r2.z, c10.zwzw, r2
add r2.xyz, -r0, c8
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o0, r1
mov o3.zw, r1
mov r1.xyz, c12
mov o1, v1
mul o8.xyz, r0.w, -r2
mov o2.xyz, v2
rcp o2.w, r0.w
add o7.xyz, -c8, r1
mov o9.xyz, r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  mediump float lightShadowDataX_71;
  highp float dist_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_72 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = _LightShadowData.x;
  lightShadowDataX_71 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = max (float((dist_72 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_71);
  tmpvar_70 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_79;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70.x), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
#line 442
#line 462
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 450
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 454
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 458
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
#line 442
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 495
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 499
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 507
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 511
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 516
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 520
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 524
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 528
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 532
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec3 tmpvar_31;
  tmpvar_31 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_31));
  color_5.xyz = (color_5.xyz * tmpvar_31);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 52 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
mul o5.xyz, r1.x, r2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r1.xyz, r3.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mov o6.xyz, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp3 r1.w, r2, r2
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r2
mov r2.xyz, c16
mov o0, r3
mov o1, v1
mov o4.zw, r3
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r2
mov o10.xyz, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  mediump float lightShadowDataX_71;
  highp float dist_72;
  lowp float tmpvar_73;
  tmpvar_73 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_72 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = _LightShadowData.x;
  lightShadowDataX_71 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = max (float((dist_72 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_71);
  tmpvar_70 = tmpvar_75;
  lowp float tmpvar_76;
  tmpvar_76 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_70);
  mediump float tmpvar_77;
  tmpvar_77 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_76), 0.0, 1.0);
  highp vec3 tmpvar_78;
  tmpvar_78 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_77)), 0.0, 1.0);
  light_2 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_80;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float handoff_6;
  highp float sphereDist_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec3 norm_10;
  highp vec2 localCoords_11;
  mediump vec4 encnorm_12;
  mediump float vertLerp_13;
  mediump vec4 main_14;
  highp vec2 uv_15;
  mediump vec4 color_16;
  highp float r_17;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_18;
    y_over_x_18 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_19;
    highp float x_20;
    x_20 = (y_over_x_18 * inversesqrt(((y_over_x_18 * y_over_x_18) + 1.0)));
    s_19 = (sign(x_20) * (1.5708 - (sqrt((1.0 - abs(x_20))) * (1.5708 + (abs(x_20) * (-0.214602 + (abs(x_20) * (0.0865667 + (abs(x_20) * -0.0310296)))))))));
    r_17 = s_19;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_17 = (s_19 + 3.14159);
      } else {
        r_17 = (r_17 - 3.14159);
      };
    };
  } else {
    r_17 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_17));
  uv_15.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_21;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_22;
    y_over_x_22 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_23;
    highp float x_24;
    x_24 = (y_over_x_22 * inversesqrt(((y_over_x_22 * y_over_x_22) + 1.0)));
    s_23 = (sign(x_24) * (1.5708 - (sqrt((1.0 - abs(x_24))) * (1.5708 + (abs(x_24) * (-0.214602 + (abs(x_24) * (0.0865667 + (abs(x_24) * -0.0310296)))))))));
    r_21 = s_23;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_21 = (s_23 + 3.14159);
      } else {
        r_21 = (r_21 - 3.14159);
      };
    };
  } else {
    r_21 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_25;
  tmpvar_25 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_MainTex, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  main_14 = tmpvar_29;
  highp vec2 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_36;
  tmpvar_36.w = 0.0;
  tmpvar_36.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_36), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_13 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, tmpvar_33);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, tmpvar_30);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_13));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_13));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_13));
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DGradEXT (_BumpMap, uv_15, tmpvar_28.xy, tmpvar_28.zw);
  encnorm_12 = tmpvar_47;
  mediump vec2 tmpvar_48;
  tmpvar_48 = encnorm_12.wy;
  localCoords_11 = tmpvar_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = (localCoords_11 - vec2(0.5, 0.5));
  localCoords_11.y = tmpvar_49.y;
  localCoords_11.x = (tmpvar_49.x * 0.5);
  uv_15.x = (uv_15.x - 0.5);
  highp vec2 tmpvar_50;
  tmpvar_50 = (uv_15 + localCoords_11);
  uv_15 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = cos((6.28319 * tmpvar_50.x));
  norm_10.z = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = sin((6.28319 * tmpvar_50.x));
  norm_10.x = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = cos((3.14159 * tmpvar_50.y));
  norm_10.y = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54 = -(norm_10);
  norm_10 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_46, tmpvar_40, tmpvar_55.xxxx);
  detail_9 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (0.25 * (mix (detail_9, tmpvar_43, tmpvar_55.yyyy) - 0.5));
  detail_9 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_8 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = mix (detail_9, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_8));
  highp vec4 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD0 + tmpvar_59);
  color_16 = tmpvar_60;
  sphereDist_7 = xlv_TEXCOORD1.w;
  highp float tmpvar_61;
  tmpvar_61 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_62;
  tmpvar_62 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_61 * tmpvar_61)));
  if (((tmpvar_62 <= _OceanRadius) && (tmpvar_61 >= 0.0))) {
    sphereDist_7 = (tmpvar_61 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_62, 2.0))));
  };
  highp vec3 p_63;
  p_63 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (color_16, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_7) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_63, p_63)))), 0.0, 1.0)))));
  color_16 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_6 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (mix (color_16, main_14, vec4(handoff_6)) * _Color);
  color_16.w = tmpvar_66.w;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_69;
  lowp float tmpvar_70;
  tmpvar_70 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_71;
  tmpvar_71 = clamp ((((_LightColor0.w * mix (TNdotL_3, clamp (dot (tmpvar_54, -(_SunDir)), 0.0, 1.0), handoff_6)) * 2.0) * tmpvar_70), 0.0, 1.0);
  highp vec3 tmpvar_72;
  tmpvar_72 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_71)), 0.0, 1.0);
  light_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_66.xyz + (_Albedo * light_2));
  color_16.xyz = tmpvar_74;
  color_16.xyz = (color_16.xyz * light_2);
  color_16.w = 1.0;
  tmpvar_1 = color_16;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
#line 445
#line 466
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 453
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 457
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
#line 445
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 499
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 503
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 507
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 511
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 515
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 520
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 524
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 528
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 532
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 536
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_33;
  tmpvar_33 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_34;
  tmpvar_34 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_35;
  if ((tmpvar_34 < tmpvar_33)) {
    tmpvar_35 = _LightShadowData.x;
  } else {
    tmpvar_35 = 1.0;
  };
  vec3 tmpvar_36;
  tmpvar_36 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (tmpvar_32.w * tmpvar_35)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_36));
  color_5.xyz = (color_5.xyz * tmpvar_36);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = (tmpvar_73.w * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  tmpvar_74 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_75 = tmpvar_76;
  highp float tmpvar_77;
  tmpvar_77 = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_78;
  if ((tmpvar_77 < tmpvar_74)) {
    tmpvar_78 = _LightShadowData.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  tmpvar_79 = (tmpvar_73.w * tmpvar_78);
  atten_3 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_2 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_83;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
#line 450
#line 471
#line 450
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 454
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 458
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 462
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 466
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
#line 450
#line 471
#line 471
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 475
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 479
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 482
lowp vec4 frag( in v2f IN ) {
    #line 484
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 488
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 492
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 496
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 500
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 504
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 508
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 512
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 516
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 520
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 525
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 529
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 533
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 537
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 541
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_34;
  tmpvar_34 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_35;
  tmpvar_35 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_36;
  if ((tmpvar_35 < tmpvar_34)) {
    tmpvar_36 = _LightShadowData.x;
  } else {
    tmpvar_36 = 1.0;
  };
  vec3 tmpvar_37;
  tmpvar_37 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * ((tmpvar_32.w * tmpvar_33.w) * tmpvar_36)), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_37));
  color_5.xyz = (color_5.xyz * tmpvar_37);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  tmpvar_75 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_79;
  if ((tmpvar_78 < tmpvar_75)) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  tmpvar_80 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_79);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  tmpvar_75 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_76 = tmpvar_77;
  highp float tmpvar_78;
  tmpvar_78 = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_79;
  if ((tmpvar_78 < tmpvar_75)) {
    tmpvar_79 = _LightShadowData.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  tmpvar_80 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_79);
  atten_3 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_81)), 0.0, 1.0);
  light_2 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_84;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
#line 451
#line 472
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 459
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 463
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 493
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 497
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 501
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 505
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 509
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 513
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 517
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 521
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 526
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 530
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 534
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 538
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 542
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_33;
  tmpvar_33 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_34;
  vec3 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_34.x = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_34.y = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_34.z = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_34.w = texture2D (_ShadowMapTexture, (tmpvar_35.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_36;
  tmpvar_36 = lessThan (shadowVals_34, tmpvar_35.zzzz);
  vec4 tmpvar_37;
  tmpvar_37 = _LightShadowData.xxxx;
  float tmpvar_38;
  if (tmpvar_36.x) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_36.y) {
    tmpvar_39 = tmpvar_37.y;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_36.z) {
    tmpvar_40 = tmpvar_37.z;
  } else {
    tmpvar_40 = 1.0;
  };
  float tmpvar_41;
  if (tmpvar_36.w) {
    tmpvar_41 = tmpvar_37.w;
  } else {
    tmpvar_41 = 1.0;
  };
  vec4 tmpvar_42;
  tmpvar_42.x = tmpvar_38;
  tmpvar_42.y = tmpvar_39;
  tmpvar_42.z = tmpvar_40;
  tmpvar_42.w = tmpvar_41;
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_32.w) * tmpvar_33.w) * dot (tmpvar_42, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_43));
  color_5.xyz = (color_5.xyz * tmpvar_43);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_80;
  P_80 = (tmpvar_79.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_81;
  tmpvar_81 = texture2D (_ShadowMapTexture, P_80).x;
  shadowVals_78.x = tmpvar_81;
  highp vec2 P_82;
  P_82 = (tmpvar_79.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_78.y = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_79.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_78.z = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_79.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_78.w = tmpvar_87;
  bvec4 tmpvar_88;
  tmpvar_88 = lessThan (shadowVals_78, tmpvar_79.zzzz);
  highp vec4 tmpvar_89;
  tmpvar_89 = _LightShadowData.xxxx;
  highp float tmpvar_90;
  if (tmpvar_88.x) {
    tmpvar_90 = tmpvar_89.x;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_88.y) {
    tmpvar_91 = tmpvar_89.y;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_88.z) {
    tmpvar_92 = tmpvar_89.z;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_88.w) {
    tmpvar_93 = tmpvar_89.w;
  } else {
    tmpvar_93 = 1.0;
  };
  highp vec4 tmpvar_94;
  tmpvar_94.x = tmpvar_90;
  tmpvar_94.y = tmpvar_91;
  tmpvar_94.z = tmpvar_92;
  tmpvar_94.w = tmpvar_93;
  shadows_77 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_97)), 0.0, 1.0);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_100;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  lowp vec4 tmpvar_72;
  highp vec2 P_73;
  P_73 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_72 = texture2D (_LightTexture0, P_73);
  highp float tmpvar_74;
  tmpvar_74 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture2D (_LightTextureB0, vec2(tmpvar_74));
  lowp float tmpvar_76;
  mediump vec4 shadows_77;
  highp vec4 shadowVals_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_80;
  P_80 = (tmpvar_79.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_81;
  tmpvar_81 = texture2D (_ShadowMapTexture, P_80).x;
  shadowVals_78.x = tmpvar_81;
  highp vec2 P_82;
  P_82 = (tmpvar_79.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_83;
  tmpvar_83 = texture2D (_ShadowMapTexture, P_82).x;
  shadowVals_78.y = tmpvar_83;
  highp vec2 P_84;
  P_84 = (tmpvar_79.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_ShadowMapTexture, P_84).x;
  shadowVals_78.z = tmpvar_85;
  highp vec2 P_86;
  P_86 = (tmpvar_79.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_87;
  tmpvar_87 = texture2D (_ShadowMapTexture, P_86).x;
  shadowVals_78.w = tmpvar_87;
  bvec4 tmpvar_88;
  tmpvar_88 = lessThan (shadowVals_78, tmpvar_79.zzzz);
  highp vec4 tmpvar_89;
  tmpvar_89 = _LightShadowData.xxxx;
  highp float tmpvar_90;
  if (tmpvar_88.x) {
    tmpvar_90 = tmpvar_89.x;
  } else {
    tmpvar_90 = 1.0;
  };
  highp float tmpvar_91;
  if (tmpvar_88.y) {
    tmpvar_91 = tmpvar_89.y;
  } else {
    tmpvar_91 = 1.0;
  };
  highp float tmpvar_92;
  if (tmpvar_88.z) {
    tmpvar_92 = tmpvar_89.z;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_88.w) {
    tmpvar_93 = tmpvar_89.w;
  } else {
    tmpvar_93 = 1.0;
  };
  highp vec4 tmpvar_94;
  tmpvar_94.x = tmpvar_90;
  tmpvar_94.y = tmpvar_91;
  tmpvar_94.z = tmpvar_92;
  tmpvar_94.w = tmpvar_93;
  shadows_77 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = dot (shadows_77, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_76 = tmpvar_95;
  highp float tmpvar_96;
  tmpvar_96 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_72.w) * tmpvar_75.w) * tmpvar_76);
  atten_3 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_97)), 0.0, 1.0);
  light_2 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_100;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 514
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 518
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 522
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 526
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 530
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 535
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 539
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 543
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 547
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 551
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5.w = tmpvar_30.w;
  vec4 shadows_31;
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_31.x = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[0].xyz)).x;
  shadows_31.y = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[1].xyz)).x;
  shadows_31.z = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[2].xyz)).x;
  shadows_31.w = shadow2D (_ShadowMapTexture, (tmpvar_32 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_33;
  tmpvar_33 = (_LightShadowData.xxxx + (shadows_31 * (1.0 - _LightShadowData.xxxx)));
  shadows_31 = tmpvar_33;
  vec3 tmpvar_34;
  tmpvar_34 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29)) * 2.0) * (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_34));
  color_5.xyz = (color_5.xyz * tmpvar_34);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17.w = tmpvar_67.w;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  lowp vec4 tmpvar_71;
  highp vec2 P_72;
  P_72 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_71 = texture2D (_LightTexture0, P_72);
  highp float tmpvar_73;
  tmpvar_73 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTextureB0, vec2(tmpvar_73));
  lowp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_78;
  coord_78 = (tmpvar_77 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_79;
  tmpvar_79 = shadow2DEXT (_ShadowMapTexture, coord_78);
  shadows_76.x = tmpvar_79;
  highp vec3 coord_80;
  coord_80 = (tmpvar_77 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_81;
  tmpvar_81 = shadow2DEXT (_ShadowMapTexture, coord_80);
  shadows_76.y = tmpvar_81;
  highp vec3 coord_82;
  coord_82 = (tmpvar_77 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_83;
  tmpvar_83 = shadow2DEXT (_ShadowMapTexture, coord_82);
  shadows_76.z = tmpvar_83;
  highp vec3 coord_84;
  coord_84 = (tmpvar_77 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_85;
  tmpvar_85 = shadow2DEXT (_ShadowMapTexture, coord_84);
  shadows_76.w = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (_LightShadowData.xxxx + (shadows_76 * (1.0 - _LightShadowData.xxxx)));
  shadows_76 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_71.w) * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_88;
  mediump float tmpvar_89;
  tmpvar_89 = clamp ((((_LightColor0.w * mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_90;
  tmpvar_90 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_89)), 0.0, 1.0);
  light_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_92;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 514
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 518
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 522
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 526
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 530
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 535
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 539
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 543
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 547
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 551
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_33;
  shadowVals_33.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_33.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_34;
  tmpvar_34 = lessThan (shadowVals_33, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_35;
  tmpvar_35 = _LightShadowData.xxxx;
  float tmpvar_36;
  if (tmpvar_34.x) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = 1.0;
  };
  float tmpvar_37;
  if (tmpvar_34.y) {
    tmpvar_37 = tmpvar_35.y;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_34.z) {
    tmpvar_38 = tmpvar_35.z;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_34.w) {
    tmpvar_39 = tmpvar_35.w;
  } else {
    tmpvar_39 = 1.0;
  };
  vec4 tmpvar_40;
  tmpvar_40.x = tmpvar_36;
  tmpvar_40.y = tmpvar_37;
  tmpvar_40.z = tmpvar_38;
  tmpvar_40.w = tmpvar_39;
  vec3 tmpvar_41;
  tmpvar_41 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * (tmpvar_32.w * dot (tmpvar_40, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_41));
  color_5.xyz = (color_5.xyz * tmpvar_41);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (tmpvar_73.w * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_102;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTexture0, vec2(tmpvar_72));
  highp float tmpvar_74;
  mediump vec4 shadows_75;
  highp vec4 shadowVals_76;
  highp float tmpvar_77;
  tmpvar_77 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_76.x = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_76.y = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_84;
  vec_84 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_85;
  lowp vec4 tmpvar_86;
  tmpvar_86 = textureCube (_ShadowMapTexture, vec_84);
  packDist_85 = tmpvar_86;
  shadowVals_76.z = dot (packDist_85, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_87;
  vec_87 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_88;
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_ShadowMapTexture, vec_87);
  packDist_88 = tmpvar_89;
  shadowVals_76.w = dot (packDist_88, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_90;
  tmpvar_90 = lessThan (shadowVals_76, vec4(tmpvar_77));
  highp vec4 tmpvar_91;
  tmpvar_91 = _LightShadowData.xxxx;
  highp float tmpvar_92;
  if (tmpvar_90.x) {
    tmpvar_92 = tmpvar_91.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  if (tmpvar_90.y) {
    tmpvar_93 = tmpvar_91.y;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_90.z) {
    tmpvar_94 = tmpvar_91.z;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_90.w) {
    tmpvar_95 = tmpvar_91.w;
  } else {
    tmpvar_95 = 1.0;
  };
  highp vec4 tmpvar_96;
  tmpvar_96.x = tmpvar_92;
  tmpvar_96.y = tmpvar_93;
  tmpvar_96.z = tmpvar_94;
  tmpvar_96.w = tmpvar_95;
  shadows_75 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = dot (shadows_75, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_74 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = (tmpvar_73.w * tmpvar_74);
  atten_3 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_102;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 456
#line 477
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 464
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 468
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 472
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
#line 456
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 485
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 488
lowp vec4 frag( in v2f IN ) {
    #line 490
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 494
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 498
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 502
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 506
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 510
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 514
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 518
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 522
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 526
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 531
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 535
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 539
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 543
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 547
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  float sphereDist_1;
  vec3 norm_2;
  vec2 localCoords_3;
  vec2 uv_4;
  vec4 color_5;
  float r_6;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_7;
    y_over_x_7 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_8;
    float x_9;
    x_9 = (y_over_x_7 * inversesqrt(((y_over_x_7 * y_over_x_7) + 1.0)));
    s_8 = (sign(x_9) * (1.5708 - (sqrt((1.0 - abs(x_9))) * (1.5708 + (abs(x_9) * (-0.214602 + (abs(x_9) * (0.0865667 + (abs(x_9) * -0.0310296)))))))));
    r_6 = s_8;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_6 = (s_8 + 3.14159);
      } else {
        r_6 = (r_6 - 3.14159);
      };
    };
  } else {
    r_6 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_6));
  uv_4.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_10;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_11;
    y_over_x_11 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_12;
    float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_14;
  tmpvar_14 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_MainTex, uv_4, tmpvar_17.xy, tmpvar_17.zw);
  vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(xlv_TEXCOORD5);
  float tmpvar_20;
  tmpvar_20 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_19), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec2 tmpvar_21;
  tmpvar_21 = (texture2DGradARB (_BumpMap, uv_4, tmpvar_17.xy, tmpvar_17.zw).wy - vec2(0.5, 0.5));
  localCoords_3.y = tmpvar_21.y;
  localCoords_3.x = (tmpvar_21.x * 0.5);
  uv_4.x = (uv_4.x - 0.5);
  vec2 tmpvar_22;
  tmpvar_22 = (uv_4 + localCoords_3);
  uv_4 = tmpvar_22;
  norm_2.z = cos((6.28319 * tmpvar_22.x));
  norm_2.x = sin((6.28319 * tmpvar_22.x));
  norm_2.y = cos((3.14159 * tmpvar_22.y));
  vec3 tmpvar_23;
  tmpvar_23 = -(norm_2);
  norm_2 = tmpvar_23;
  vec3 tmpvar_24;
  tmpvar_24 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_20)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_20)), tmpvar_24.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_5 = tmpvar_25;
  sphereDist_1 = xlv_TEXCOORD1.w;
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_27;
  tmpvar_27 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_26 * tmpvar_26)));
  if (((tmpvar_27 <= _OceanRadius) && (tmpvar_26 >= 0.0))) {
    sphereDist_1 = (tmpvar_26 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_27, 2.0))));
  };
  vec3 p_28;
  p_28 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_29;
  tmpvar_29 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  vec4 tmpvar_30;
  tmpvar_30 = (mix (mix (tmpvar_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_1) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_28, p_28)))), 0.0, 1.0))))), tmpvar_18, vec4(tmpvar_29)) * _Color);
  color_5 = tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), clamp (dot (tmpvar_23, -(_SunDir)), 0.0, 1.0), tmpvar_29);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_33;
  tmpvar_33 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_34;
  shadowVals_34.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_34.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_35;
  tmpvar_35 = lessThan (shadowVals_34, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_36;
  tmpvar_36 = _LightShadowData.xxxx;
  float tmpvar_37;
  if (tmpvar_35.x) {
    tmpvar_37 = tmpvar_36.x;
  } else {
    tmpvar_37 = 1.0;
  };
  float tmpvar_38;
  if (tmpvar_35.y) {
    tmpvar_38 = tmpvar_36.y;
  } else {
    tmpvar_38 = 1.0;
  };
  float tmpvar_39;
  if (tmpvar_35.z) {
    tmpvar_39 = tmpvar_36.z;
  } else {
    tmpvar_39 = 1.0;
  };
  float tmpvar_40;
  if (tmpvar_35.w) {
    tmpvar_40 = tmpvar_36.w;
  } else {
    tmpvar_40 = 1.0;
  };
  vec4 tmpvar_41;
  tmpvar_41.x = tmpvar_37;
  tmpvar_41.y = tmpvar_38;
  tmpvar_41.z = tmpvar_39;
  tmpvar_41.w = tmpvar_40;
  vec3 tmpvar_42;
  tmpvar_42 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_31) * 2.0) * ((tmpvar_32.w * tmpvar_33.w) * dot (tmpvar_41, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_5.xyz = (tmpvar_30.xyz + (_Albedo * tmpvar_42));
  color_5.xyz = (color_5.xyz * tmpvar_42);
  color_5.w = 1.0;
  gl_FragData[0] = color_5;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp float tmpvar_78;
  tmpvar_78 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_77.x = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_77.y = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_85;
  vec_85 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_86;
  lowp vec4 tmpvar_87;
  tmpvar_87 = textureCube (_ShadowMapTexture, vec_85);
  packDist_86 = tmpvar_87;
  shadowVals_77.z = dot (packDist_86, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_88;
  vec_88 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, vec_88);
  packDist_89 = tmpvar_90;
  shadowVals_77.w = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_91;
  tmpvar_91 = lessThan (shadowVals_77, vec4(tmpvar_78));
  highp vec4 tmpvar_92;
  tmpvar_92 = _LightShadowData.xxxx;
  highp float tmpvar_93;
  if (tmpvar_91.x) {
    tmpvar_93 = tmpvar_92.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_91.y) {
    tmpvar_94 = tmpvar_92.y;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_91.z) {
    tmpvar_95 = tmpvar_92.z;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_91.w) {
    tmpvar_96 = tmpvar_92.w;
  } else {
    tmpvar_96 = 1.0;
  };
  highp vec4 tmpvar_97;
  tmpvar_97.x = tmpvar_93;
  tmpvar_97.y = tmpvar_94;
  tmpvar_97.z = tmpvar_95;
  tmpvar_97.w = tmpvar_96;
  shadows_76 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_103;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump float vertLerp_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_37;
  tmpvar_37.w = 0.0;
  tmpvar_37.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_37), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_14 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, tmpvar_34);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, tmpvar_31);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_14));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, tmpvar_35);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, tmpvar_32);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_14));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, tmpvar_36);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, tmpvar_33);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_14));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DGradEXT (_BumpMap, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  encnorm_13 = tmpvar_48;
  mediump vec2 tmpvar_49;
  tmpvar_49 = encnorm_13.wy;
  localCoords_12 = tmpvar_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_50.y;
  localCoords_12.x = (tmpvar_50.x * 0.5);
  uv_16.x = (uv_16.x - 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51 = (uv_16 + localCoords_12);
  uv_16 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = cos((6.28319 * tmpvar_51.x));
  norm_11.z = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = sin((6.28319 * tmpvar_51.x));
  norm_11.x = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = cos((3.14159 * tmpvar_51.y));
  norm_11.y = tmpvar_54;
  mediump vec3 tmpvar_55;
  tmpvar_55 = -(norm_11);
  norm_11 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_57;
  tmpvar_57 = mix (tmpvar_47, tmpvar_41, tmpvar_56.xxxx);
  detail_10 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (0.25 * (mix (detail_10, tmpvar_44, tmpvar_56.yyyy) - 0.5));
  detail_10 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD0 + tmpvar_60);
  color_17 = tmpvar_61;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_63;
  tmpvar_63 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_62 * tmpvar_62)));
  if (((tmpvar_63 <= _OceanRadius) && (tmpvar_62 >= 0.0))) {
    sphereDist_8 = (tmpvar_62 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_63, 2.0))));
  };
  highp vec3 p_64;
  p_64 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (color_17, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_64, p_64)))), 0.0, 1.0)))));
  color_17 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (mix (color_17, main_15, vec4(handoff_7)) * _Color);
  color_17 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = mix (TNdotL_4, clamp (dot (tmpvar_55, -(_SunDir)), 0.0, 1.0), handoff_7);
  highp float tmpvar_72;
  tmpvar_72 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture2D (_LightTextureB0, vec2(tmpvar_72));
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_75;
  mediump vec4 shadows_76;
  highp vec4 shadowVals_77;
  highp float tmpvar_78;
  tmpvar_78 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_79;
  vec_79 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = textureCube (_ShadowMapTexture, vec_79);
  packDist_80 = tmpvar_81;
  shadowVals_77.x = dot (packDist_80, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_82;
  vec_82 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_83;
  lowp vec4 tmpvar_84;
  tmpvar_84 = textureCube (_ShadowMapTexture, vec_82);
  packDist_83 = tmpvar_84;
  shadowVals_77.y = dot (packDist_83, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_85;
  vec_85 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_86;
  lowp vec4 tmpvar_87;
  tmpvar_87 = textureCube (_ShadowMapTexture, vec_85);
  packDist_86 = tmpvar_87;
  shadowVals_77.z = dot (packDist_86, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_88;
  vec_88 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, vec_88);
  packDist_89 = tmpvar_90;
  shadowVals_77.w = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_91;
  tmpvar_91 = lessThan (shadowVals_77, vec4(tmpvar_78));
  highp vec4 tmpvar_92;
  tmpvar_92 = _LightShadowData.xxxx;
  highp float tmpvar_93;
  if (tmpvar_91.x) {
    tmpvar_93 = tmpvar_92.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  if (tmpvar_91.y) {
    tmpvar_94 = tmpvar_92.y;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  if (tmpvar_91.z) {
    tmpvar_95 = tmpvar_92.z;
  } else {
    tmpvar_95 = 1.0;
  };
  highp float tmpvar_96;
  if (tmpvar_91.w) {
    tmpvar_96 = tmpvar_92.w;
  } else {
    tmpvar_96 = 1.0;
  };
  highp vec4 tmpvar_97;
  tmpvar_97.x = tmpvar_93;
  tmpvar_97.y = tmpvar_94;
  tmpvar_97.z = tmpvar_95;
  tmpvar_97.w = tmpvar_96;
  shadows_76 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = dot (shadows_76, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_75 = tmpvar_98;
  highp float tmpvar_99;
  tmpvar_99 = ((tmpvar_73.w * tmpvar_74.w) * tmpvar_75);
  atten_3 = tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * tmpvar_71) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_67.xyz + (_Albedo * light_2));
  color_17.xyz = tmpvar_103;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
#line 457
#line 478
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 465
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 469
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 473
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
#line 457
#line 478
#line 478
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 482
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 486
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 489
lowp vec4 frag( in v2f IN ) {
    #line 491
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 495
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 499
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 503
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 507
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    #line 511
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    #line 515
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    #line 519
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    #line 523
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    #line 527
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    #line 532
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    #line 536
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 540
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    #line 544
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    #line 548
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w;
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_LightTexture0, vec2(tmpvar_99)).w;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_LightTexture0, vec2(tmpvar_99)).w;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 448
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 452
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 501
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 505
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 509
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 513
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 518
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 522
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 526
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 534
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 538
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 542
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 546
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 550
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_43));
  color_7.xyz = (color_7.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
dcl_texcoord9 o8
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.xy, v3
mov r1.zw, v4.xyxy
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r2.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
add r2.w, r1, c11.z
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o3.xyz, r0.x, r1
add r2.w, r0.y, c11
mul_sat r0.w, -r1, c11.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c8
mad o5.x, r0.w, r2.w, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r2
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
mov o8.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_99;
  tmpvar_99 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_102;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_99;
  tmpvar_99 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_102;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 467
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 445
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 449
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 454
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 495
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 499
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 503
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    #line 507
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 511
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        #line 515
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 519
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 523
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 527
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 531
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 535
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 539
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 543
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 547
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  highp float tmpvar_104;
  tmpvar_104 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  highp float tmpvar_104;
  tmpvar_104 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 457
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 461
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 465
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 477
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 490
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 494
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 498
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 502
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 506
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 510
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 514
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 518
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 522
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 527
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 531
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 535
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 539
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 543
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 547
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 551
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 555
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 559
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTextureB0, vec2(tmpvar_99)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTextureB0, vec2(tmpvar_99)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 461
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 449
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 453
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 502
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 506
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 510
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 514
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 519
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 523
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 547
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 551
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 448
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 452
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 501
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 505
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 509
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 513
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 518
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 522
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 526
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 534
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 538
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 542
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 546
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 550
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_47;
  if ((tmpvar_46.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float tmpvar_48;
  tmpvar_48 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_44.w) * tmpvar_45.w) * tmpvar_47);
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_49));
  color_7.xyz = (color_7.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump float shadow_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_108;
  if ((tmpvar_107.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  shadow_106 = tmpvar_108;
  tmpvar_105 = shadow_106;
  highp float tmpvar_109;
  tmpvar_109 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump float shadow_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_108;
  if ((tmpvar_107.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  shadow_106 = tmpvar_108;
  tmpvar_105 = shadow_106;
  highp float tmpvar_109;
  tmpvar_109 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 477
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 464
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 468
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 472
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 485
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 488
lowp vec4 frag( in v2f IN ) {
    #line 490
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 494
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 498
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 502
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 506
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 510
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 514
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 518
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 522
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 526
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 530
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 535
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 539
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 543
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 547
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 551
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 555
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 559
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 563
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 567
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  lowp float tmpvar_104;
  mediump float shadow_105;
  lowp float tmpvar_106;
  tmpvar_106 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = (_LightShadowData.x + (shadow_105 * (1.0 - _LightShadowData.x)));
  shadow_105 = tmpvar_107;
  tmpvar_104 = shadow_105;
  highp float tmpvar_108;
  tmpvar_108 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 478
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 465
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 469
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 473
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 478
#line 478
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 482
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 486
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 489
lowp vec4 frag( in v2f IN ) {
    #line 491
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 495
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 499
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 503
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 507
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 511
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 515
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 519
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 523
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 527
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 531
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 536
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 540
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 544
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 548
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 552
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 556
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 560
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 564
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 568
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43.x), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c11, c11
rsq r1.x, r1.x
mov r1.w, c13.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c11
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o5.xyz, -r0
add r2.w, r0, c13.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o4.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.z, r1.y, c13.w
mul_sat r0.w, -r0, c13.y
mad o6.x, r0.w, r1.z, c14.y
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r2.xyz, r1.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad o3.xy, r2.z, c10.zwzw, r2
add r2.xyz, -r0, c8
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o0, r1
mov o3.zw, r1
mov r1.xyz, c12
mov o1, v1
mul o8.xyz, r0.w, -r2
mov o2.xyz, v2
rcp o2.w, r0.w
add o7.xyz, -c8, r1
mov o9.xyz, r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  mediump float lightShadowDataX_100;
  highp float dist_101;
  lowp float tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_101 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = _LightShadowData.x;
  lightShadowDataX_100 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = max (float((dist_101 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_100);
  tmpvar_99 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_108;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99.x), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 466
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 454
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 458
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 462
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 507
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 511
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 515
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 519
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 524
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 528
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 532
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 536
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 540
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 544
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 548
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 552
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 556
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 52 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
mul o5.xyz, r1.x, r2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r1.xyz, r3.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mov o6.xyz, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp3 r1.w, r2, r2
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r2
mov r2.xyz, c16
mov o0, r3
mov o1, v1
mov o4.zw, r3
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r2
mov o10.xyz, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  mediump float lightShadowDataX_100;
  highp float dist_101;
  lowp float tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_101 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = _LightShadowData.x;
  lightShadowDataX_100 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = max (float((dist_101 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_100);
  tmpvar_99 = tmpvar_104;
  lowp float tmpvar_105;
  tmpvar_105 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_99);
  mediump float tmpvar_106;
  tmpvar_106 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_105), 0.0, 1.0);
  highp vec3 tmpvar_107;
  tmpvar_107 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_106)), 0.0, 1.0);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_109;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_105), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 470
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 457
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 461
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 465
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 470
#line 470
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 474
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 478
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 491
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 495
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 499
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 503
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 511
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 515
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 519
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 523
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 528
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 532
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 536
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 544
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 548
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 552
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 556
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 560
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_46;
  tmpvar_46 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_47;
  if ((tmpvar_46 < tmpvar_45)) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float tmpvar_48;
  tmpvar_48 = (tmpvar_44.w * tmpvar_47);
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_49));
  color_7.xyz = (color_7.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  tmpvar_103 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_104 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_107;
  if ((tmpvar_106 < tmpvar_103)) {
    tmpvar_107 = _LightShadowData.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  tmpvar_108 = (tmpvar_102.w * tmpvar_107);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  tmpvar_103 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_104 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_107;
  if ((tmpvar_106 < tmpvar_103)) {
    tmpvar_107 = _LightShadowData.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  tmpvar_108 = (tmpvar_102.w * tmpvar_107);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 428
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 475
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 462
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 466
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 470
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 428
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 475
#line 475
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 479
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 483
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 496
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 500
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 504
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 508
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 512
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 516
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 520
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 524
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 528
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 533
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 537
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 541
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 545
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 549
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 553
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 557
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 561
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 565
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_46;
  tmpvar_46 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_47;
  tmpvar_47 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_48;
  if ((tmpvar_47 < tmpvar_46)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float tmpvar_49;
  tmpvar_49 = ((tmpvar_44.w * tmpvar_45.w) * tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_49), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_50));
  color_7.xyz = (color_7.xyz * tmpvar_50);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_49), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  tmpvar_104 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_105;
  lowp vec4 tmpvar_106;
  tmpvar_106 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = dot (packDist_105, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_108;
  if ((tmpvar_107 < tmpvar_104)) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  tmpvar_109 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_108);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  tmpvar_104 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_105;
  lowp vec4 tmpvar_106;
  tmpvar_106 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = dot (packDist_105, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_108;
  if ((tmpvar_107 < tmpvar_104)) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  tmpvar_109 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_108);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 429
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 476
#line 455
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 459
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 463
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 467
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 471
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 429
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 484
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 497
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 501
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 505
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 509
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 513
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 517
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 521
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 525
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 529
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 534
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 538
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 542
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 546
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 550
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 554
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 558
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 562
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 566
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_46;
  vec3 tmpvar_47;
  tmpvar_47 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_46.x = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_46.y = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_46.z = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_46.w = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_48;
  tmpvar_48 = lessThan (shadowVals_46, tmpvar_47.zzzz);
  vec4 tmpvar_49;
  tmpvar_49 = _LightShadowData.xxxx;
  float tmpvar_50;
  if (tmpvar_48.x) {
    tmpvar_50 = tmpvar_49.x;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_48.y) {
    tmpvar_51 = tmpvar_49.y;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_48.z) {
    tmpvar_52 = tmpvar_49.z;
  } else {
    tmpvar_52 = 1.0;
  };
  float tmpvar_53;
  if (tmpvar_48.w) {
    tmpvar_53 = tmpvar_49.w;
  } else {
    tmpvar_53 = 1.0;
  };
  vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_50;
  tmpvar_54.y = tmpvar_51;
  tmpvar_54.z = tmpvar_52;
  tmpvar_54.w = tmpvar_53;
  float tmpvar_55;
  tmpvar_55 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_44.w) * tmpvar_45.w) * dot (tmpvar_54, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_56;
  tmpvar_56 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_55), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_56));
  color_7.xyz = (color_7.xyz * tmpvar_56);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump vec4 shadows_106;
  highp vec4 shadowVals_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_109;
  P_109 = (tmpvar_108.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_110;
  tmpvar_110 = texture2D (_ShadowMapTexture, P_109).x;
  shadowVals_107.x = tmpvar_110;
  highp vec2 P_111;
  P_111 = (tmpvar_108.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_112;
  tmpvar_112 = texture2D (_ShadowMapTexture, P_111).x;
  shadowVals_107.y = tmpvar_112;
  highp vec2 P_113;
  P_113 = (tmpvar_108.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_114;
  tmpvar_114 = texture2D (_ShadowMapTexture, P_113).x;
  shadowVals_107.z = tmpvar_114;
  highp vec2 P_115;
  P_115 = (tmpvar_108.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_116;
  tmpvar_116 = texture2D (_ShadowMapTexture, P_115).x;
  shadowVals_107.w = tmpvar_116;
  bvec4 tmpvar_117;
  tmpvar_117 = lessThan (shadowVals_107, tmpvar_108.zzzz);
  highp vec4 tmpvar_118;
  tmpvar_118 = _LightShadowData.xxxx;
  highp float tmpvar_119;
  if (tmpvar_117.x) {
    tmpvar_119 = tmpvar_118.x;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_117.y) {
    tmpvar_120 = tmpvar_118.y;
  } else {
    tmpvar_120 = 1.0;
  };
  highp float tmpvar_121;
  if (tmpvar_117.z) {
    tmpvar_121 = tmpvar_118.z;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_117.w) {
    tmpvar_122 = tmpvar_118.w;
  } else {
    tmpvar_122 = 1.0;
  };
  highp vec4 tmpvar_123;
  tmpvar_123.x = tmpvar_119;
  tmpvar_123.y = tmpvar_120;
  tmpvar_123.z = tmpvar_121;
  tmpvar_123.w = tmpvar_122;
  shadows_106 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = dot (shadows_106, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_105 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_127;
  tmpvar_127 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_126)), 0.0, 1.0);
  light_2 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_128;
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_129;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump vec4 shadows_106;
  highp vec4 shadowVals_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_109;
  P_109 = (tmpvar_108.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_110;
  tmpvar_110 = texture2D (_ShadowMapTexture, P_109).x;
  shadowVals_107.x = tmpvar_110;
  highp vec2 P_111;
  P_111 = (tmpvar_108.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_112;
  tmpvar_112 = texture2D (_ShadowMapTexture, P_111).x;
  shadowVals_107.y = tmpvar_112;
  highp vec2 P_113;
  P_113 = (tmpvar_108.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_114;
  tmpvar_114 = texture2D (_ShadowMapTexture, P_113).x;
  shadowVals_107.z = tmpvar_114;
  highp vec2 P_115;
  P_115 = (tmpvar_108.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_116;
  tmpvar_116 = texture2D (_ShadowMapTexture, P_115).x;
  shadowVals_107.w = tmpvar_116;
  bvec4 tmpvar_117;
  tmpvar_117 = lessThan (shadowVals_107, tmpvar_108.zzzz);
  highp vec4 tmpvar_118;
  tmpvar_118 = _LightShadowData.xxxx;
  highp float tmpvar_119;
  if (tmpvar_117.x) {
    tmpvar_119 = tmpvar_118.x;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_117.y) {
    tmpvar_120 = tmpvar_118.y;
  } else {
    tmpvar_120 = 1.0;
  };
  highp float tmpvar_121;
  if (tmpvar_117.z) {
    tmpvar_121 = tmpvar_118.z;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_117.w) {
    tmpvar_122 = tmpvar_118.w;
  } else {
    tmpvar_122 = 1.0;
  };
  highp vec4 tmpvar_123;
  tmpvar_123.x = tmpvar_119;
  tmpvar_123.y = tmpvar_120;
  tmpvar_123.z = tmpvar_121;
  tmpvar_123.w = tmpvar_122;
  shadows_106 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = dot (shadows_106, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_105 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_127;
  tmpvar_127 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_126)), 0.0, 1.0);
  light_2 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_128;
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_129;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 472
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 476
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 480
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 485
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 489
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 493
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 496
lowp vec4 frag( in v2f IN ) {
    #line 498
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 502
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 506
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 510
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 514
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 518
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 522
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 526
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 530
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 534
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 538
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 543
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 547
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 551
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 555
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 559
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 563
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 567
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 571
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 575
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_43;
  vec3 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_43.x = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[0].xyz)).x;
  shadows_43.y = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[1].xyz)).x;
  shadows_43.z = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[2].xyz)).x;
  shadows_43.w = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_45;
  tmpvar_45 = (_LightShadowData.xxxx + (shadows_43 * (1.0 - _LightShadowData.xxxx)));
  shadows_43 = tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_47;
  tmpvar_47 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_46), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_47));
  color_7.xyz = (color_7.xyz * tmpvar_47);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_46), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  lowp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_107;
  coord_107 = (tmpvar_106 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_108;
  tmpvar_108 = shadow2DEXT (_ShadowMapTexture, coord_107);
  shadows_105.x = tmpvar_108;
  highp vec3 coord_109;
  coord_109 = (tmpvar_106 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_110;
  tmpvar_110 = shadow2DEXT (_ShadowMapTexture, coord_109);
  shadows_105.y = tmpvar_110;
  highp vec3 coord_111;
  coord_111 = (tmpvar_106 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_112;
  tmpvar_112 = shadow2DEXT (_ShadowMapTexture, coord_111);
  shadows_105.z = tmpvar_112;
  highp vec3 coord_113;
  coord_113 = (tmpvar_106 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_114;
  tmpvar_114 = shadow2DEXT (_ShadowMapTexture, coord_113);
  shadows_105.w = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115 = (_LightShadowData.xxxx + (shadows_105 * (1.0 - _LightShadowData.xxxx)));
  shadows_105 = tmpvar_115;
  mediump float tmpvar_116;
  tmpvar_116 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_116;
  highp float tmpvar_117;
  tmpvar_117 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_117;
  mediump float tmpvar_118;
  tmpvar_118 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_119;
  tmpvar_119 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_118)), 0.0, 1.0);
  light_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_120;
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_121;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 472
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 476
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 480
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 485
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 489
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 493
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 496
lowp vec4 frag( in v2f IN ) {
    #line 498
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 502
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 506
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 510
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 514
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 518
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 522
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 526
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 530
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 534
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 538
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 543
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 547
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 551
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 555
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 559
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 563
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 567
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 571
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 575
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_45;
  shadowVals_45.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_46;
  tmpvar_46 = lessThan (shadowVals_45, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_47;
  tmpvar_47 = _LightShadowData.xxxx;
  float tmpvar_48;
  if (tmpvar_46.x) {
    tmpvar_48 = tmpvar_47.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float tmpvar_49;
  if (tmpvar_46.y) {
    tmpvar_49 = tmpvar_47.y;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_46.z) {
    tmpvar_50 = tmpvar_47.z;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_46.w) {
    tmpvar_51 = tmpvar_47.w;
  } else {
    tmpvar_51 = 1.0;
  };
  vec4 tmpvar_52;
  tmpvar_52.x = tmpvar_48;
  tmpvar_52.y = tmpvar_49;
  tmpvar_52.z = tmpvar_50;
  tmpvar_52.w = tmpvar_51;
  float tmpvar_53;
  tmpvar_53 = (tmpvar_44.w * dot (tmpvar_52, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_54;
  tmpvar_54 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_53), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_54));
  color_7.xyz = (color_7.xyz * tmpvar_54);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_53), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  mediump vec4 shadows_104;
  highp vec4 shadowVals_105;
  highp float tmpvar_106;
  tmpvar_106 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_107;
  vec_107 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_108;
  lowp vec4 tmpvar_109;
  tmpvar_109 = textureCube (_ShadowMapTexture, vec_107);
  packDist_108 = tmpvar_109;
  shadowVals_105.x = dot (packDist_108, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_110;
  vec_110 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_111;
  lowp vec4 tmpvar_112;
  tmpvar_112 = textureCube (_ShadowMapTexture, vec_110);
  packDist_111 = tmpvar_112;
  shadowVals_105.y = dot (packDist_111, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_113;
  vec_113 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_114;
  lowp vec4 tmpvar_115;
  tmpvar_115 = textureCube (_ShadowMapTexture, vec_113);
  packDist_114 = tmpvar_115;
  shadowVals_105.z = dot (packDist_114, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_116;
  vec_116 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_117;
  lowp vec4 tmpvar_118;
  tmpvar_118 = textureCube (_ShadowMapTexture, vec_116);
  packDist_117 = tmpvar_118;
  shadowVals_105.w = dot (packDist_117, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_119;
  tmpvar_119 = lessThan (shadowVals_105, vec4(tmpvar_106));
  highp vec4 tmpvar_120;
  tmpvar_120 = _LightShadowData.xxxx;
  highp float tmpvar_121;
  if (tmpvar_119.x) {
    tmpvar_121 = tmpvar_120.x;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_119.y) {
    tmpvar_122 = tmpvar_120.y;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_119.z) {
    tmpvar_123 = tmpvar_120.z;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_119.w) {
    tmpvar_124 = tmpvar_120.w;
  } else {
    tmpvar_124 = 1.0;
  };
  highp vec4 tmpvar_125;
  tmpvar_125.x = tmpvar_121;
  tmpvar_125.y = tmpvar_122;
  tmpvar_125.z = tmpvar_123;
  tmpvar_125.w = tmpvar_124;
  shadows_104 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = dot (shadows_104, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_103 = tmpvar_126;
  highp float tmpvar_127;
  tmpvar_127 = (tmpvar_102.w * tmpvar_103);
  atten_3 = tmpvar_127;
  mediump float tmpvar_128;
  tmpvar_128 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_129;
  tmpvar_129 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_128)), 0.0, 1.0);
  light_2 = tmpvar_129;
  highp vec3 tmpvar_130;
  tmpvar_130 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_131;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  mediump vec4 shadows_104;
  highp vec4 shadowVals_105;
  highp float tmpvar_106;
  tmpvar_106 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_107;
  vec_107 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_108;
  lowp vec4 tmpvar_109;
  tmpvar_109 = textureCube (_ShadowMapTexture, vec_107);
  packDist_108 = tmpvar_109;
  shadowVals_105.x = dot (packDist_108, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_110;
  vec_110 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_111;
  lowp vec4 tmpvar_112;
  tmpvar_112 = textureCube (_ShadowMapTexture, vec_110);
  packDist_111 = tmpvar_112;
  shadowVals_105.y = dot (packDist_111, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_113;
  vec_113 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_114;
  lowp vec4 tmpvar_115;
  tmpvar_115 = textureCube (_ShadowMapTexture, vec_113);
  packDist_114 = tmpvar_115;
  shadowVals_105.z = dot (packDist_114, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_116;
  vec_116 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_117;
  lowp vec4 tmpvar_118;
  tmpvar_118 = textureCube (_ShadowMapTexture, vec_116);
  packDist_117 = tmpvar_118;
  shadowVals_105.w = dot (packDist_117, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_119;
  tmpvar_119 = lessThan (shadowVals_105, vec4(tmpvar_106));
  highp vec4 tmpvar_120;
  tmpvar_120 = _LightShadowData.xxxx;
  highp float tmpvar_121;
  if (tmpvar_119.x) {
    tmpvar_121 = tmpvar_120.x;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_119.y) {
    tmpvar_122 = tmpvar_120.y;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_119.z) {
    tmpvar_123 = tmpvar_120.z;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_119.w) {
    tmpvar_124 = tmpvar_120.w;
  } else {
    tmpvar_124 = 1.0;
  };
  highp vec4 tmpvar_125;
  tmpvar_125.x = tmpvar_121;
  tmpvar_125.y = tmpvar_122;
  tmpvar_125.z = tmpvar_123;
  tmpvar_125.w = tmpvar_124;
  shadows_104 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = dot (shadows_104, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_103 = tmpvar_126;
  highp float tmpvar_127;
  tmpvar_127 = (tmpvar_102.w * tmpvar_103);
  atten_3 = tmpvar_127;
  mediump float tmpvar_128;
  tmpvar_128 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_129;
  tmpvar_129 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_128)), 0.0, 1.0);
  light_2 = tmpvar_129;
  highp vec3 tmpvar_130;
  tmpvar_130 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_131;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 514
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 518
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 522
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 526
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 530
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 534
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 539
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 543
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 547
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 551
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 555
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 559
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 563
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 567
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 571
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_46;
  shadowVals_46.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_47;
  tmpvar_47 = lessThan (shadowVals_46, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_48;
  tmpvar_48 = _LightShadowData.xxxx;
  float tmpvar_49;
  if (tmpvar_47.x) {
    tmpvar_49 = tmpvar_48.x;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_47.y) {
    tmpvar_50 = tmpvar_48.y;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_47.z) {
    tmpvar_51 = tmpvar_48.z;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_47.w) {
    tmpvar_52 = tmpvar_48.w;
  } else {
    tmpvar_52 = 1.0;
  };
  vec4 tmpvar_53;
  tmpvar_53.x = tmpvar_49;
  tmpvar_53.y = tmpvar_50;
  tmpvar_53.z = tmpvar_51;
  tmpvar_53.w = tmpvar_52;
  float tmpvar_54;
  tmpvar_54 = ((tmpvar_44.w * tmpvar_45.w) * dot (tmpvar_53, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_55;
  tmpvar_55 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_54), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_55));
  color_7.xyz = (color_7.xyz * tmpvar_55);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec4 shadowVals_106;
  highp float tmpvar_107;
  tmpvar_107 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_106.x = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_106.y = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_114;
  vec_114 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_115;
  lowp vec4 tmpvar_116;
  tmpvar_116 = textureCube (_ShadowMapTexture, vec_114);
  packDist_115 = tmpvar_116;
  shadowVals_106.z = dot (packDist_115, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_117;
  vec_117 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_118;
  lowp vec4 tmpvar_119;
  tmpvar_119 = textureCube (_ShadowMapTexture, vec_117);
  packDist_118 = tmpvar_119;
  shadowVals_106.w = dot (packDist_118, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_120;
  tmpvar_120 = lessThan (shadowVals_106, vec4(tmpvar_107));
  highp vec4 tmpvar_121;
  tmpvar_121 = _LightShadowData.xxxx;
  highp float tmpvar_122;
  if (tmpvar_120.x) {
    tmpvar_122 = tmpvar_121.x;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_120.y) {
    tmpvar_123 = tmpvar_121.y;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_120.z) {
    tmpvar_124 = tmpvar_121.z;
  } else {
    tmpvar_124 = 1.0;
  };
  highp float tmpvar_125;
  if (tmpvar_120.w) {
    tmpvar_125 = tmpvar_121.w;
  } else {
    tmpvar_125 = 1.0;
  };
  highp vec4 tmpvar_126;
  tmpvar_126.x = tmpvar_122;
  tmpvar_126.y = tmpvar_123;
  tmpvar_126.z = tmpvar_124;
  tmpvar_126.w = tmpvar_125;
  shadows_105 = tmpvar_126;
  mediump float tmpvar_127;
  tmpvar_127 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_127;
  highp float tmpvar_128;
  tmpvar_128 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_128;
  mediump float tmpvar_129;
  tmpvar_129 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_130;
  tmpvar_130 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_129)), 0.0, 1.0);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_131;
  highp vec3 tmpvar_132;
  tmpvar_132 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_132;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec4 shadowVals_106;
  highp float tmpvar_107;
  tmpvar_107 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_106.x = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_106.y = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_114;
  vec_114 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_115;
  lowp vec4 tmpvar_116;
  tmpvar_116 = textureCube (_ShadowMapTexture, vec_114);
  packDist_115 = tmpvar_116;
  shadowVals_106.z = dot (packDist_115, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_117;
  vec_117 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_118;
  lowp vec4 tmpvar_119;
  tmpvar_119 = textureCube (_ShadowMapTexture, vec_117);
  packDist_118 = tmpvar_119;
  shadowVals_106.w = dot (packDist_118, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_120;
  tmpvar_120 = lessThan (shadowVals_106, vec4(tmpvar_107));
  highp vec4 tmpvar_121;
  tmpvar_121 = _LightShadowData.xxxx;
  highp float tmpvar_122;
  if (tmpvar_120.x) {
    tmpvar_122 = tmpvar_121.x;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_120.y) {
    tmpvar_123 = tmpvar_121.y;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_120.z) {
    tmpvar_124 = tmpvar_121.z;
  } else {
    tmpvar_124 = 1.0;
  };
  highp float tmpvar_125;
  if (tmpvar_120.w) {
    tmpvar_125 = tmpvar_121.w;
  } else {
    tmpvar_125 = 1.0;
  };
  highp vec4 tmpvar_126;
  tmpvar_126.x = tmpvar_122;
  tmpvar_126.y = tmpvar_123;
  tmpvar_126.z = tmpvar_124;
  tmpvar_126.w = tmpvar_125;
  shadows_105 = tmpvar_126;
  mediump float tmpvar_127;
  tmpvar_127 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_127;
  highp float tmpvar_128;
  tmpvar_128 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_128;
  mediump float tmpvar_129;
  tmpvar_129 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_130;
  tmpvar_130 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_129)), 0.0, 1.0);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_131;
  highp vec3 tmpvar_132;
  tmpvar_132 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_132;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 435
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 482
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 469
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 473
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 477
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 435
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 482
#line 482
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 486
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 490
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 493
lowp vec4 frag( in v2f IN ) {
    #line 495
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 499
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 503
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 507
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 511
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 515
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 519
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 523
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 527
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 531
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 535
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 540
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 544
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 548
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 552
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 556
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 560
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 564
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 568
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 572
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w;
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_LightTexture0, vec2(tmpvar_99)).w;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_LightTexture0, vec2(tmpvar_99)).w;
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 448
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 452
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 501
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 505
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 509
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 513
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 518
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 522
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 526
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 534
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 538
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 542
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 546
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 550
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec3 tmpvar_43;
  tmpvar_43 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_43));
  color_7.xyz = (color_7.xyz * tmpvar_43);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Vector 9 [_SunDir]
Vector 10 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
dcl_texcoord9 o8
def c11, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c12, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c9, c9
mov r1.xy, v3
mov r1.zw, v4.xyxy
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r2.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c9
dp3 r1.w, -r2, r0
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r1.z, r0, c6
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
dp3 r0.x, r1, r1
add r2.w, r1, c11.z
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
rsq r0.x, r0.x
mul o3.xyz, r0.x, r1
add r2.w, r0.y, c11
mul_sat r0.w, -r1, c11.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c8
mad o5.x, r0.w, r2.w, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, -r0
mov r0.xyz, c10
mov o4.xyz, -r2
mov o1, v1
mov o2.xyz, v2
rcp o2.w, r0.w
add o6.xyz, -c8, r0
mov o8.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_99;
  tmpvar_99 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_102;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_99;
  tmpvar_99 = clamp (((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_100;
  tmpvar_100 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_99)), 0.0, 1.0);
  light_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_102;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 467
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 445
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 449
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 454
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 401
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 405
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 409
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 413
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    #line 495
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    uv.x -= 0.5;
    uv += localCoords;
    #line 499
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    #line 503
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    #line 507
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    #line 511
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        #line 515
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    #line 519
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    color = mix( color, main, vec4( handoff));
    #line 523
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 527
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 531
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 535
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 539
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 543
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 547
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = ((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  highp float tmpvar_104;
  tmpvar_104 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  highp float tmpvar_104;
  tmpvar_104 = ((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w);
  atten_3 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_108;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 457
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 461
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 465
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 412
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 416
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 420
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 424
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 477
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 490
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 494
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 498
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 502
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 506
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 510
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 514
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 518
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 522
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 527
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 531
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 535
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 539
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 543
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 547
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 551
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 555
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 559
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTextureB0, vec2(tmpvar_99)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  highp float tmpvar_99;
  tmpvar_99 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp float tmpvar_100;
  tmpvar_100 = (texture2D (_LightTextureB0, vec2(tmpvar_99)).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  mediump float tmpvar_101;
  tmpvar_101 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_100), 0.0, 1.0);
  highp vec3 tmpvar_102;
  tmpvar_102 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_101)), 0.0, 1.0);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_104;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_100), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 461
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 449
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 453
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 404
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 408
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 412
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 416
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 502
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 506
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 510
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 514
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 519
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 523
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 527
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 531
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 535
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 539
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 543
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 547
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 551
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 13 [_SunDir]
Vector 14 [_PlanetOrigin]
"vs_3_0
; 47 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c13, c13
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c13
dp3 r1.w, -r1, r0
mov o5.xyz, -r1
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mad o6.x, r0, r0.y, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c14
mov o1, v1
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o7.xyz, -c12, r0
mov o9.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 448
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 452
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 403
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 407
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 411
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 415
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 501
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 505
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 509
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 513
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 518
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 522
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 526
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 530
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 534
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 538
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 542
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 546
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 550
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_47;
  if ((tmpvar_46.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float tmpvar_48;
  tmpvar_48 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_44.w) * tmpvar_45.w) * tmpvar_47);
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_49));
  color_7.xyz = (color_7.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump float shadow_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_108;
  if ((tmpvar_107.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  shadow_106 = tmpvar_108;
  tmpvar_105 = shadow_106;
  highp float tmpvar_109;
  tmpvar_109 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump float shadow_106;
  lowp vec4 tmpvar_107;
  tmpvar_107 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_108;
  if ((tmpvar_107.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  shadow_106 = tmpvar_108;
  tmpvar_105 = shadow_106;
  highp float tmpvar_109;
  tmpvar_109 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 477
#line 456
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 460
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 464
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 468
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 472
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 441
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 431
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 422
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 426
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 430
uniform sampler2D _CityLightOverlayDetailTex;
#line 456
#line 477
#line 477
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 481
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 485
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 488
lowp vec4 frag( in v2f IN ) {
    #line 490
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 494
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 498
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 502
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 506
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 510
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 514
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 518
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 522
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 526
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 530
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 535
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 539
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 543
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 547
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 551
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 555
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 559
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 563
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 567
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * (1.0 - _LightShadowData.x))));
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  lowp float tmpvar_104;
  mediump float shadow_105;
  lowp float tmpvar_106;
  tmpvar_106 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  shadow_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = (_LightShadowData.x + (shadow_105 * (1.0 - _LightShadowData.x)));
  shadow_105 = tmpvar_107;
  tmpvar_104 = shadow_105;
  highp float tmpvar_108;
  tmpvar_108 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 478
#line 457
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 461
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 465
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 469
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 473
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 442
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 423
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 427
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 431
uniform sampler2D _CityLightOverlayDetailTex;
#line 457
#line 478
#line 478
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 482
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 486
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 489
lowp vec4 frag( in v2f IN ) {
    #line 491
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 495
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 499
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 503
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 507
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 511
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 515
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 519
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 523
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 527
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 531
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 536
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 540
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 544
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 548
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 552
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 556
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 560
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 564
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 568
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec4 tmpvar_43;
  tmpvar_43 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43.x), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
Vector 11 [_SunDir]
Vector 12 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
dcl_texcoord8 o8
dcl_texcoord9 o9
def c13, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c14, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c11, c11
rsq r1.x, r1.x
mov r1.w, c13.x
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c11
dp3 r0.w, -r0, r1
mov r1.xyz, v2
mov o5.xyz, -r0
add r2.w, r0, c13.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o4.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.z, r1.y, c13.w
mul_sat r0.w, -r0, c13.y
mad o6.x, r0.w, r1.z, c14.y
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r2.xyz, r1.xyww, c14.x
mul r2.y, r2, c9.x
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad o3.xy, r2.z, c10.zwzw, r2
add r2.xyz, -r0, c8
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o0, r1
mov o3.zw, r1
mov r1.xyz, c12
mov o1, v1
mul o8.xyz, r0.w, -r2
mov o2.xyz, v2
rcp o2.w, r0.w
add o7.xyz, -c8, r1
mov o9.xyz, r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  mediump float lightShadowDataX_100;
  highp float dist_101;
  lowp float tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_101 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = _LightShadowData.x;
  lightShadowDataX_100 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = max (float((dist_101 > (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w))), lightShadowDataX_100);
  tmpvar_99 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_106;
  tmpvar_106 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_105)), 0.0, 1.0);
  light_2 = tmpvar_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_108;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99.x), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99.x), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 466
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 454
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 458
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 462
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 409
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 413
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 417
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 421
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 507
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 511
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 515
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 519
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 524
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 528
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 532
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 536
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 540
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 544
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 548
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 552
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 556
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_4, p_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.x = gl_MultiTexCoord0.x;
  tmpvar_6.y = gl_MultiTexCoord0.y;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(normalize(tmpvar_6).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_SunDir));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_8)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_8)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  vec3 tmpvar_44;
  tmpvar_44 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_43), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_44));
  color_7.xyz = (color_7.xyz * tmpvar_44);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_43), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 15 [_SunDir]
Vector 16 [_PlanetOrigin]
"vs_3_0
; 52 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c17, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c18, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r1.x, c15, c15
rsq r1.x, r1.x
mov r1.w, c17.x
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
mov r0.xy, v3
mov r0.zw, v4.xyxy
dp4 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r0.w, -r0, r1
mov r1.xyz, v2
add r2.w, r0, c17.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.w, r1.y, c17
mul_sat r0.w, -r0, c17.y
mad o7.x, r0.w, r1.w, c18.y
mul o5.xyz, r1.x, r2
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r1.xyz, r3.xyww, c18.x
mul r1.y, r1, c13.x
mad o4.xy, r1.z, c14.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.xyz, -r1, c12
mov o6.xyz, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp3 r1.w, r2, r2
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mul o9.xyz, r0.x, -r2
mov r2.xyz, c16
mov o0, r3
mov o1, v1
mov o4.zw, r3
mov o2.xyz, v2
rcp o2.w, r0.x
add o8.xyz, -c12, r2
mov o10.xyz, r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  mediump float lightShadowDataX_100;
  highp float dist_101;
  lowp float tmpvar_102;
  tmpvar_102 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_101 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = _LightShadowData.x;
  lightShadowDataX_100 = tmpvar_103;
  highp float tmpvar_104;
  tmpvar_104 = max (float((dist_101 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_100);
  tmpvar_99 = tmpvar_104;
  lowp float tmpvar_105;
  tmpvar_105 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * tmpvar_99);
  mediump float tmpvar_106;
  tmpvar_106 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_105), 0.0, 1.0);
  highp vec3 tmpvar_107;
  tmpvar_107 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_106)), 0.0, 1.0);
  light_2 = tmpvar_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_109;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_105), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_6;
  tmpvar_6 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_7;
  p_7 = (tmpvar_6 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_7, p_7));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1;
  highp vec4 tmpvar_9;
  tmpvar_9.x = _glesMultiTexCoord0.x;
  tmpvar_9.y = _glesMultiTexCoord0.y;
  tmpvar_9.z = _glesMultiTexCoord1.x;
  tmpvar_9.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_10;
  tmpvar_10 = -(normalize(tmpvar_9).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_11;
  tmpvar_11 = normalize(_SunDir);
  highp float tmpvar_12;
  tmpvar_12 = dot (tmpvar_10, tmpvar_11);
  NdotL_2 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_13;
  highp vec4 o_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_15.x;
  tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
  o_14.xy = (tmpvar_16 + tmpvar_15.w);
  o_14.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD3 = o_14;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_8).xyz);
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_6 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float TNdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float handoff_7;
  highp float sphereDist_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec3 norm_11;
  highp vec2 localCoords_12;
  mediump vec4 encnorm_13;
  mediump vec4 citylightoverlaydetailZ_14;
  mediump vec4 citylightoverlaydetailY_15;
  mediump vec4 citylightoverlaydetailX_16;
  mediump vec4 citydarkoverlaydetailZ_17;
  mediump vec4 citydarkoverlaydetailY_18;
  mediump vec4 citydarkoverlaydetailX_19;
  mediump vec4 cityoverlay_20;
  mediump float vertLerp_21;
  mediump vec4 main_22;
  highp vec2 uv_23;
  mediump vec4 color_24;
  highp float r_25;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_25));
  uv_23.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_29;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_30;
    y_over_x_30 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_31;
    highp float x_32;
    x_32 = (y_over_x_30 * inversesqrt(((y_over_x_30 * y_over_x_30) + 1.0)));
    s_31 = (sign(x_32) * (1.5708 - (sqrt((1.0 - abs(x_32))) * (1.5708 + (abs(x_32) * (-0.214602 + (abs(x_32) * (0.0865667 + (abs(x_32) * -0.0310296)))))))));
    r_29 = s_31;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_29 = (s_31 + 3.14159);
      } else {
        r_29 = (r_29 - 3.14159);
      };
    };
  } else {
    r_29 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_33;
  tmpvar_33 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_34;
  tmpvar_34 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_36;
  tmpvar_36.x = (0.159155 * sqrt(dot (tmpvar_34, tmpvar_34)));
  tmpvar_36.y = dFdx(tmpvar_33);
  tmpvar_36.z = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_36.w = dFdy(tmpvar_33);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_MainTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  main_22 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_44;
  tmpvar_44.w = 0.0;
  tmpvar_44.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_44), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_21 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, tmpvar_41);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, tmpvar_38);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_21));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_21));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_21));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  cityoverlay_20 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_19 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_18 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_17 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_16 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_15 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_14 = tmpvar_66;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture2DGradEXT (_BumpMap, uv_23, tmpvar_36.xy, tmpvar_36.zw);
  encnorm_13 = tmpvar_68;
  mediump vec2 tmpvar_69;
  tmpvar_69 = encnorm_13.wy;
  localCoords_12 = tmpvar_69;
  highp vec2 tmpvar_70;
  tmpvar_70 = (localCoords_12 - vec2(0.5, 0.5));
  localCoords_12.y = tmpvar_70.y;
  localCoords_12.x = (tmpvar_70.x * 0.5);
  uv_23.x = (uv_23.x - 0.5);
  highp vec2 tmpvar_71;
  tmpvar_71 = (uv_23 + localCoords_12);
  uv_23 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = cos((6.28319 * tmpvar_71.x));
  norm_11.z = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = sin((6.28319 * tmpvar_71.x));
  norm_11.x = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = cos((3.14159 * tmpvar_71.y));
  norm_11.y = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = -(norm_11);
  norm_11 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (tmpvar_54, tmpvar_48, tmpvar_76.xxxx);
  detail_10 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (0.25 * (mix (detail_10, tmpvar_51, tmpvar_76.yyyy) - 0.5));
  detail_10 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_9));
  highp vec4 tmpvar_81;
  tmpvar_81 = (xlv_TEXCOORD0 + tmpvar_80);
  color_24 = tmpvar_81;
  sphereDist_8 = xlv_TEXCOORD1.w;
  highp float tmpvar_82;
  tmpvar_82 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_83;
  tmpvar_83 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_82 * tmpvar_82)));
  if (((tmpvar_83 <= _OceanRadius) && (tmpvar_82 >= 0.0))) {
    sphereDist_8 = (tmpvar_82 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_83, 2.0))));
  };
  highp vec3 p_84;
  p_84 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_85;
  tmpvar_85 = mix (color_24, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_8) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_84, p_84)))), 0.0, 1.0)))));
  color_24 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_7 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_20.w = (cityoverlay_20.w * tmpvar_87);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (citydarkoverlaydetailZ_17, citydarkoverlaydetailX_19, tmpvar_76.xxxx);
  detail_10 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (detail_10, citydarkoverlaydetailY_18, tmpvar_76.yyyy);
  detail_10 = tmpvar_89;
  mediump vec4 tmpvar_90;
  tmpvar_90 = (cityoverlay_20 * detail_10);
  citydarkoverlay_6.xyz = tmpvar_90.xyz;
  highp vec4 tmpvar_91;
  tmpvar_91 = mix (citylightoverlaydetailZ_14, citylightoverlaydetailX_16, tmpvar_76.xxxx);
  detail_10 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (detail_10, citylightoverlaydetailY_15, tmpvar_76.yyyy);
  detail_10 = tmpvar_92;
  mediump vec4 tmpvar_93;
  tmpvar_93 = (cityoverlay_20 * detail_10);
  mediump vec4 tmpvar_94;
  tmpvar_94 = (mix (mix (color_24, main_22, vec4(handoff_7)), tmpvar_93, tmpvar_93.wwww) * _Color);
  color_24.w = tmpvar_94.w;
  highp vec3 tmpvar_95;
  tmpvar_95 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_95;
  lowp vec3 tmpvar_96;
  tmpvar_96 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_96;
  highp float tmpvar_97;
  tmpvar_97 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  TNdotL_3 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (tmpvar_75, -(_SunDir)), 0.0, 1.0);
  lowp float tmpvar_99;
  tmpvar_99 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  mediump float tmpvar_100;
  tmpvar_100 = clamp ((((_LightColor0.w * mix (TNdotL_3, tmpvar_98, handoff_7)) * 2.0) * tmpvar_99), 0.0, 1.0);
  highp vec3 tmpvar_101;
  tmpvar_101 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_100)), 0.0, 1.0);
  light_2 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_102;
  highp vec3 tmpvar_103;
  tmpvar_103 = (tmpvar_94.xyz + (_Albedo * light_2));
  color_24.xyz = tmpvar_103;
  color_24.xyz = (color_24.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_90.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_98 - 0.01)) / 0.99) * 4.0) * tmpvar_99), 0.0, 1.0), 0.0, 1.0)));
  color_24.xyz = mix (color_24, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_24.w = 1.0;
  tmpvar_1 = color_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 470
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 457
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 461
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 465
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 411
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 415
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 419
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 423
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 470
#line 470
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 474
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 478
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 481
lowp vec4 frag( in v2f IN ) {
    #line 483
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 487
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 491
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 495
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 499
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 503
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 507
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 511
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 515
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 519
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 523
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 528
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 532
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 536
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 540
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 544
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 548
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 552
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 556
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 560
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_46;
  tmpvar_46 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_47;
  if ((tmpvar_46 < tmpvar_45)) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float tmpvar_48;
  tmpvar_48 = (tmpvar_44.w * tmpvar_47);
  vec3 tmpvar_49;
  tmpvar_49 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_48), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_49));
  color_7.xyz = (color_7.xyz * tmpvar_49);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_48), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  tmpvar_103 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_104 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_107;
  if ((tmpvar_106 < tmpvar_103)) {
    tmpvar_107 = _LightShadowData.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  tmpvar_108 = (tmpvar_102.w * tmpvar_107);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  tmpvar_103 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_104 = tmpvar_105;
  highp float tmpvar_106;
  tmpvar_106 = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_107;
  if ((tmpvar_106 < tmpvar_103)) {
    tmpvar_107 = _LightShadowData.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  tmpvar_108 = (tmpvar_102.w * tmpvar_107);
  atten_3 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_110;
  tmpvar_110 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_109)), 0.0, 1.0);
  light_2 = tmpvar_110;
  highp vec3 tmpvar_111;
  tmpvar_111 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_112;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 428
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 475
#line 454
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 458
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 462
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 466
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 470
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 420
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 424
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 428
uniform sampler2D _CityLightOverlayDetailTex;
#line 454
#line 475
#line 475
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 479
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 483
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 486
lowp vec4 frag( in v2f IN ) {
    #line 488
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 492
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 496
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 500
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 504
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 508
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 512
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 516
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 520
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 524
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 528
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 533
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 537
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 541
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 545
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 549
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 553
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 557
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 561
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 565
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_46;
  tmpvar_46 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  float tmpvar_47;
  tmpvar_47 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_48;
  if ((tmpvar_47 < tmpvar_46)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float tmpvar_49;
  tmpvar_49 = ((tmpvar_44.w * tmpvar_45.w) * tmpvar_48);
  vec3 tmpvar_50;
  tmpvar_50 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_49), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_50));
  color_7.xyz = (color_7.xyz * tmpvar_50);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_49), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  tmpvar_104 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_105;
  lowp vec4 tmpvar_106;
  tmpvar_106 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = dot (packDist_105, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_108;
  if ((tmpvar_107 < tmpvar_104)) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  tmpvar_109 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_108);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  tmpvar_104 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_105;
  lowp vec4 tmpvar_106;
  tmpvar_106 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_105 = tmpvar_106;
  highp float tmpvar_107;
  tmpvar_107 = dot (packDist_105, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_108;
  if ((tmpvar_107 < tmpvar_104)) {
    tmpvar_108 = _LightShadowData.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  tmpvar_109 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_108);
  atten_3 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_111;
  tmpvar_111 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_110)), 0.0, 1.0);
  light_2 = tmpvar_111;
  highp vec3 tmpvar_112;
  tmpvar_112 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_113;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 429
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 476
#line 455
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 459
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 463
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 467
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 471
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 440
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 430
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 421
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 425
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 429
uniform sampler2D _CityLightOverlayDetailTex;
#line 455
#line 476
#line 476
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 480
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 484
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 487
lowp vec4 frag( in v2f IN ) {
    #line 489
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 493
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 497
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 501
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 505
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 509
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 513
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 517
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 521
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 525
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 529
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 534
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 538
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 542
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 546
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 550
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 554
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 558
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 562
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 566
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_46;
  vec3 tmpvar_47;
  tmpvar_47 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_46.x = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_46.y = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_46.z = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_46.w = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_48;
  tmpvar_48 = lessThan (shadowVals_46, tmpvar_47.zzzz);
  vec4 tmpvar_49;
  tmpvar_49 = _LightShadowData.xxxx;
  float tmpvar_50;
  if (tmpvar_48.x) {
    tmpvar_50 = tmpvar_49.x;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_48.y) {
    tmpvar_51 = tmpvar_49.y;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_48.z) {
    tmpvar_52 = tmpvar_49.z;
  } else {
    tmpvar_52 = 1.0;
  };
  float tmpvar_53;
  if (tmpvar_48.w) {
    tmpvar_53 = tmpvar_49.w;
  } else {
    tmpvar_53 = 1.0;
  };
  vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_50;
  tmpvar_54.y = tmpvar_51;
  tmpvar_54.z = tmpvar_52;
  tmpvar_54.w = tmpvar_53;
  float tmpvar_55;
  tmpvar_55 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_44.w) * tmpvar_45.w) * dot (tmpvar_54, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_56;
  tmpvar_56 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_55), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_56));
  color_7.xyz = (color_7.xyz * tmpvar_56);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump vec4 shadows_106;
  highp vec4 shadowVals_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_109;
  P_109 = (tmpvar_108.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_110;
  tmpvar_110 = texture2D (_ShadowMapTexture, P_109).x;
  shadowVals_107.x = tmpvar_110;
  highp vec2 P_111;
  P_111 = (tmpvar_108.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_112;
  tmpvar_112 = texture2D (_ShadowMapTexture, P_111).x;
  shadowVals_107.y = tmpvar_112;
  highp vec2 P_113;
  P_113 = (tmpvar_108.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_114;
  tmpvar_114 = texture2D (_ShadowMapTexture, P_113).x;
  shadowVals_107.z = tmpvar_114;
  highp vec2 P_115;
  P_115 = (tmpvar_108.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_116;
  tmpvar_116 = texture2D (_ShadowMapTexture, P_115).x;
  shadowVals_107.w = tmpvar_116;
  bvec4 tmpvar_117;
  tmpvar_117 = lessThan (shadowVals_107, tmpvar_108.zzzz);
  highp vec4 tmpvar_118;
  tmpvar_118 = _LightShadowData.xxxx;
  highp float tmpvar_119;
  if (tmpvar_117.x) {
    tmpvar_119 = tmpvar_118.x;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_117.y) {
    tmpvar_120 = tmpvar_118.y;
  } else {
    tmpvar_120 = 1.0;
  };
  highp float tmpvar_121;
  if (tmpvar_117.z) {
    tmpvar_121 = tmpvar_118.z;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_117.w) {
    tmpvar_122 = tmpvar_118.w;
  } else {
    tmpvar_122 = 1.0;
  };
  highp vec4 tmpvar_123;
  tmpvar_123.x = tmpvar_119;
  tmpvar_123.y = tmpvar_120;
  tmpvar_123.z = tmpvar_121;
  tmpvar_123.w = tmpvar_122;
  shadows_106 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = dot (shadows_106, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_105 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_127;
  tmpvar_127 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_126)), 0.0, 1.0);
  light_2 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_128;
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_129;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  lowp vec4 tmpvar_101;
  highp vec2 P_102;
  P_102 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_101 = texture2D (_LightTexture0, P_102);
  highp float tmpvar_103;
  tmpvar_103 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture2D (_LightTextureB0, vec2(tmpvar_103));
  lowp float tmpvar_105;
  mediump vec4 shadows_106;
  highp vec4 shadowVals_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_109;
  P_109 = (tmpvar_108.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_110;
  tmpvar_110 = texture2D (_ShadowMapTexture, P_109).x;
  shadowVals_107.x = tmpvar_110;
  highp vec2 P_111;
  P_111 = (tmpvar_108.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_112;
  tmpvar_112 = texture2D (_ShadowMapTexture, P_111).x;
  shadowVals_107.y = tmpvar_112;
  highp vec2 P_113;
  P_113 = (tmpvar_108.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_114;
  tmpvar_114 = texture2D (_ShadowMapTexture, P_113).x;
  shadowVals_107.z = tmpvar_114;
  highp vec2 P_115;
  P_115 = (tmpvar_108.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_116;
  tmpvar_116 = texture2D (_ShadowMapTexture, P_115).x;
  shadowVals_107.w = tmpvar_116;
  bvec4 tmpvar_117;
  tmpvar_117 = lessThan (shadowVals_107, tmpvar_108.zzzz);
  highp vec4 tmpvar_118;
  tmpvar_118 = _LightShadowData.xxxx;
  highp float tmpvar_119;
  if (tmpvar_117.x) {
    tmpvar_119 = tmpvar_118.x;
  } else {
    tmpvar_119 = 1.0;
  };
  highp float tmpvar_120;
  if (tmpvar_117.y) {
    tmpvar_120 = tmpvar_118.y;
  } else {
    tmpvar_120 = 1.0;
  };
  highp float tmpvar_121;
  if (tmpvar_117.z) {
    tmpvar_121 = tmpvar_118.z;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_117.w) {
    tmpvar_122 = tmpvar_118.w;
  } else {
    tmpvar_122 = 1.0;
  };
  highp vec4 tmpvar_123;
  tmpvar_123.x = tmpvar_119;
  tmpvar_123.y = tmpvar_120;
  tmpvar_123.z = tmpvar_121;
  tmpvar_123.w = tmpvar_122;
  shadows_106 = tmpvar_123;
  mediump float tmpvar_124;
  tmpvar_124 = dot (shadows_106, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_105 = tmpvar_124;
  highp float tmpvar_125;
  tmpvar_125 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_101.w) * tmpvar_104.w) * tmpvar_105);
  atten_3 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_127;
  tmpvar_127 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_126)), 0.0, 1.0);
  light_2 = tmpvar_127;
  highp vec3 tmpvar_128;
  tmpvar_128 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_128;
  highp vec3 tmpvar_129;
  tmpvar_129 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_129;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 472
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 476
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 480
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 485
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 489
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 493
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 496
lowp vec4 frag( in v2f IN ) {
    #line 498
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 502
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 506
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 510
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 514
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 518
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 522
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 526
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 530
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 534
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 538
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 543
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 547
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 551
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 555
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 559
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 563
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 567
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 571
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 575
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1.xyz = tmpvar_39.xyz;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7.w = tmpvar_41.w;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  vec4 shadows_43;
  vec3 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_43.x = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[0].xyz)).x;
  shadows_43.y = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[1].xyz)).x;
  shadows_43.z = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[2].xyz)).x;
  shadows_43.w = shadow2D (_ShadowMapTexture, (tmpvar_44 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_45;
  tmpvar_45 = (_LightShadowData.xxxx + (shadows_43 * (1.0 - _LightShadowData.xxxx)));
  shadows_43 = tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (((float((xlv_TEXCOORD2.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_47;
  tmpvar_47 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38)) * 2.0) * tmpvar_46), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_47));
  color_7.xyz = (color_7.xyz * tmpvar_47);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_46), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 17 [_SunDir]
Vector 18 [_PlanetOrigin]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c17, c17
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c17
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c19.x
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c19.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c19.y
add r0.y, r0, c19.w
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.xyz, -r1, c16
mad o7.x, r0, r0.y, c20
mov r0.xyz, r1
dp3 r1.w, r2, r2
rsq r1.w, r1.w
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mov r0.xyz, c18
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o8.xyz, -c16, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7.xyz = tmpvar_91.xyz;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25.w = tmpvar_95.w;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  lowp vec4 tmpvar_100;
  highp vec2 P_101;
  P_101 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_100 = texture2D (_LightTexture0, P_101);
  highp float tmpvar_102;
  tmpvar_102 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_103;
  tmpvar_103 = texture2D (_LightTextureB0, vec2(tmpvar_102));
  lowp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_107;
  coord_107 = (tmpvar_106 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_108;
  tmpvar_108 = shadow2DEXT (_ShadowMapTexture, coord_107);
  shadows_105.x = tmpvar_108;
  highp vec3 coord_109;
  coord_109 = (tmpvar_106 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_110;
  tmpvar_110 = shadow2DEXT (_ShadowMapTexture, coord_109);
  shadows_105.y = tmpvar_110;
  highp vec3 coord_111;
  coord_111 = (tmpvar_106 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_112;
  tmpvar_112 = shadow2DEXT (_ShadowMapTexture, coord_111);
  shadows_105.z = tmpvar_112;
  highp vec3 coord_113;
  coord_113 = (tmpvar_106 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_114;
  tmpvar_114 = shadow2DEXT (_ShadowMapTexture, coord_113);
  shadows_105.w = tmpvar_114;
  highp vec4 tmpvar_115;
  tmpvar_115 = (_LightShadowData.xxxx + (shadows_105 * (1.0 - _LightShadowData.xxxx)));
  shadows_105 = tmpvar_115;
  mediump float tmpvar_116;
  tmpvar_116 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_116;
  highp float tmpvar_117;
  tmpvar_117 = (((float((xlv_TEXCOORD2.z > 0.0)) * tmpvar_100.w) * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_117;
  mediump float tmpvar_118;
  tmpvar_118 = clamp ((((_LightColor0.w * mix (TNdotL_4, tmpvar_99, handoff_8)) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_119;
  tmpvar_119 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_118)), 0.0, 1.0);
  light_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_120;
  highp vec3 tmpvar_121;
  tmpvar_121 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_121;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 464
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 468
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 472
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 476
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 480
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 449
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 439
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 430
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 434
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 438
uniform sampler2D _CityLightOverlayDetailTex;
#line 464
#line 485
#line 485
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 489
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 493
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 496
lowp vec4 frag( in v2f IN ) {
    #line 498
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 502
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 506
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 510
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 514
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 518
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 522
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 526
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 530
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 534
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 538
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 543
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 547
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 551
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 555
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 559
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 563
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 567
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 571
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 575
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_45;
  shadowVals_45.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_45.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_46;
  tmpvar_46 = lessThan (shadowVals_45, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_47;
  tmpvar_47 = _LightShadowData.xxxx;
  float tmpvar_48;
  if (tmpvar_46.x) {
    tmpvar_48 = tmpvar_47.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float tmpvar_49;
  if (tmpvar_46.y) {
    tmpvar_49 = tmpvar_47.y;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_46.z) {
    tmpvar_50 = tmpvar_47.z;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_46.w) {
    tmpvar_51 = tmpvar_47.w;
  } else {
    tmpvar_51 = 1.0;
  };
  vec4 tmpvar_52;
  tmpvar_52.x = tmpvar_48;
  tmpvar_52.y = tmpvar_49;
  tmpvar_52.z = tmpvar_50;
  tmpvar_52.w = tmpvar_51;
  float tmpvar_53;
  tmpvar_53 = (tmpvar_44.w * dot (tmpvar_52, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_54;
  tmpvar_54 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_53), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_54));
  color_7.xyz = (color_7.xyz * tmpvar_54);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_53), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  mediump vec4 shadows_104;
  highp vec4 shadowVals_105;
  highp float tmpvar_106;
  tmpvar_106 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_107;
  vec_107 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_108;
  lowp vec4 tmpvar_109;
  tmpvar_109 = textureCube (_ShadowMapTexture, vec_107);
  packDist_108 = tmpvar_109;
  shadowVals_105.x = dot (packDist_108, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_110;
  vec_110 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_111;
  lowp vec4 tmpvar_112;
  tmpvar_112 = textureCube (_ShadowMapTexture, vec_110);
  packDist_111 = tmpvar_112;
  shadowVals_105.y = dot (packDist_111, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_113;
  vec_113 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_114;
  lowp vec4 tmpvar_115;
  tmpvar_115 = textureCube (_ShadowMapTexture, vec_113);
  packDist_114 = tmpvar_115;
  shadowVals_105.z = dot (packDist_114, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_116;
  vec_116 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_117;
  lowp vec4 tmpvar_118;
  tmpvar_118 = textureCube (_ShadowMapTexture, vec_116);
  packDist_117 = tmpvar_118;
  shadowVals_105.w = dot (packDist_117, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_119;
  tmpvar_119 = lessThan (shadowVals_105, vec4(tmpvar_106));
  highp vec4 tmpvar_120;
  tmpvar_120 = _LightShadowData.xxxx;
  highp float tmpvar_121;
  if (tmpvar_119.x) {
    tmpvar_121 = tmpvar_120.x;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_119.y) {
    tmpvar_122 = tmpvar_120.y;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_119.z) {
    tmpvar_123 = tmpvar_120.z;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_119.w) {
    tmpvar_124 = tmpvar_120.w;
  } else {
    tmpvar_124 = 1.0;
  };
  highp vec4 tmpvar_125;
  tmpvar_125.x = tmpvar_121;
  tmpvar_125.y = tmpvar_122;
  tmpvar_125.z = tmpvar_123;
  tmpvar_125.w = tmpvar_124;
  shadows_104 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = dot (shadows_104, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_103 = tmpvar_126;
  highp float tmpvar_127;
  tmpvar_127 = (tmpvar_102.w * tmpvar_103);
  atten_3 = tmpvar_127;
  mediump float tmpvar_128;
  tmpvar_128 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_129;
  tmpvar_129 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_128)), 0.0, 1.0);
  light_2 = tmpvar_129;
  highp vec3 tmpvar_130;
  tmpvar_130 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_131;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTexture0, vec2(tmpvar_101));
  highp float tmpvar_103;
  mediump vec4 shadows_104;
  highp vec4 shadowVals_105;
  highp float tmpvar_106;
  tmpvar_106 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_107;
  vec_107 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_108;
  lowp vec4 tmpvar_109;
  tmpvar_109 = textureCube (_ShadowMapTexture, vec_107);
  packDist_108 = tmpvar_109;
  shadowVals_105.x = dot (packDist_108, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_110;
  vec_110 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_111;
  lowp vec4 tmpvar_112;
  tmpvar_112 = textureCube (_ShadowMapTexture, vec_110);
  packDist_111 = tmpvar_112;
  shadowVals_105.y = dot (packDist_111, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_113;
  vec_113 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_114;
  lowp vec4 tmpvar_115;
  tmpvar_115 = textureCube (_ShadowMapTexture, vec_113);
  packDist_114 = tmpvar_115;
  shadowVals_105.z = dot (packDist_114, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_116;
  vec_116 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_117;
  lowp vec4 tmpvar_118;
  tmpvar_118 = textureCube (_ShadowMapTexture, vec_116);
  packDist_117 = tmpvar_118;
  shadowVals_105.w = dot (packDist_117, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_119;
  tmpvar_119 = lessThan (shadowVals_105, vec4(tmpvar_106));
  highp vec4 tmpvar_120;
  tmpvar_120 = _LightShadowData.xxxx;
  highp float tmpvar_121;
  if (tmpvar_119.x) {
    tmpvar_121 = tmpvar_120.x;
  } else {
    tmpvar_121 = 1.0;
  };
  highp float tmpvar_122;
  if (tmpvar_119.y) {
    tmpvar_122 = tmpvar_120.y;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_119.z) {
    tmpvar_123 = tmpvar_120.z;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_119.w) {
    tmpvar_124 = tmpvar_120.w;
  } else {
    tmpvar_124 = 1.0;
  };
  highp vec4 tmpvar_125;
  tmpvar_125.x = tmpvar_121;
  tmpvar_125.y = tmpvar_122;
  tmpvar_125.z = tmpvar_123;
  tmpvar_125.w = tmpvar_124;
  shadows_104 = tmpvar_125;
  mediump float tmpvar_126;
  tmpvar_126 = dot (shadows_104, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_103 = tmpvar_126;
  highp float tmpvar_127;
  tmpvar_127 = (tmpvar_102.w * tmpvar_103);
  atten_3 = tmpvar_127;
  mediump float tmpvar_128;
  tmpvar_128 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_129;
  tmpvar_129 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_128)), 0.0, 1.0);
  light_2 = tmpvar_129;
  highp vec3 tmpvar_130;
  tmpvar_130 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_131;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 481
#line 460
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 464
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 468
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 472
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 476
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 445
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 435
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 426
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 430
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 434
uniform sampler2D _CityLightOverlayDetailTex;
#line 460
#line 481
#line 481
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 485
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 489
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 492
lowp vec4 frag( in v2f IN ) {
    #line 494
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 498
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 502
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 506
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 510
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 514
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 518
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 522
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 526
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 530
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 534
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 539
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 543
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 547
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 551
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 555
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 559
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 563
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 567
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 571
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform vec3 _SunDir;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (p_3, p_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.x = gl_MultiTexCoord0.x;
  tmpvar_5.y = gl_MultiTexCoord0.y;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(normalize(tmpvar_5).xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_SunDir));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor((1.01 + tmpvar_7)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_7)), 0.0, 1.0));
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD9;
varying vec3 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform vec3 _PlanetOrigin;
uniform vec4 _OceanColor;
uniform float _OceanDepthFactor;
uniform float _OceanRadius;
uniform float _PlanetOpacity;
uniform vec3 _SunDir;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  float sphereDist_2;
  vec3 norm_3;
  vec2 localCoords_4;
  vec4 cityoverlay_5;
  vec2 uv_6;
  vec4 color_7;
  float r_8;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * r_8));
  uv_6.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  float r_12;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    float y_over_x_13;
    y_over_x_13 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    float s_14;
    float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  float tmpvar_16;
  tmpvar_16 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  vec2 tmpvar_17;
  tmpvar_17 = dFdx(xlv_TEXCOORD5.xy);
  vec2 tmpvar_18;
  tmpvar_18 = dFdy(xlv_TEXCOORD5.xy);
  vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(tmpvar_16);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(tmpvar_16);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DGradARB (_MainTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  vec4 tmpvar_21;
  tmpvar_21.w = 0.0;
  tmpvar_21.xyz = -(xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_21), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_23;
  tmpvar_23 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_19.xy, tmpvar_19.zw);
  cityoverlay_5 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zy * _CityOverlayDetailScale));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.zx * _CityOverlayDetailScale));
  vec4 tmpvar_29;
  tmpvar_29 = texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD5.xy * _CityOverlayDetailScale));
  vec2 tmpvar_30;
  tmpvar_30 = (texture2DGradARB (_BumpMap, uv_6, tmpvar_19.xy, tmpvar_19.zw).wy - vec2(0.5, 0.5));
  localCoords_4.y = tmpvar_30.y;
  localCoords_4.x = (tmpvar_30.x * 0.5);
  uv_6.x = (uv_6.x - 0.5);
  vec2 tmpvar_31;
  tmpvar_31 = (uv_6 + localCoords_4);
  uv_6 = tmpvar_31;
  norm_3.z = cos((6.28319 * tmpvar_31.x));
  norm_3.x = sin((6.28319 * tmpvar_31.x));
  norm_3.y = cos((3.14159 * tmpvar_31.y));
  vec3 tmpvar_32;
  tmpvar_32 = -(norm_3);
  norm_3 = tmpvar_32;
  vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD5);
  vec4 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD0 + mix ((0.25 * (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.xy * _DetailScale)), vec4(tmpvar_22)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zy * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD5.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD5.zx * _DetailScale)), vec4(tmpvar_22)), tmpvar_33.yyyy) - 0.5)), vec4(0.0, 0.0, 0.0, 0.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0))));
  color_7 = tmpvar_34;
  sphereDist_2 = xlv_TEXCOORD1.w;
  float tmpvar_35;
  tmpvar_35 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  float tmpvar_36;
  tmpvar_36 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_35 * tmpvar_35)));
  if (((tmpvar_36 <= _OceanRadius) && (tmpvar_35 >= 0.0))) {
    sphereDist_2 = (tmpvar_35 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_36, 2.0))));
  };
  vec3 p_37;
  p_37 = (_PlanetOrigin - xlv_TEXCOORD9);
  float tmpvar_38;
  tmpvar_38 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  cityoverlay_5.w = (tmpvar_23.w * clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_39;
  tmpvar_39 = (cityoverlay_5 * mix (mix (tmpvar_26, tmpvar_24, tmpvar_33.xxxx), tmpvar_25, tmpvar_33.yyyy));
  citydarkoverlay_1 = tmpvar_39;
  vec4 tmpvar_40;
  tmpvar_40 = (cityoverlay_5 * mix (mix (tmpvar_29, tmpvar_27, tmpvar_33.xxxx), tmpvar_28, tmpvar_33.yyyy));
  vec4 tmpvar_41;
  tmpvar_41 = (mix (mix (mix (tmpvar_34, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_2) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_37, p_37)))), 0.0, 1.0))))), tmpvar_20, vec4(tmpvar_38)), tmpvar_40, tmpvar_40.wwww) * _Color);
  color_7 = tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = clamp (dot (tmpvar_32, -(_SunDir)), 0.0, 1.0);
  float tmpvar_43;
  tmpvar_43 = mix (clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0), tmpvar_42, tmpvar_38);
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_46;
  shadowVals_46.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_46.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_47;
  tmpvar_47 = lessThan (shadowVals_46, vec4(((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_48;
  tmpvar_48 = _LightShadowData.xxxx;
  float tmpvar_49;
  if (tmpvar_47.x) {
    tmpvar_49 = tmpvar_48.x;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_47.y) {
    tmpvar_50 = tmpvar_48.y;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_47.z) {
    tmpvar_51 = tmpvar_48.z;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_47.w) {
    tmpvar_52 = tmpvar_48.w;
  } else {
    tmpvar_52 = 1.0;
  };
  vec4 tmpvar_53;
  tmpvar_53.x = tmpvar_49;
  tmpvar_53.y = tmpvar_50;
  tmpvar_53.z = tmpvar_51;
  tmpvar_53.w = tmpvar_52;
  float tmpvar_54;
  tmpvar_54 = ((tmpvar_44.w * tmpvar_45.w) * dot (tmpvar_53, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 tmpvar_55;
  tmpvar_55 = (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_43) * 2.0) * tmpvar_54), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD6);
  color_7.xyz = (tmpvar_41.xyz + (_Albedo * tmpvar_55));
  color_7.xyz = (color_7.xyz * tmpvar_55);
  citydarkoverlay_1.w = (tmpvar_39.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_42 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_7.xyz = mix (color_7, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_7.w = 1.0;
  gl_FragData[0] = color_7;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 14 [_SunDir]
Vector 15 [_PlanetOrigin]
"vs_3_0
; 49 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
dcl_texcoord9 o10
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.y, c14, c14
mov r1.zw, v4.xyxy
mov r1.xy, v3
dp4 r0.x, r1, r1
rsq r0.w, r0.x
mul r1.xyz, r0.w, r1
rsq r0.y, r0.y
mul r0.xyz, r0.y, c14
dp3 r1.w, -r1, r0
mov o6.xyz, -r1
mov r0.xyz, v2
mov r0.w, c16.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c16.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
mul_sat r0.x, -r1.w, c16.y
add r0.y, r0, c16.w
add r2.xyz, -r1, c12
mad o7.x, r0, r0.y, c17
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.xyz, r1
dp4 r0.w, v0, c7
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mov r0.xyz, c15
mov o1, v1
mul o9.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r1, -c13
add o8.xyz, -c12, r0
mov o10.xyz, r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec4 shadowVals_106;
  highp float tmpvar_107;
  tmpvar_107 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_106.x = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_106.y = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_114;
  vec_114 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_115;
  lowp vec4 tmpvar_116;
  tmpvar_116 = textureCube (_ShadowMapTexture, vec_114);
  packDist_115 = tmpvar_116;
  shadowVals_106.z = dot (packDist_115, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_117;
  vec_117 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_118;
  lowp vec4 tmpvar_119;
  tmpvar_119 = textureCube (_ShadowMapTexture, vec_117);
  packDist_118 = tmpvar_119;
  shadowVals_106.w = dot (packDist_118, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_120;
  tmpvar_120 = lessThan (shadowVals_106, vec4(tmpvar_107));
  highp vec4 tmpvar_121;
  tmpvar_121 = _LightShadowData.xxxx;
  highp float tmpvar_122;
  if (tmpvar_120.x) {
    tmpvar_122 = tmpvar_121.x;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_120.y) {
    tmpvar_123 = tmpvar_121.y;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_120.z) {
    tmpvar_124 = tmpvar_121.z;
  } else {
    tmpvar_124 = 1.0;
  };
  highp float tmpvar_125;
  if (tmpvar_120.w) {
    tmpvar_125 = tmpvar_121.w;
  } else {
    tmpvar_125 = 1.0;
  };
  highp vec4 tmpvar_126;
  tmpvar_126.x = tmpvar_122;
  tmpvar_126.y = tmpvar_123;
  tmpvar_126.z = tmpvar_124;
  tmpvar_126.w = tmpvar_125;
  shadows_105 = tmpvar_126;
  mediump float tmpvar_127;
  tmpvar_127 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_127;
  highp float tmpvar_128;
  tmpvar_128 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_128;
  mediump float tmpvar_129;
  tmpvar_129 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_130;
  tmpvar_130 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_129)), 0.0, 1.0);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_131;
  highp vec3 tmpvar_132;
  tmpvar_132 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_132;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform mediump vec3 _SunDir;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  mediump float NdotL_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_6;
  p_6 = (tmpvar_5 - _WorldSpaceCameraPos);
  tmpvar_3.w = sqrt(dot (p_6, p_6));
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec4 tmpvar_8;
  tmpvar_8.x = _glesMultiTexCoord0.x;
  tmpvar_8.y = _glesMultiTexCoord0.y;
  tmpvar_8.z = _glesMultiTexCoord1.x;
  tmpvar_8.w = _glesMultiTexCoord1.y;
  highp vec3 tmpvar_9;
  tmpvar_9 = -(normalize(tmpvar_8).xyz);
  tmpvar_3.xyz = tmpvar_1;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(_SunDir);
  highp float tmpvar_11;
  tmpvar_11 = dot (tmpvar_9, tmpvar_10);
  NdotL_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = mix (1.0, clamp (floor((1.01 + NdotL_2)), 0.0, 1.0), clamp ((10.0 * -(NdotL_2)), 0.0, 1.0));
  tmpvar_4 = tmpvar_12;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesColor;
  xlv_TEXCOORD1 = tmpvar_3;
  xlv_TEXCOORD2 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD3 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_7).xyz);
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_4;
  xlv_TEXCOORD7 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD8 = normalize((tmpvar_5 - _WorldSpaceCameraPos));
  xlv_TEXCOORD9 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD9;
varying highp vec3 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp vec3 _PlanetOrigin;
uniform lowp vec4 _OceanColor;
uniform highp float _OceanDepthFactor;
uniform highp float _OceanRadius;
uniform highp float _PlanetOpacity;
uniform mediump vec3 _SunDir;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float TNdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float handoff_8;
  highp float sphereDist_9;
  mediump float detailLevel_10;
  mediump vec4 detail_11;
  mediump vec3 norm_12;
  highp vec2 localCoords_13;
  mediump vec4 encnorm_14;
  mediump vec4 citylightoverlaydetailZ_15;
  mediump vec4 citylightoverlaydetailY_16;
  mediump vec4 citylightoverlaydetailX_17;
  mediump vec4 citydarkoverlaydetailZ_18;
  mediump vec4 citydarkoverlaydetailY_19;
  mediump vec4 citydarkoverlaydetailX_20;
  mediump vec4 cityoverlay_21;
  mediump float vertLerp_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD5.z) > (1e-08 * abs(xlv_TEXCOORD5.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD5.x / xlv_TEXCOORD5.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD5.z < 0.0)) {
      if ((xlv_TEXCOORD5.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD5.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.y))) * (1.5708 + (abs(xlv_TEXCOORD5.y) * (-0.214602 + (abs(xlv_TEXCOORD5.y) * (0.0865667 + (abs(xlv_TEXCOORD5.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD5.x) > (1e-08 * abs(xlv_TEXCOORD5.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD5.y / xlv_TEXCOORD5.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD5.x < 0.0)) {
      if ((xlv_TEXCOORD5.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD5.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD5.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD5.z))) * (1.5708 + (abs(xlv_TEXCOORD5.z) * (-0.214602 + (abs(xlv_TEXCOORD5.z) * (0.0865667 + (abs(xlv_TEXCOORD5.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD5.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD5.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD5.zy * _DetailScale);
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD5.zx * _DetailScale);
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD5.xy * _DetailScale);
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD5.zy * _DetailVertScale);
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD5.zx * _DetailVertScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD5.xy * _DetailVertScale);
  highp vec4 tmpvar_45;
  tmpvar_45.w = 0.0;
  tmpvar_45.xyz = -(xlv_TEXCOORD5);
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD1, tmpvar_45), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_22 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, tmpvar_42);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, tmpvar_39);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_22));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, tmpvar_43);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, tmpvar_40);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_22));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, tmpvar_44);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, tmpvar_41);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_22));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_21 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_20 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_19 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_18 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD5.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_17 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD5.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_16 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD5.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_15 = tmpvar_67;
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2DGradEXT (_BumpMap, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  encnorm_14 = tmpvar_69;
  mediump vec2 tmpvar_70;
  tmpvar_70 = encnorm_14.wy;
  localCoords_13 = tmpvar_70;
  highp vec2 tmpvar_71;
  tmpvar_71 = (localCoords_13 - vec2(0.5, 0.5));
  localCoords_13.y = tmpvar_71.y;
  localCoords_13.x = (tmpvar_71.x * 0.5);
  uv_24.x = (uv_24.x - 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72 = (uv_24 + localCoords_13);
  uv_24 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = cos((6.28319 * tmpvar_72.x));
  norm_12.z = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = sin((6.28319 * tmpvar_72.x));
  norm_12.x = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = cos((3.14159 * tmpvar_72.y));
  norm_12.y = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = -(norm_12);
  norm_12 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = abs(xlv_TEXCOORD5);
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (tmpvar_55, tmpvar_49, tmpvar_77.xxxx);
  detail_11 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (0.25 * (mix (detail_11, tmpvar_52, tmpvar_77.yyyy) - 0.5));
  detail_11 = tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1.w), 0.0, 1.0);
  detailLevel_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (detail_11, vec4(0.0, 0.0, 0.0, 0.0), vec4(detailLevel_10));
  highp vec4 tmpvar_82;
  tmpvar_82 = (xlv_TEXCOORD0 + tmpvar_81);
  color_25 = tmpvar_82;
  sphereDist_9 = xlv_TEXCOORD1.w;
  highp float tmpvar_83;
  tmpvar_83 = dot (xlv_TEXCOORD7, xlv_TEXCOORD8);
  highp float tmpvar_84;
  tmpvar_84 = sqrt((dot (xlv_TEXCOORD7, xlv_TEXCOORD7) - (tmpvar_83 * tmpvar_83)));
  if (((tmpvar_84 <= _OceanRadius) && (tmpvar_83 >= 0.0))) {
    sphereDist_9 = (tmpvar_83 - sqrt((pow (_OceanRadius, 2.0) - pow (tmpvar_84, 2.0))));
  };
  highp vec3 p_85;
  p_85 = (_PlanetOrigin - xlv_TEXCOORD9);
  highp vec4 tmpvar_86;
  tmpvar_86 = mix (color_25, _OceanColor, vec4((clamp (((xlv_TEXCOORD1.w - sphereDist_9) * _OceanDepthFactor), 0.0, 1.0) + ((_OceanDepthFactor * 15.0) * clamp (floor(((1.0 + _OceanRadius) - sqrt(dot (p_85, p_85)))), 0.0, 1.0)))));
  color_25 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = clamp (pow (_PlanetOpacity, 2.0), 0.0, 1.0);
  handoff_8 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = clamp (floor((xlv_TEXCOORD0.w + 0.99)), 0.0, 1.0);
  cityoverlay_21.w = (cityoverlay_21.w * tmpvar_88);
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (citydarkoverlaydetailZ_18, citydarkoverlaydetailX_20, tmpvar_77.xxxx);
  detail_11 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (detail_11, citydarkoverlaydetailY_19, tmpvar_77.yyyy);
  detail_11 = tmpvar_90;
  mediump vec4 tmpvar_91;
  tmpvar_91 = (cityoverlay_21 * detail_11);
  citydarkoverlay_7 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = mix (citylightoverlaydetailZ_15, citylightoverlaydetailX_17, tmpvar_77.xxxx);
  detail_11 = tmpvar_92;
  highp vec4 tmpvar_93;
  tmpvar_93 = mix (detail_11, citylightoverlaydetailY_16, tmpvar_77.yyyy);
  detail_11 = tmpvar_93;
  mediump vec4 tmpvar_94;
  tmpvar_94 = (cityoverlay_21 * detail_11);
  mediump vec4 tmpvar_95;
  tmpvar_95 = (mix (mix (color_25, main_23, vec4(handoff_8)), tmpvar_94, tmpvar_94.wwww) * _Color);
  color_25 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_97;
  highp float tmpvar_98;
  tmpvar_98 = clamp (dot (xlv_TEXCOORD4, lightDirection_5), 0.0, 1.0);
  TNdotL_4 = tmpvar_98;
  mediump float tmpvar_99;
  tmpvar_99 = clamp (dot (tmpvar_76, -(_SunDir)), 0.0, 1.0);
  mediump float tmpvar_100;
  tmpvar_100 = mix (TNdotL_4, tmpvar_99, handoff_8);
  highp float tmpvar_101;
  tmpvar_101 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture2D (_LightTextureB0, vec2(tmpvar_101));
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_104;
  mediump vec4 shadows_105;
  highp vec4 shadowVals_106;
  highp float tmpvar_107;
  tmpvar_107 = ((sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_108;
  vec_108 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_109;
  lowp vec4 tmpvar_110;
  tmpvar_110 = textureCube (_ShadowMapTexture, vec_108);
  packDist_109 = tmpvar_110;
  shadowVals_106.x = dot (packDist_109, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_111;
  vec_111 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_112;
  lowp vec4 tmpvar_113;
  tmpvar_113 = textureCube (_ShadowMapTexture, vec_111);
  packDist_112 = tmpvar_113;
  shadowVals_106.y = dot (packDist_112, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_114;
  vec_114 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_115;
  lowp vec4 tmpvar_116;
  tmpvar_116 = textureCube (_ShadowMapTexture, vec_114);
  packDist_115 = tmpvar_116;
  shadowVals_106.z = dot (packDist_115, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_117;
  vec_117 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_118;
  lowp vec4 tmpvar_119;
  tmpvar_119 = textureCube (_ShadowMapTexture, vec_117);
  packDist_118 = tmpvar_119;
  shadowVals_106.w = dot (packDist_118, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_120;
  tmpvar_120 = lessThan (shadowVals_106, vec4(tmpvar_107));
  highp vec4 tmpvar_121;
  tmpvar_121 = _LightShadowData.xxxx;
  highp float tmpvar_122;
  if (tmpvar_120.x) {
    tmpvar_122 = tmpvar_121.x;
  } else {
    tmpvar_122 = 1.0;
  };
  highp float tmpvar_123;
  if (tmpvar_120.y) {
    tmpvar_123 = tmpvar_121.y;
  } else {
    tmpvar_123 = 1.0;
  };
  highp float tmpvar_124;
  if (tmpvar_120.z) {
    tmpvar_124 = tmpvar_121.z;
  } else {
    tmpvar_124 = 1.0;
  };
  highp float tmpvar_125;
  if (tmpvar_120.w) {
    tmpvar_125 = tmpvar_121.w;
  } else {
    tmpvar_125 = 1.0;
  };
  highp vec4 tmpvar_126;
  tmpvar_126.x = tmpvar_122;
  tmpvar_126.y = tmpvar_123;
  tmpvar_126.z = tmpvar_124;
  tmpvar_126.w = tmpvar_125;
  shadows_105 = tmpvar_126;
  mediump float tmpvar_127;
  tmpvar_127 = dot (shadows_105, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_104 = tmpvar_127;
  highp float tmpvar_128;
  tmpvar_128 = ((tmpvar_102.w * tmpvar_103.w) * tmpvar_104);
  atten_3 = tmpvar_128;
  mediump float tmpvar_129;
  tmpvar_129 = clamp ((((_LightColor0.w * tmpvar_100) * 2.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_130;
  tmpvar_130 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_129)), 0.0, 1.0);
  light_2 = tmpvar_130;
  highp vec3 tmpvar_131;
  tmpvar_131 = (light_2 * xlv_TEXCOORD6);
  light_2 = tmpvar_131;
  highp vec3 tmpvar_132;
  tmpvar_132 = (tmpvar_95.xyz + (_Albedo * light_2));
  color_25.xyz = tmpvar_132;
  color_25.xyz = (color_25.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_91.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_99 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 435
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 482
#line 461
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 465
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.objnormal.w = distance( vertexPos, _WorldSpaceCameraPos);
    o.camViewDir = normalize((vertexPos - _WorldSpaceCameraPos));
    o.worldPos = vertexPos;
    #line 469
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereCoords = (-normalize(vec4( v.texcoord.x, v.texcoord.y, v.texcoord2.x, v.texcoord2.y)).xyz);
    o.color = v.color;
    o.objnormal.xyz = v.normal;
    #line 473
    mediump float NdotL = dot( o.sphereCoords, normalize(_SunDir));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos);
    #line 477
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec3 xlv_TEXCOORD8;
out highp vec3 xlv_TEXCOORD9;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord2 = vec4(gl_MultiTexCoord1);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec4(xl_retval.objnormal);
    xlv_TEXCOORD2 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.sphereCoords);
    xlv_TEXCOORD6 = float(xl_retval.terminator);
    xlv_TEXCOORD7 = vec3(xl_retval.L);
    xlv_TEXCOORD8 = vec3(xl_retval.camViewDir);
    xlv_TEXCOORD9 = vec3(xl_retval.worldPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 446
struct v2f {
    highp vec4 pos;
    highp vec4 color;
    highp vec4 objnormal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereCoords;
    highp float terminator;
    highp vec3 L;
    highp vec3 camViewDir;
    highp vec3 worldPos;
};
#line 436
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord2;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform highp float _MainTexHandoverDist;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 423
uniform highp float _Albedo;
uniform mediump vec3 _SunDir;
uniform highp float _PlanetOpacity;
uniform highp float _OceanRadius;
#line 427
uniform highp float _OceanDepthFactor;
uniform lowp vec4 _OceanColor;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Rotation;
#line 431
uniform highp mat4 _InvRotation;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
#line 435
uniform sampler2D _CityLightOverlayDetailTex;
#line 461
#line 482
#line 482
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 486
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 490
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 493
lowp vec4 frag( in v2f IN ) {
    #line 495
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereCoords;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 499
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    highp vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 503
    highp vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    highp vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    highp vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    highp vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 507
    highp vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objnormal, vec4( (-IN.sphereCoords), 0.0))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 511
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 515
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 519
    mediump vec4 encnorm = xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw);
    highp vec2 localCoords = encnorm.wy;
    localCoords -= vec2( 0.5);
    localCoords.x *= 0.5;
    #line 523
    uv.x -= 0.5;
    uv += localCoords;
    mediump vec3 norm;
    norm.z = cos((6.28319 * uv.x));
    #line 527
    norm.x = sin((6.28319 * uv.x));
    norm.y = cos((3.14159 * uv.y));
    norm = (-norm);
    sphereNrm = abs(sphereNrm);
    #line 531
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = (0.25 * (mix( detail, detailY, vec4( sphereNrm.y)) - 0.5));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.objnormal.w));
    color = (IN.color + mix( detail.xyzw, vec4( 0.0), vec4( detailLevel)));
    #line 535
    highp float sphereDist = IN.objnormal.w;
    highp float tc = dot( IN.L, IN.camViewDir);
    highp float d = sqrt((dot( IN.L, IN.L) - dot( tc, tc)));
    if (((d <= _OceanRadius) && (tc >= 0.0))){
        #line 540
        highp float tlc = sqrt((pow( _OceanRadius, 2.0) - pow( d, 2.0)));
        sphereDist = (tc - tlc);
    }
    highp float oceandepth = (IN.objnormal.w - sphereDist);
    #line 544
    highp float depthFactor = xll_saturate_f((oceandepth * _OceanDepthFactor));
    highp float vertexDepth = ((_OceanDepthFactor * 15.0) * xll_saturate_f(floor(((1.0 + _OceanRadius) - distance( _PlanetOrigin, IN.worldPos)))));
    color = mix( color, _OceanColor, vec4( (depthFactor + vertexDepth)));
    mediump float handoff = xll_saturate_f(pow( _PlanetOpacity, 2.0));
    #line 548
    color = mix( color, main, vec4( handoff));
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 552
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 556
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 560
    mediump float TNdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float SNdotL = xll_saturate_f(dot( norm, (-_SunDir)));
    mediump float NdotL = mix( TNdotL, SNdotL, handoff);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 564
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= IN.terminator;
    color.xyz += (_Albedo * light);
    #line 568
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (SNdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 572
    color.w = 1.0;
    return color;
}
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec3 xlv_TEXCOORD8;
in highp vec3 xlv_TEXCOORD9;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_TEXCOORD0);
    xlt_IN.objnormal = vec4(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.sphereCoords = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD6);
    xlt_IN.L = vec3(xlv_TEXCOORD7);
    xlt_IN.camViewDir = vec3(xlv_TEXCOORD8);
    xlt_IN.worldPos = vec3(xlv_TEXCOORD9);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 169 to 216, TEX: 12 to 27
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v3, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.z, r0.x, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.z, r0
dp3 r0.x, v2, v2
texld r0.x, r0.x, s4
mul_pp r0.y, r0, c2.w
mul_pp r4.z, r0.y, r0.x
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 169 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
dcl_texcoord9 v7.xyz
mov r3.xyz, v3
dp3_sat r3.x, v1, -r3
mul r2.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r1.zw, v3.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c17.y, c17.z
mad r2.w, r2, r1.y, c17
mad r3.w, r2, r1.y, c18.x
mad r3.w, r3, r1.y, c18.y
add r3.x, r3, c19.w
mad r1.y, r3.w, r1, c18.z
mul r1.y, r1, r1.x
mul r0.xy, v3.zyzw, c5.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c20.x, c20.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v3, c5.x
mul r0.xy, v3, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c18.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c16.w
cmp r3.x, v3.z, r3, r3.y
add r3.y, -r0.w, c15
mul r2.xy, v3.zxzw, c5.x
mul r1.xy, v3.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v3
cmp r2.x, v3, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c19
add r2.w, -r2.y, c15.y
mad r2.z, r2.y, c15, c15.w
mad r2.z, r2, r2.y, c16.x
mad r3.x, r0.w, c15.z, c15.w
mad r3.x, r0.w, r3, c16
mad r0.w, r0, r3.x, c16.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c20.z
mul r3.y, r0.w, r3
cmp r3.x, v3.z, c15, c15.y
add r5.x, r2, c19.y
mad r2.y, r2.z, r2, c16
rcp r2.w, r2.w
mul r2.z, r2.y, r2.w
cmp r2.y, v3, c15.x, c15
mul r2.w, r2.y, r2.z
mad r0.w, -r2, c16.z, r2.z
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c16, r0
mad r2.z, -r3, c16, r3.y
mad r2.y, r3.x, c16.w, r2.z
mul r2.y, r2, c17.x
mul r0.w, r0, c17.x
dsx r2.zw, v3.xyxy
dsy r3.xy, v3
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c19.x
mul r4.x, r2.z, c19
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c20.z
mov r2.y, r0.w
mul r1.xy, r1, c21
add r2.xy, r2, r1
mad r1.x, r2.y, c21.z, c21
frc r1.x, r1
mul r0.w, v1, c6.x
mad r1.w, r1.x, c22.x, c22.y
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v0, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c21.w, c21.x
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v2, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
mul_pp r3.x, r0, c2.w
mov r0.xyz, v6
dp3 r2.w, v5, r0
dp3 r1.w, v5, v5
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
add_pp r2.xyz, -r1, c13
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r3.x, r3, c16.z
mad_sat r3.xyz, r0, r3.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v7, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
mul_pp r1.xyz, r3, v4.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 176 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v3, r5
rcp r0.z, v2.w
mad r5.xy, v2, r0.z, c19.y
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.w, v6, v6
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 172 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v3, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v2, v2
texld r0.w, v2, s5
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.w, v6, v6
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 170 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r6.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r6.y, r0.w
texldd r1.yw, r6, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.xy, r1, r1.zwzw
mul r0.w, v1, c6.x
mad r1.x, r4.y, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r5.xz, r0.yyxw
mul_pp r4.xyz, r0.z, c1
dp3_sat r0.y, v3, r4
dp3_pp_sat r0.x, -r5, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
texld r1.w, v2, s4
mul_pp r0.x, r0, c2.w
mul_pp r4.x, r0, r1.w
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.x, r4, c16.z
mad_sat r4.xyz, r0, r4.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.w, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r6, s0, r3.zwzw, r3
mul_pp r1.xyz, r4, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 181 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c20.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c21.x, c21.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c5.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c16, c16.y
add r4.x, r1, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c20.x
mul r3.x, r1.z, c20
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c21.z
mov r1.y, r0.w
mul r1.zw, r1, c22.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c7.x
mad r1.x, r4.w, c22.z, c22
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c23.x, c23.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c22.w, c22.x
frc r0.y, r0
add_pp r2.xyz, -r1, c14
mad r1.w, r0.y, c23.x, c23.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
texldp r0.x, v3, s6
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
cmp r2.w, r0.z, c16.y, r0
rcp r0.x, v2.w
mad r5.xy, v2, r0.x, c20.y
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r2.w
mul_pp r0.x, r0.y, c3.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c8.x
add r0.xyz, c3, r0.y
mul_pp_sat r4.z, r4, c17
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c12
cmp r0.y, r2.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c12.x, c12.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c20.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c9.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c4, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 180 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c20.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c21.x, c21.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c5.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c16, c16.y
add r4.x, r1, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c20.x
mul r3.x, r1.z, c20
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c21.z
mov r1.y, r0.w
mul r1.zw, r1, c22.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c7.x
mad r1.x, r4.w, c22.z, c22
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c23.x, c23.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c22.w, c22.x
frc r0.y, r0
add_pp r2.xyz, -r1, c14
mad r1.w, r0.y, c23.x, c23.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v4, r5
rcp r0.z, v2.w
mad r5.xy, v2, r0.z, c20.y
dp3_pp_sat r0.x, -r6, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
mov r0.x, c2
add r0.w, c16.y, -r0.x
texldp r0.x, v3, s6
mad r2.w, r0.x, r0, c2.x
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r2.w
mul_pp r0.x, r0.y, c3.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c8.x
add r0.xyz, c3, r0.y
mul_pp_sat r4.z, r4, c17
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c12
cmp r0.y, r2.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c12.x, c12.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c20.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c9.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c4, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 170 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r6.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r6.y, r0.w
texldd r1.yw, r6, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.xy, r1, r1.zwzw
mul r0.w, v1, c6.x
mad r1.x, r4.y, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r5.xz, r0.yyxw
mul_pp r4.xyz, r0.z, c1
dp3_sat r0.y, v3, r4
dp3_pp_sat r0.x, -r5, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.x, r0
texldp r0.x, v2, s4
mul_pp r0.y, r0, c2.w
mul_pp r4.x, r0.y, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.x, r4, c16.z
mad_sat r4.xyz, r0, r4.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.w, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r6, s0, r3.zwzw, r3
mul_pp r1.xyz, r4, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c4.x
mul r0.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul_pp r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
texldp r0.x, v3, s4
texld r0.w, v2, s5
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 180 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r4.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c21.x
mul r3.x, r1.z, c21
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c8.x
mad r1.x, r4.w, c23.z, c23
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c24.x, c24.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c23.w, c23.x
frc r0.y, r0
add_pp r2.xyz, -r1, c15
mad r1.w, r0.y, c24.x, c24.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3 r0.z, v3, v3
rsq r4.z, r0.z
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.y, r0, c25
rcp r4.z, r4.z
mul r0.x, r4.z, c2.w
mad r0.y, -r0.x, c24.z, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c17, r0.z
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r2.w, c4.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r4.z, r4, c18
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c13
cmp r0.y, r2.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 181 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r4.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c21.x
mul r3.x, r1.z, c21
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c8.x
mad r1.x, r4.w, c23.z, c23
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c24.x, c24.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c23.w, c23.x
frc r0.y, r0
dp3 r4.z, v3, v3
add_pp r2.xyz, -r1, c15
mad r1.w, r0.y, c24.x, c24.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.y, r0, c25
rsq r4.z, r4.z
rcp r0.x, r4.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.z, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c17, r0.z
dp3 r0.x, v2, v2
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r2.w, c4.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r4.z, r4, c18
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c13
cmp r0.y, r2.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c9.x
mul r0.xy, v5.zyzw, c10.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c22.y, c22.z
mad r3.w, r1, r3.z, c22
mad r3.w, r3, r3.z, c23.x
mad r3.w, r3, r3.z, c23.y
mad r3.z, r3.w, r3, c23
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c24.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c25.x, c25.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c10.x
mul r0.xy, v5, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c23.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c21.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c20.y
mad r1.z, r1.y, c20, c20.w
mad r1.z, r1, r1.y, c21.x
add r2.y, -r0.w, c20
mad r2.x, r0.w, c20.z, c20.w
mad r2.x, r0.w, r2, c21
mad r0.w, r0, r2.x, c21.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c24
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c25.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c20, c20.y
add r4.x, r1, c24.y
mad r1.y, r1.z, r1, c21
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c20.x, c20
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c21.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c21, r0
mad r1.z, -r2, c21, r2.y
mad r1.y, r2.x, c21.w, r1.z
mul r1.y, r1, c22.x
mul r0.w, r0, c22.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c24.x
mul r3.x, r1.z, c24
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c25.z
mov r1.y, r0.w
mul r1.zw, r1, c26.xyxy
add r4.zw, r1.xyxy, r1
mad r2.w, r4.z, c26, c26.x
mul r0.w, v1, c11.x
rcp r4.z, v3.w
mul_sat r0.w, r0, c21.z
mul_pp r0.xyz, r0, c25.w
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v0, r0
mad r0.w, r4, c26.z, c26.x
frc r0.x, r0.w
mad r1.w, r0.x, c27.x, c27.y
sincos r0.xy, r1.w
frc r0.y, r2.w
add_pp r2.xyz, -r1, c18
mad r1.w, r0.y, c27.x, c27.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
dp3_pp_sat r0.w, -r5, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v4, r0
mad r0.xy, v3, r4.z, c6
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c15.x, c15.x
mad_pp r2.w, r1, r0, r0.z
texld r0.x, r0, s6
mad r5.xy, v3, r4.z, c5
mov r0.w, r0.x
texld r0.x, r5, s6
mad r5.xy, v3, r4.z, c4
mov r0.z, r0.x
texld r0.x, r5, s6
mad r5.xy, v3, r4.z, c3
mov r0.y, r0.x
texld r0.x, r5, s6
mad r0, -v3.z, r4.z, r0
rcp r4.z, v2.w
mov r4.w, c2.x
cmp r0, r0, c20.y, r4.w
dp4_pp r0.z, r0, c25.w
mad r5.xy, v2, r4.z, c24.y
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.y, -v2.z, c20.x, c20
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.y, r0
mul_pp r0.y, r0.x, r0.z
mul_pp r0.x, r2.w, c7.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c12.x
add r0.xyz, c7, r0.y
mul_pp_sat r4.z, r4, c21
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c16
cmp r0.y, r2.w, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c19
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c16.x, c16.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c16
add r0.x, r0, c20.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c17.x
mul r0.x, r0, c17
mad r0.x, r0, c24.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c13.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c8, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r2.xyz, v5
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
max r1.w, r3.x, r0
dp3_sat r2.y, v1, -r2
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r3.z, r1.w, r1.w
add r2.x, r2.y, c24.w
mad_sat r2.w, r2.x, c25.x, c25.y
mad r2.xyz, r2.w, r1, r0
mad r3.w, r3.z, c22.y, c22.z
mad r3.w, r3, r3.z, c22
mad r3.w, r3, r3.z, c23.x
mad r3.w, r3, r3.z, c23.y
mad r3.z, r3.w, r3, c23
mul r1.xy, v5, c10.x
mul r0.xy, v5, c9.x
rcp r3.w, v3.w
mul r1.w, r3.z, r1
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c10.x
mul r0.xy, v5.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r4.xyz, r0, -r2
mad_pp r2.xyz, r3.y, r4, r2
add_pp r2.xyz, r2, c25.z
add r1.y, -r1.w, c23.w
add r1.x, r3, -r0.w
cmp r1.x, -r1, r1.w, r1.y
add r0.x, -r1, c21.w
cmp r0.x, v5.z, r1, r0
cmp r1.x, v5, r0, -r0
mul_pp r0.xyz, r2, c25.w
mul r2.z, r1.x, c24.x
abs r1.x, v5.y
add r1.z, -r1.x, c20.y
mad r1.y, r1.x, c20.z, c20.w
mad r1.y, r1, r1.x, c21.x
add r2.x, -r0.w, c20.y
mad r1.w, r0, c20.z, c20
mad r1.w, r0, r1, c21.x
mad r0.w, r0, r1, c21.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c20.x, c20.y
add r5.x, r2.z, c24.y
mad r1.x, r1.y, r1, c21.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c20, c20.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c21.z, r1.y
mul r2.y, r1.w, r2.x
mad r0.w, r1.x, c21, r0
mul r0.w, r0, c22.x
mad r1.y, -r2, c21.z, r2.x
mad r1.x, r1.w, c21.w, r1.y
mul r1.x, r1, c22
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mov r5.y, r0.w
dsx r4.w, r1.x
dsy r4.y, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.z, r1.x, c24.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c24
texldd r1.yw, r5, s3, r4.zwzw, r4
mul r1.x, v1.w, c11
add r2.xy, r1.wyzw, c25.z
mul_sat r1.x, r1, c21.z
mad_pp r1.xyz, r1.x, -r0, r0
mov r2.w, r0
mul r0.xy, r2, c26
add r0.xy, r2.zwzw, r0
add r2.xyz, v0, r1
mad r0.y, r0, c26.z, c26.x
add_pp r3.xyz, -r2, c18
mad r0.z, r0.x, c26.w, c26.x
frc r0.y, r0
mad r0.x, r0.y, c27, c27.y
sincos r1.xy, r0.x
frc r0.y, r0.z
mad r1.y, r0, c27.x, c27
sincos r0.xy, r1.y
mov_pp r1.y, r1.x
mov_pp r1.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
dp3_pp_sat r0.w, -r1, -c14
mul r0.xyz, r0.x, c1
dp3_sat r1.x, v4, r0
mad r0.xyz, v3, r3.w, c6
add_pp r0.w, r0, -r1.x
mul_sat r1.w, c15.x, c15.x
mad_pp r2.w, r1, r0, r1.x
mad r1.xyz, v3, r3.w, c4
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v3, r3.w, c5
texld r0.x, r0, s6
texld r1.x, r1, s6
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mad r1.xyz, v3, r3.w, c3
mov r0.x, c2
add r3.w, c20.y, -r0.x
texld r0.x, r1, s6
mad r0, r0, r3.w, c2.x
dp4_pp r0.z, r0, c25.w
rcp r1.x, v2.w
mad r1.xy, v2, r1.x, c24.y
dp3 r0.x, v2, v2
texld r0.w, r1, s4
cmp r0.y, -v2.z, c20.x, c20
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.y, r0
mul_pp r0.y, r0.x, r0.z
mul_pp r0.x, r2.w, c7.w
mul_pp r1.x, r0, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c12.x
add r0.xyz, c7, r0.y
mul_pp_sat r1.x, r1, c21.z
mad_sat r1.xyz, r0, r1.x, c0
add r0.x, -r0.w, c16
cmp r0.y, r2.w, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c19
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c16.x, c16.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c16
add r0.x, r0, c20.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c17.x
mul r0.x, r0, c17
mad r0.x, r0, c24.z, r0.y
mad_pp r0.xyz, r0.x, r3, r2
mul_pp r1.xyz, r1, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c13.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c8, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 188 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r6.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
mov r6.y, r0.w
dsx r5.w, r1.y
dsy r5.y, r1
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r5.z, r1.y, c21.x
mul r5.x, r1.z, c21
texldd r1.yw, r6, s3, r5.zwzw, r5
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r1.xy, r1, r1.zwzw
mul r0.w, v1, c8.x
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v0, r0
mad r0.w, r1.y, c23.z, c23.x
frc r0.x, r0.w
mad r1.y, r0.x, c24.x, c24
sincos r0.xy, r1.y
mad r1.x, r1, c23.w, c23
frc r0.y, r1.x
add_pp r3.xyz, -r2, c15
mad r1.x, r0.y, c24, c24.y
mov_pp r1.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r1.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r0.w, -r1, -c11
mul r0.xyz, r0.z, c1
dp3_sat r1.x, v4, r0
add_pp r1.y, r0.w, -r1.x
mul_sat r2.w, c12.x, c12.x
mad_pp r3.w, r2, r1.y, r1.x
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r4.w, r0, c25
add r0.xyz, v3, c24.wzww
texld r0, r0, s4
dp4 r4.z, r0, c25
add r1.xyz, v3, c24.wwzw
texld r1, r1, s4
dp4 r4.y, r1, c25
add r0.xyz, v3, c24.z
texld r0, r0, s4
dp3 r1.x, v3, v3
rsq r1.x, r1.x
dp4 r4.x, r0, c25
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c26.x, r4
mov r1.x, c3
cmp r1, r0, c17.y, r1.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r1, c22.w
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r3.w, c4.w
mul_pp r1.x, r0, r0.y
mov r0.xyz, v8
dp3 r1.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r1.x, r1, c18.z
mad_sat r1.xyz, r0, r1.x, c0
add r0.x, -r0.w, c13
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r3, r2
mul_pp r1.xyz, r1, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r2.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r2.xyz, v5
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
max r1.w, r3.x, r0
dp3_sat r2.y, v1, -r2
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r3.z, r1.w, r1.w
add r2.x, r2.y, c21.w
mad_sat r2.w, r2.x, c22.x, c22.y
mad r2.xyz, r2.w, r1, r0
mad r3.w, r3.z, c19.y, c19.z
mad r3.w, r3, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
mul r1.w, r3.z, r1
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r4.xyz, r0, -r2
mad_pp r2.xyz, r3.y, r4, r2
add_pp r2.xyz, r2, c22.z
add r1.y, -r1.w, c20.w
add r1.x, r3, -r0.w
cmp r1.x, -r1, r1.w, r1.y
add r0.x, -r1, c18.w
cmp r0.x, v5.z, r1, r0
cmp r1.x, v5, r0, -r0
mul_pp r0.xyz, r2, c22.w
mul r2.z, r1.x, c21.x
abs r1.x, v5.y
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
add r6.x, r2.z, c21.y
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mul r2.y, r1.w, r2.x
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mov r6.y, r0.w
dsx r5.w, r1.x
dsy r5.y, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r5.z, r1.x, c21.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.x, r1.y, c21
texldd r1.yw, r6, s3, r5.zwzw, r5
mul r1.x, v1.w, c8
add r2.xy, r1.wyzw, c22.z
mul_sat r1.x, r1, c18.z
mad_pp r1.xyz, r1.x, -r0, r0
add r1.xyz, v0, r1
mov r2.w, r0
mul r0.xy, r2, c23
add r0.xy, r2.zwzw, r0
mad r0.y, r0, c23.z, c23.x
add_pp r3.xyz, -r1, c15
mad r0.z, r0.x, c23.w, c23.x
frc r0.y, r0
mad r0.x, r0.y, c24, c24.y
sincos r2.xy, r0.x
frc r0.y, r0.z
mad r1.w, r0.y, c24.x, c24.y
sincos r0.xy, r1.w
mov_pp r2.y, r2.x
mov_pp r2.xz, r0.yyxw
dp4 r0.z, c1, c1
dp3_pp_sat r2.w, -r2, -c11
rsq r0.x, r0.z
mul r2.xyz, r0.x, c1
dp3_sat r1.w, v4, r2
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r4.w, r0, c25
add r0.xyz, v3, c24.wzww
texld r0, r0, s4
dp4 r4.z, r0, c25
add r0.xyz, v3, c24.z
texld r0, r0, s4
add_pp r3.w, r2, -r1
add r2.xyz, v3, c24.wwzw
texld r2, r2, s4
dp4 r4.y, r2, c25
mul_sat r2.w, c12.x, c12.x
dp3 r2.x, v3, v3
mad_pp r1.w, r2, r3, r1
rsq r2.x, r2.x
dp4 r4.x, r0, c25
rcp r0.x, r2.x
mul r0.x, r0, c2.w
mov r2.x, c3
mad r0, -r0.x, c26.x, r4
cmp r0, r0, c17.y, r2.x
dp4_pp r0.y, r0, c22.w
dp3 r0.x, v2, v2
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r1.w, c4.w
mul_pp r2.x, r0, r0.y
mov r0.xyz, v8
dp3 r1.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r2.x, r2, c18.z
mad_sat r2.xyz, r0, r2.x, c0
add r0.x, -r0.w, c13
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r3, r1
mul_pp r1.xyz, r2, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r2.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v3, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.z, r0.x, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.z, r0
dp3 r0.x, v2, v2
texld r0.x, r0.x, s4
mul_pp r0.y, r0, c2.w
mul_pp r4.z, r0.y, r0.x
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 169 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
dcl_texcoord9 v7.xyz
mov r3.xyz, v3
dp3_sat r3.x, v1, -r3
mul r2.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r1.zw, v3.xyxy
max r0.x, r1.z, r0.w
rcp r0.y, r0.x
min r0.x, r1.z, r0.w
mul r1.x, r0, r0.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, c17.y, c17.z
mad r2.w, r2, r1.y, c17
mad r3.w, r2, r1.y, c18.x
mad r3.w, r3, r1.y, c18.y
add r3.x, r3, c19.w
mad r1.y, r3.w, r1, c18.z
mul r1.y, r1, r1.x
mul r0.xy, v3.zyzw, c5.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad_sat r2.w, r3.x, c20.x, c20.y
mad r3.xyz, r2.w, r2, r0
mul r2.xy, v3, c5.x
mul r0.xy, v3, c4.x
add r1.x, r1.z, -r0.w
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r2.w, r0, r2
add_pp r2.xyz, r3, -r0
mad_pp r0.xyz, r1.z, r2, r0
add r3.x, -r1.y, c18.w
cmp r3.x, -r1, r1.y, r3
add r3.y, -r3.x, c16.w
cmp r3.x, v3.z, r3, r3.y
add r3.y, -r0.w, c15
mul r2.xy, v3.zxzw, c5.x
mul r1.xy, v3.zxzw, c4.x
rsq r3.y, r3.y
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r2.w, r1, r2
abs r2.y, v3
cmp r2.x, v3, r3, -r3
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r1.w, r1, r0
mul r2.x, r2, c19
add r2.w, -r2.y, c15.y
mad r2.z, r2.y, c15, c15.w
mad r2.z, r2, r2.y, c16.x
mad r3.x, r0.w, c15.z, c15.w
mad r3.x, r0.w, r3, c16
mad r0.w, r0, r3.x, c16.y
rsq r2.w, r2.w
rcp r3.y, r3.y
add_pp r0.xyz, r0, c20.z
mul r3.y, r0.w, r3
cmp r3.x, v3.z, c15, c15.y
add r5.x, r2, c19.y
mad r2.y, r2.z, r2, c16
rcp r2.w, r2.w
mul r2.z, r2.y, r2.w
cmp r2.y, v3, c15.x, c15
mul r2.w, r2.y, r2.z
mad r0.w, -r2, c16.z, r2.z
mul r3.z, r3.x, r3.y
mad r0.w, r2.y, c16, r0
mad r2.z, -r3, c16, r3.y
mad r2.y, r3.x, c16.w, r2.z
mul r2.y, r2, c17.x
mul r0.w, r0, c17.x
dsx r2.zw, v3.xyxy
dsy r3.xy, v3
mul r2.zw, r2, r2
mul r3.xy, r3, r3
mov r5.y, r0.w
dsx r4.w, r2.y
dsy r4.y, r2
add r2.y, r2.z, r2.w
add r2.z, r3.x, r3.y
rsq r2.y, r2.y
rcp r2.y, r2.y
rsq r2.z, r2.z
rcp r2.z, r2.z
mul r4.z, r2.y, c19.x
mul r4.x, r2.z, c19
texldd r2.yw, r5, s3, r4.zwzw, r4
add r1.xy, r2.wyzw, c20.z
mov r2.y, r0.w
mul r1.xy, r1, c21
add r2.xy, r2, r1
mad r1.x, r2.y, c21.z, c21
frc r1.x, r1
mul r0.w, v1, c6.x
mad r1.w, r1.x, c22.x, c22.y
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v0, r0
sincos r0.xy, r1.w
mad r0.y, r2.x, c21.w, c21.x
frc r0.y, r0
mov_pp r3.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4_pp r2.x, c1, c1
rsq_pp r0.z, r2.x
mov_pp r3.xz, r0.yyxw
mul_pp r2.xyz, r0.z, c1
dp3_sat r0.y, v2, r2
dp3_pp_sat r0.x, -r3, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
mul_pp r3.x, r0, c2.w
mov r0.xyz, v6
dp3 r2.w, v5, r0
dp3 r1.w, v5, v5
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
add_pp r2.xyz, -r1, c13
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r3.x, r3, c16.z
mad_sat r3.xyz, r0, r3.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v7, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
mul_pp r1.xyz, r3, v4.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 176 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v3, r5
rcp r0.z, v2.w
mad r5.xy, v2, r0.z, c19.y
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.w, v6, v6
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 172 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v3, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
dp3 r0.x, v2, v2
texld r0.w, v2, s5
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r0.w, v6, v6
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 170 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r6.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r6.y, r0.w
texldd r1.yw, r6, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.xy, r1, r1.zwzw
mul r0.w, v1, c6.x
mad r1.x, r4.y, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r5.xz, r0.yyxw
mul_pp r4.xyz, r0.z, c1
dp3_sat r0.y, v3, r4
dp3_pp_sat r0.x, -r5, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.x, r0.w, r0, r0.y
texld r1.w, v2, s4
mul_pp r0.x, r0, c2.w
mul_pp r4.x, r0, r1.w
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.x, r4, c16.z
mad_sat r4.xyz, r0, r4.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.w, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r6, s0, r3.zwzw, r3
mul_pp r1.xyz, r4, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 181 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c20.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c21.x, c21.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c5.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c16, c16.y
add r4.x, r1, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c20.x
mul r3.x, r1.z, c20
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c21.z
mov r1.y, r0.w
mul r1.zw, r1, c22.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c7.x
mad r1.x, r4.w, c22.z, c22
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c23.x, c23.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c22.w, c22.x
frc r0.y, r0
add_pp r2.xyz, -r1, c14
mad r1.w, r0.y, c23.x, c23.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
texldp r0.x, v3, s6
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
cmp r2.w, r0.z, c16.y, r0
rcp r0.x, v2.w
mad r5.xy, v2, r0.x, c20.y
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r2.w
mul_pp r0.x, r0.y, c3.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c8.x
add r0.xyz, c3, r0.y
mul_pp_sat r4.z, r4, c17
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c12
cmp r0.y, r2.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c12.x, c12.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c20.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c9.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c4, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 180 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c21, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c18.y, c18.z
mad r3.w, r1, r3.z, c18
mad r3.w, r3, r3.z, c19.x
mad r3.w, r3, r3.z, c19.y
mad r3.z, r3.w, r3, c19
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c20.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c21.x, c21.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c5.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c17.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c16.y
mad r1.z, r1.y, c16, c16.w
mad r1.z, r1, r1.y, c17.x
add r2.y, -r0.w, c16
mad r2.x, r0.w, c16.z, c16.w
mad r2.x, r0.w, r2, c17
mad r0.w, r0, r2.x, c17.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c20
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c21.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c16, c16.y
add r4.x, r1, c20.y
mad r1.y, r1.z, r1, c17
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c16.x, c16
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c17.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c17, r0
mad r1.z, -r2, c17, r2.y
mad r1.y, r2.x, c17.w, r1.z
mul r1.y, r1, c18.x
mul r0.w, r0, c18.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c20.x
mul r3.x, r1.z, c20
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c21.z
mov r1.y, r0.w
mul r1.zw, r1, c22.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c7.x
mad r1.x, r4.w, c22.z, c22
mul_sat r0.w, r0, c17.z
mul_pp r0.xyz, r0, c21.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c23.x, c23.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c22.w, c22.x
frc r0.y, r0
add_pp r2.xyz, -r1, c14
mad r1.w, r0.y, c23.x, c23.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3_sat r0.y, v4, r5
rcp r0.z, v2.w
mad r5.xy, v2, r0.z, c20.y
dp3_pp_sat r0.x, -r6, -c10
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c11.x, c11.x
mad_pp r0.y, r1.w, r0.x, r0
mov r0.x, c2
add r0.w, c16.y, -r0.x
texldp r0.x, v3, s6
mad r2.w, r0.x, r0, c2.x
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r2.w
mul_pp r0.x, r0.y, c3.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c8.x
add r0.xyz, c3, r0.y
mul_pp_sat r4.z, r4, c17
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c12
cmp r0.y, r2.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c12.x, c12.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c20.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c9.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c4, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 170 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mul r1.xy, v4.zyzw, c4.x
mul r0.xy, v4.zyzw, c5.x
abs r0.w, v4.z
abs r3.xy, v4
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v4
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v4.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v4
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v4.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v4, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v4.z, c15, c15.y
add r6.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v4, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v4.xyxy
dsy r2.xy, v4
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r6.y, r0.w
texldd r1.yw, r6, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.xy, r1, r1.zwzw
mul r0.w, v1, c6.x
mad r1.x, r4.y, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r5.xz, r0.yyxw
mul_pp r4.xyz, r0.z, c1
dp3_sat r0.y, v3, r4
dp3_pp_sat r0.x, -r5, -c9
add_pp r0.x, r0, -r0.y
mul_sat r0.w, c10.x, c10.x
mad_pp r0.y, r0.w, r0.x, r0
texldp r0.x, v2, s4
mul_pp r0.y, r0, c2.w
mul_pp r4.x, r0.y, r0
mov r0.xyz, v7
dp3 r2.w, v6, r0
dp3 r1.w, v6, v6
mad r0.x, -r2.w, r2.w, r1.w
rsq r0.x, r0.x
rcp r1.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.x, r4, c16.z
mad_sat r4.xyz, r0, r4.x, c0
add r0.x, -r1.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.w, r0.x, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r1.w, r1, r1
mad r0.y, c11.x, c11.x, -r1.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4.w, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r6, s0, r3.zwzw, r3
mul_pp r1.xyz, r4, v5.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r0.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 171 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c20, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c4.x
mul r0.xy, v5.zyzw, c5.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c17.y, c17.z
mad r3.w, r1, r3.z, c17
mad r3.w, r3, r3.z, c18.x
mad r3.w, r3, r3.z, c18.y
mad r3.z, r3.w, r3, c18
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c19.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c20.x, c20.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c18.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c16.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c15.y
mad r1.z, r1.y, c15, c15.w
mad r1.z, r1, r1.y, c16.x
add r2.y, -r0.w, c15
mad r2.x, r0.w, c15.z, c15.w
mad r2.x, r0.w, r2, c16
mad r0.w, r0, r2.x, c16.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c19
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c20.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c15, c15.y
add r4.x, r1, c19.y
mad r1.y, r1.z, r1, c16
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c15.x, c15
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c16.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c16, r0
mad r1.z, -r2, c16, r2.y
mad r1.y, r2.x, c16.w, r1.z
mul r1.y, r1, c17.x
mul r0.w, r0, c17.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c19.x
mul r3.x, r1.z, c19
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c20.z
mov r1.y, r0.w
mul r1.zw, r1, c21.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c6.x
mad r1.x, r4.w, c21.z, c21
mul_sat r0.w, r0, c16.z
mul_pp r0.xyz, r0, c20.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c22.x, c22.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c21.w, c21.x
frc r0.y, r0
add_pp r2.xyz, -r1, c13
mad r1.w, r0.y, c22.x, c22.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul_pp r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c9
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c10.x, c10.x
mad_pp r0.y, r1.w, r0.x, r0
texldp r0.x, v3, s4
texld r0.w, v2, s5
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r4.z, r0.x, r0
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mul_pp_sat r4.z, r4, c16
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c11
cmp r0.y, r2.w, c15, c15.x
cmp r0.x, r0, c15.y, c15
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c14
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c11.x, c11.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c15.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c19.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c8.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c3, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 180 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r4.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c21.x
mul r3.x, r1.z, c21
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c8.x
mad r1.x, r4.w, c23.z, c23
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c24.x, c24.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c23.w, c23.x
frc r0.y, r0
add_pp r2.xyz, -r1, c15
mad r1.w, r0.y, c24.x, c24.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mul r5.xyz, r0.z, c1
mov_pp r6.xz, r0.yyxw
dp3 r0.z, v3, v3
rsq r4.z, r0.z
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.y, r0, c25
rcp r4.z, r4.z
mul r0.x, r4.z, c2.w
mad r0.y, -r0.x, c24.z, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c17, r0.z
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r2.w, c4.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r4.z, r4, c18
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c13
cmp r0.y, r2.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 181 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.97000003, 0
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r4.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c21.x
mul r3.x, r1.z, c21
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r4.zw, r1.xyxy, r1
mul r0.w, v1, c8.x
mad r1.x, r4.w, c23.z, c23
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
frc r0.w, r1.x
add r1.xyz, v0, r0
mad r1.w, r0, c24.x, c24.y
sincos r0.xy, r1.w
mad r0.y, r4.z, c23.w, c23.x
frc r0.y, r0
dp3 r4.z, v3, v3
add_pp r2.xyz, -r1, c15
mad r1.w, r0.y, c24.x, c24.y
mov_pp r6.y, r0.x
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r6.xz, r0.yyxw
mul r5.xyz, r0.z, c1
dp3_sat r0.y, v4, r5
dp3_pp_sat r0.x, -r6, -c11
add_pp r0.x, r0, -r0.y
mul_sat r1.w, c12.x, c12.x
mad_pp r2.w, r1, r0.x, r0.y
texld r0, v3, s4
dp4 r0.y, r0, c25
rsq r4.z, r4.z
rcp r0.x, r4.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.z, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c17, r0.z
dp3 r0.x, v2, v2
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r2.w, c4.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r4.z, r4, c18
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c13
cmp r0.y, r2.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c9.x
mul r0.xy, v5.zyzw, c10.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c22.y, c22.z
mad r3.w, r1, r3.z, c22
mad r3.w, r3, r3.z, c23.x
mad r3.w, r3, r3.z, c23.y
mad r3.z, r3.w, r3, c23
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c24.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c25.x, c25.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c10.x
mul r0.xy, v5, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c23.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c9.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c21.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c20.y
mad r1.z, r1.y, c20, c20.w
mad r1.z, r1, r1.y, c21.x
add r2.y, -r0.w, c20
mad r2.x, r0.w, c20.z, c20.w
mad r2.x, r0.w, r2, c21
mad r0.w, r0, r2.x, c21.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c24
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c25.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c20, c20.y
add r4.x, r1, c24.y
mad r1.y, r1.z, r1, c21
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c20.x, c20
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c21.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c21, r0
mad r1.z, -r2, c21, r2.y
mad r1.y, r2.x, c21.w, r1.z
mul r1.y, r1, c22.x
mul r0.w, r0, c22.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
dsy r3.y, r1
dsx r3.w, r1.y
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r1.y, c24.x
mul r3.x, r1.z, c24
mov r4.y, r0.w
texldd r1.yw, r4, s3, r3.zwzw, r3
add r1.zw, r1.xywy, c25.z
mov r1.y, r0.w
mul r1.zw, r1, c26.xyxy
add r4.zw, r1.xyxy, r1
mad r2.w, r4.z, c26, c26.x
mul r0.w, v1, c11.x
rcp r4.z, v3.w
mul_sat r0.w, r0, c21.z
mul_pp r0.xyz, r0, c25.w
mad_pp r0.xyz, r0.w, -r0, r0
add r1.xyz, v0, r0
mad r0.w, r4, c26.z, c26.x
frc r0.x, r0.w
mad r1.w, r0.x, c27.x, c27.y
sincos r0.xy, r1.w
frc r0.y, r2.w
add_pp r2.xyz, -r1, c18
mad r1.w, r0.y, c27.x, c27.y
mov_pp r5.y, r0.x
sincos r0.xy, r1.w
dp4 r0.z, c1, c1
mov_pp r5.xz, r0.yyxw
dp3_pp_sat r0.w, -r5, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.z, v4, r0
mad r0.xy, v3, r4.z, c6
add_pp r0.w, r0, -r0.z
mul_sat r1.w, c15.x, c15.x
mad_pp r2.w, r1, r0, r0.z
texld r0.x, r0, s6
mad r5.xy, v3, r4.z, c5
mov r0.w, r0.x
texld r0.x, r5, s6
mad r5.xy, v3, r4.z, c4
mov r0.z, r0.x
texld r0.x, r5, s6
mad r5.xy, v3, r4.z, c3
mov r0.y, r0.x
texld r0.x, r5, s6
mad r0, -v3.z, r4.z, r0
rcp r4.z, v2.w
mov r4.w, c2.x
cmp r0, r0, c20.y, r4.w
dp4_pp r0.z, r0, c25.w
mad r5.xy, v2, r4.z, c24.y
dp3 r0.x, v2, v2
texld r0.w, r5, s4
cmp r0.y, -v2.z, c20.x, c20
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.y, r0
mul_pp r0.y, r0.x, r0.z
mul_pp r0.x, r2.w, c7.w
mul_pp r4.z, r0.x, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c12.x
add r0.xyz, c7, r0.y
mul_pp_sat r4.z, r4, c21
mad_sat r5.xyz, r0, r4.z, c0
add r0.x, -r0.w, c16
cmp r0.y, r2.w, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul_pp r4.z, r0.x, r0.y
add r0.xyz, v9, -c19
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c16.x, c16.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r4, v1.w, r0.y
add r0.x, -r0, c16
add r0.x, r0, c20.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c17.x
mul r0.x, r0, c17
mad r0.x, r0, c24.z, r0.y
mad_pp r0.xyz, r0.x, r2, r1
texldd r2.xyz, r4, s0, r3.zwzw, r3
mul_pp r1.xyz, r5, v6.x
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c13.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c8, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c20, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c21, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c22, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c23, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c24, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c25, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r2.xyz, v5
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
max r1.w, r3.x, r0
dp3_sat r2.y, v1, -r2
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r3.z, r1.w, r1.w
add r2.x, r2.y, c24.w
mad_sat r2.w, r2.x, c25.x, c25.y
mad r2.xyz, r2.w, r1, r0
mad r3.w, r3.z, c22.y, c22.z
mad r3.w, r3, r3.z, c22
mad r3.w, r3, r3.z, c23.x
mad r3.w, r3, r3.z, c23.y
mad r3.z, r3.w, r3, c23
mul r1.xy, v5, c10.x
mul r0.xy, v5, c9.x
rcp r3.w, v3.w
mul r1.w, r3.z, r1
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c10.x
mul r0.xy, v5.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r4.xyz, r0, -r2
mad_pp r2.xyz, r3.y, r4, r2
add_pp r2.xyz, r2, c25.z
add r1.y, -r1.w, c23.w
add r1.x, r3, -r0.w
cmp r1.x, -r1, r1.w, r1.y
add r0.x, -r1, c21.w
cmp r0.x, v5.z, r1, r0
cmp r1.x, v5, r0, -r0
mul_pp r0.xyz, r2, c25.w
mul r2.z, r1.x, c24.x
abs r1.x, v5.y
add r1.z, -r1.x, c20.y
mad r1.y, r1.x, c20.z, c20.w
mad r1.y, r1, r1.x, c21.x
add r2.x, -r0.w, c20.y
mad r1.w, r0, c20.z, c20
mad r1.w, r0, r1, c21.x
mad r0.w, r0, r1, c21.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c20.x, c20.y
add r5.x, r2.z, c24.y
mad r1.x, r1.y, r1, c21.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c20, c20.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c21.z, r1.y
mul r2.y, r1.w, r2.x
mad r0.w, r1.x, c21, r0
mul r0.w, r0, c22.x
mad r1.y, -r2, c21.z, r2.x
mad r1.x, r1.w, c21.w, r1.y
mul r1.x, r1, c22
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mov r5.y, r0.w
dsx r4.w, r1.x
dsy r4.y, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r4.z, r1.x, c24.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1.y, c24
texldd r1.yw, r5, s3, r4.zwzw, r4
mul r1.x, v1.w, c11
add r2.xy, r1.wyzw, c25.z
mul_sat r1.x, r1, c21.z
mad_pp r1.xyz, r1.x, -r0, r0
mov r2.w, r0
mul r0.xy, r2, c26
add r0.xy, r2.zwzw, r0
add r2.xyz, v0, r1
mad r0.y, r0, c26.z, c26.x
add_pp r3.xyz, -r2, c18
mad r0.z, r0.x, c26.w, c26.x
frc r0.y, r0
mad r0.x, r0.y, c27, c27.y
sincos r1.xy, r0.x
frc r0.y, r0.z
mad r1.y, r0, c27.x, c27
sincos r0.xy, r1.y
mov_pp r1.y, r1.x
mov_pp r1.xz, r0.yyxw
dp4 r0.z, c1, c1
rsq r0.x, r0.z
dp3_pp_sat r0.w, -r1, -c14
mul r0.xyz, r0.x, c1
dp3_sat r1.x, v4, r0
mad r0.xyz, v3, r3.w, c6
add_pp r0.w, r0, -r1.x
mul_sat r1.w, c15.x, c15.x
mad_pp r2.w, r1, r0, r1.x
mad r1.xyz, v3, r3.w, c4
texld r0.x, r0, s6
mov_pp r0.w, r0.x
mad r0.xyz, v3, r3.w, c5
texld r0.x, r0, s6
texld r1.x, r1, s6
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mad r1.xyz, v3, r3.w, c3
mov r0.x, c2
add r3.w, c20.y, -r0.x
texld r0.x, r1, s6
mad r0, r0, r3.w, c2.x
dp4_pp r0.z, r0, c25.w
rcp r1.x, v2.w
mad r1.xy, v2, r1.x, c24.y
dp3 r0.x, v2, v2
texld r0.w, r1, s4
cmp r0.y, -v2.z, c20.x, c20
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.y, r0
mul_pp r0.y, r0.x, r0.z
mul_pp r0.x, r2.w, c7.w
mul_pp r1.x, r0, r0.y
mov r0.xyz, v8
dp3 r2.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r2.w, r2.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c12.x
add r0.xyz, c7, r0.y
mul_pp_sat r1.x, r1, c21.z
mad_sat r1.xyz, r0, r1.x, c0
add r0.x, -r0.w, c16
cmp r0.y, r2.w, c20, c20.x
cmp r0.x, r0, c20.y, c20
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c19
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c16.x, c16.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r2.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c16
add r0.x, r0, c20.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c17.x
mul r0.x, r0, c17
mad r0.x, r0, c24.z, r0.y
mad_pp r0.xyz, r0.x, r3, r2
mul_pp r1.xyz, r1, v6.x
texldd r2.xyz, r5, s0, r4.zwzw, r4
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c13.x
mad_pp r0.xyz, r1.w, r2, r0
mad_pp r0.xyz, r0, c8, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c20.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTexture0] 2D
"ps_3_0
; 188 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mul r1.xy, v5.zyzw, c6.x
mul r0.xy, v5.zyzw, c7.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r2.w, r1, r2.x
mul r3.z, r2.w, r2.w
mad r1.w, r3.z, c19.y, c19.z
mad r3.w, r1, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mov r2.xyz, v5
dp3_sat r2.x, v1, -r2
add r2.x, r2, c21.w
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r1.w, r2.x, c22.x, c22.y
mad r2.xyz, r1.w, r1, r0
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r2.w, r3.z, r2
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
add r0.x, r3, -r0.w
add r0.y, -r2.w, c20.w
cmp r2.w, -r0.x, r2, r0.y
mul r0.xy, v5.zxzw, c6.x
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r1.w, r0, r1
abs r1.y, v5
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
add r3.x, -r2.w, c18.w
cmp r1.x, v5.z, r2.w, r3
add r1.w, -r1.y, c17.y
mad r1.z, r1.y, c17, c17.w
mad r1.z, r1, r1.y, c18.x
add r2.y, -r0.w, c17
mad r2.x, r0.w, c17.z, c17.w
mad r2.x, r0.w, r2, c18
mad r0.w, r0, r2.x, c18.y
cmp r1.x, v5, r1, -r1
mul r1.x, r1, c21
rsq r1.w, r1.w
rsq r2.y, r2.y
rcp r2.y, r2.y
add_pp r0.xyz, r0, c22.z
mul r2.y, r0.w, r2
cmp r2.x, v5.z, c17, c17.y
add r6.x, r1, c21.y
mad r1.y, r1.z, r1, c18
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, v5, c17.x, c17
mul r1.w, r1.y, r1.z
mad r0.w, -r1, c18.z, r1.z
mul r2.z, r2.x, r2.y
mad r0.w, r1.y, c18, r0
mad r1.z, -r2, c18, r2.y
mad r1.y, r2.x, c18.w, r1.z
mul r1.y, r1, c19.x
mul r0.w, r0, c19.x
dsx r1.zw, v5.xyxy
dsy r2.xy, v5
mul r1.zw, r1, r1
mov r6.y, r0.w
dsx r5.w, r1.y
dsy r5.y, r1
add r1.y, r1.z, r1.w
mul r2.xy, r2, r2
add r1.z, r2.x, r2.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r5.z, r1.y, c21.x
mul r5.x, r1.z, c21
texldd r1.yw, r6, s3, r5.zwzw, r5
add r1.zw, r1.xywy, c22.z
mov r1.y, r0.w
mul r1.zw, r1, c23.xyxy
add r1.xy, r1, r1.zwzw
mul r0.w, v1, c8.x
mul_sat r0.w, r0, c18.z
mul_pp r0.xyz, r0, c22.w
mad_pp r0.xyz, r0.w, -r0, r0
add r2.xyz, v0, r0
mad r0.w, r1.y, c23.z, c23.x
frc r0.x, r0.w
mad r1.y, r0.x, c24.x, c24
sincos r0.xy, r1.y
mad r1.x, r1, c23.w, c23
frc r0.y, r1.x
add_pp r3.xyz, -r2, c15
mad r1.x, r0.y, c24, c24.y
mov_pp r1.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r1.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r0.w, -r1, -c11
mul r0.xyz, r0.z, c1
dp3_sat r1.x, v4, r0
add_pp r1.y, r0.w, -r1.x
mul_sat r2.w, c12.x, c12.x
mad_pp r3.w, r2, r1.y, r1.x
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r4.w, r0, c25
add r0.xyz, v3, c24.wzww
texld r0, r0, s4
dp4 r4.z, r0, c25
add r1.xyz, v3, c24.wwzw
texld r1, r1, s4
dp4 r4.y, r1, c25
add r0.xyz, v3, c24.z
texld r0, r0, s4
dp3 r1.x, v3, v3
rsq r1.x, r1.x
dp4 r4.x, r0, c25
rcp r0.x, r1.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c26.x, r4
mov r1.x, c3
cmp r1, r0, c17.y, r1.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r1, c22.w
texld r0.x, r0.x, s5
mul r0.y, r0.x, r0
mul_pp r0.x, r3.w, c4.w
mul_pp r1.x, r0, r0.y
mov r0.xyz, v8
dp3 r1.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r1.x, r1, c18.z
mad_sat r1.xyz, r0, r1.x, c0
add r0.x, -r0.w, c13
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r3, r2
mul_pp r1.xyz, r1, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r2.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] CUBE
SetTexture 5 [_LightTextureB0] 2D
SetTexture 6 [_LightTexture0] CUBE
"ps_3_0
; 189 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
dcl_cube s6
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 15.00000000, -0.94999999
def c22, 32.00000000, 0.50000000, -0.50000000, 0.25000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, 0.00781250, -0.00781250
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r2.xyz, v5
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
abs r0.w, v5.z
abs r3.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
max r1.w, r3.x, r0
dp3_sat r2.y, v1, -r2
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r3.z, r1.w, r1.w
add r2.x, r2.y, c21.w
mad_sat r2.w, r2.x, c22.x, c22.y
mad r2.xyz, r2.w, r1, r0
mad r3.w, r3.z, c19.y, c19.z
mad r3.w, r3, r3.z, c19
mad r3.w, r3, r3.z, c20.x
mad r3.w, r3, r3.z, c20.y
mad r3.z, r3.w, r3, c20
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
mul r1.w, r3.z, r1
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r4.xyz, r0, -r2
mad_pp r2.xyz, r3.y, r4, r2
add_pp r2.xyz, r2, c22.z
add r1.y, -r1.w, c20.w
add r1.x, r3, -r0.w
cmp r1.x, -r1, r1.w, r1.y
add r0.x, -r1, c18.w
cmp r0.x, v5.z, r1, r0
cmp r1.x, v5, r0, -r0
mul_pp r0.xyz, r2, c22.w
mul r2.z, r1.x, c21.x
abs r1.x, v5.y
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
add r2.x, -r0.w, c17.y
mad r1.w, r0, c17.z, c17
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
add r6.x, r2.z, c21.y
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mul r2.y, r1.w, r2.x
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
mov r6.y, r0.w
dsx r5.w, r1.x
dsy r5.y, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r5.z, r1.x, c21.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.x, r1.y, c21
texldd r1.yw, r6, s3, r5.zwzw, r5
mul r1.x, v1.w, c8
add r2.xy, r1.wyzw, c22.z
mul_sat r1.x, r1, c18.z
mad_pp r1.xyz, r1.x, -r0, r0
add r1.xyz, v0, r1
mov r2.w, r0
mul r0.xy, r2, c23
add r0.xy, r2.zwzw, r0
mad r0.y, r0, c23.z, c23.x
add_pp r3.xyz, -r1, c15
mad r0.z, r0.x, c23.w, c23.x
frc r0.y, r0
mad r0.x, r0.y, c24, c24.y
sincos r2.xy, r0.x
frc r0.y, r0.z
mad r1.w, r0.y, c24.x, c24.y
sincos r0.xy, r1.w
mov_pp r2.y, r2.x
mov_pp r2.xz, r0.yyxw
dp4 r0.z, c1, c1
dp3_pp_sat r2.w, -r2, -c11
rsq r0.x, r0.z
mul r2.xyz, r0.x, c1
dp3_sat r1.w, v4, r2
add r0.xyz, v3, c24.zwww
texld r0, r0, s4
dp4 r4.w, r0, c25
add r0.xyz, v3, c24.wzww
texld r0, r0, s4
dp4 r4.z, r0, c25
add r0.xyz, v3, c24.z
texld r0, r0, s4
add_pp r3.w, r2, -r1
add r2.xyz, v3, c24.wwzw
texld r2, r2, s4
dp4 r4.y, r2, c25
mul_sat r2.w, c12.x, c12.x
dp3 r2.x, v3, v3
mad_pp r1.w, r2, r3, r1
rsq r2.x, r2.x
dp4 r4.x, r0, c25
rcp r0.x, r2.x
mul r0.x, r0, c2.w
mov r2.x, c3
mad r0, -r0.x, c26.x, r4
cmp r0, r0, c17.y, r2.x
dp4_pp r0.y, r0, c22.w
dp3 r0.x, v2, v2
texld r0.w, v2, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul r0.y, r0.x, r0
mul_pp r0.x, r1.w, c4.w
mul_pp r2.x, r0, r0.y
mov r0.xyz, v8
dp3 r1.w, v7, r0
dp3 r0.w, v7, v7
mad r0.x, -r1.w, r1.w, r0.w
rsq r0.x, r0.x
rcp r0.w, r0.x
mov r0.y, c9.x
add r0.xyz, c4, r0.y
mul_pp_sat r2.x, r2, c18.z
mad_sat r2.xyz, r0, r2.x, c0
add r0.x, -r0.w, c13
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.w, r0.x, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r0.w, r0, r0
mad r0.y, c13.x, c13.x, -r0.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.w, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c21.z, r0.y
mad_pp r0.xyz, r0.x, r3, r1
mul_pp r1.xyz, r2, v6.x
texldd r2.xyz, r6, s0, r5.zwzw, r5
add_pp r2.xyz, r2, -r0
mul r3.xyz, r1, c10.x
mad_pp r0.xyz, r2.w, r2, r0
mad_pp r0.xyz, r0, c5, r3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 198 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r1.w, v4.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.z, c23
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c18.y, c18.z
mad r3.y, r1.x, r3.x, c18.w
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r3.y, r3, r3.x, c19.x
mad r0.x, r3.y, r3, c19.y
mad r0.x, r0, r3, c19.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c16.y
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add_pp r1.xyz, r1, c20.w
rsq r2.x, r2.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v1.w, c6.x
cmp r0.x, v4, r0, -r0
mul r3.z, r0.x, c20.x
abs r0.x, v4.y
mul_sat r0.y, r0.z, c17.z
add r0.z, -r0.x, c16.y
mul_pp r1.xyz, r1, c24.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
add r6.x, r3.z, c20.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v4.z, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c17, r1.w
mul r1.w, r0.x, c18.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
add r1.xyz, v0, r1
dsy r0.zw, v4.xyxy
mul r0.zw, r0, r0
mov r6.y, r1.w
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c20.x
mul r4.z, r0.y, c20.x
texldd r0.yw, r6, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c20.w
mov r0.xyz, v7
dp3 r0.w, v6, r0
dp3 r2.w, v6, v6
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c21
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
mad r1.w, r4.y, c21.z, c21.x
cmp r0.y, r0.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.x, r0, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r3.w, c10.x, c10.x
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r3.w, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r4.xy, v4.zyzw, c15.x
dp3_sat r7.w, v3, r1
dp3_pp_sat r7.z, -r2, -c9
mul r5.xy, v4, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mad_pp r1, r6.w, r1, r2
add_pp r8.x, r7.z, -r7.w
mad_pp r0.y, r3.w, r8.x, r7.w
add r2.w, v0, c20.z
frc r3.w, r2
dp3 r0.x, v2, v2
add_sat r3.w, r2, -r3
texld r0.x, r0.x, s7
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.z, r0.y, c17
mov r0.y, c7.x
add r2.xyz, c2, r0.y
mad_sat r0.yzw, r2.xxyz, r0.z, c0.xxyz
texldd r2, r6, s3, r5.zwzw, r4.zwzw
mul_pp r2.w, r2, r3
mul_pp r1, r2, r1
mul_pp r0.yzw, r0, v5.x
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r1.w, r1, r3
texld r3, r4, s4
mul r8.xyz, r0.yzww, c8.x
mad_pp r8.xyz, r1, c3, r8
texld r1, r5, s4
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
add_pp r4.x, r7.z, c22.z
texld r3, r7, s4
add_pp r3, r3, -r1
mul_pp r4.x, r4, c2.w
mad_pp r1, r6.w, r3, r1
mul_pp r1, r2, r1
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c22.w
add_pp r0.x, -r0, c16.y
mad_pp r1.xyz, -r8, r0.yzww, r1
mul_pp r2.xyz, r8, r0.yzww
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 195 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
dcl_texcoord9 v7.xyz
mov r0.xyz, v3
dp3_sat r0.w, v1, -r0
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
add r0.w, r0, c23.y
mul r2.xy, v3, c5.x
abs r6.zw, v3.xyxy
abs r1.w, v3.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c23.z, c23
mad r0.xyz, r0.w, r3, r0
mul r1.xy, v3, c4.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r6.z, r0, r1
mul r0.xy, v3.zxzw, c4.x
mul r1.xy, v3.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
max r2.w, r6.z, r1
mad_pp r2.xyz, r6.w, r0, r2
mul r1.z, v1.w, c6.x
add_pp r2.xyz, r2, c20.w
rcp r1.x, r2.w
min r0.w, r6.z, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r0.x, r1, c18.y, c18.z
mad r1.y, r0.x, r1.x, c18.w
mad r1.y, r1, r1.x, c19.x
mad r1.y, r1, r1.x, c19
mul_pp r0.xyz, r2, c24.x
mul_sat r1.z, r1, c17
mad_pp r0.xyz, r1.z, -r0, r0
mad r1.x, r1.y, r1, c19.z
mul r2.x, r1, r0.w
add r0.xyz, v0, r0
add_pp r1.xyz, -r0, c13
add r2.y, -r2.x, c19.w
add r0.w, r6.z, -r1
cmp r0.w, -r0, r2.x, r2.y
mov r2.xyz, v6
dp3 r2.w, v5, r2
add r2.x, -r0.w, c17.w
cmp r0.w, v3.z, r0, r2.x
dp3 r3.x, v5, v5
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c11
cmp r0.w, v3.x, r0, -r0
mul r6.x, r0.w, c20
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add r4.z, r6.x, c20.y
cmp r2.y, r2.w, c16, c16.x
cmp r2.x, r2, c16.y, c16
mul_pp r3.y, r2.x, r2
add r2.xyz, v7, -c14
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c11.x, c11.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c11
add r2.x, r2, c16.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mad r0.w, r1, r0, c17.y
mul_sat r2.y, r2.z, c12.x
mul r2.x, r2, c12
mad r2.x, r2, c23, r2.y
mad_pp r2.xyz, r2.x, r1, r0
abs r0.x, v3.y
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
add r1.x, -r1.w, c16.y
rsq r0.z, r0.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v3.z, c16.x, c16.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mul r3.w, r0.x, c18.x
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c17, r1.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
dsy r1.xy, v3
dsx r4.y, r0.x
dsy r0.w, r0.x
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.x, r0, c20
mul r0.z, r0.y, c20.x
mov r4.w, r3
texldd r1.xyz, r4.zwzw, s0, r4, r0.zwzw
texldd r8.yw, r4.zwzw, s6, r4, r0.zwzw
add_pp r1.xyz, r1, -r2
mul_sat r5.w, c10.x, c10.x
mad_pp r3.xyz, r5.w, r1, r2
mul r7.xy, v3, c15.x
mul r0.xy, v3.zyzw, c15.x
mov r6.y, r3.w
texld r2, r7, s5
texld r1, r0, s5
add_pp r1, r1, -r2
mad_pp r2, r6.z, r1, r2
add r5.xy, r8.wyzw, c20.w
mul r1.xy, r5, c21
add r5.xy, r6, r1
mul r6.xy, v3.zxzw, c15.x
mad r3.w, r5.y, c21.z, c21.x
texld r1, r6, s5
add_pp r1, r1, -r2
frc r3.w, r3
mad_pp r1, r6.w, r1, r2
mad r3.w, r3, c22.x, c22.y
sincos r2.xy, r3.w
mad r5.x, r5, c21.w, c21
frc r2.y, r5.x
mad r3.w, r2.y, c22.x, c22.y
mov_pp r5.y, r2.x
sincos r2.xy, r3.w
dp4_pp r2.z, c1, c1
mov_pp r5.xz, r2.yyxw
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c1
dp3_sat r2.z, v2, r2
dp3_pp_sat r3.w, -r5, -c9
add_pp r2.w, r3, -r2.z
add r2.x, v0.w, c20.z
frc r2.y, r2.x
mad_pp r5.x, r5.w, r2.w, r2.z
add_sat r5.y, r2.x, -r2
texldd r2, r4.zwzw, s3, r4, r0.zwzw
mul_pp r2.w, r2, r5.y
mul_pp r1, r2, r1
add_pp r1.xyz, r1, -r3
mul_pp r0.w, r5.x, c2
mov r0.z, c7.x
mad_pp r3.xyz, r1.w, r1, r3
texld r1, r7, s4
mul_pp_sat r0.w, r0, c17.z
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v4.x
mul r5.xyz, r4, c8.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r3, c22.z
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c22.w
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c16.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 203 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r1.w, v4.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.z, c23
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c18.y, c18.z
mad r3.y, r1.x, r3.x, c18.w
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
mul_sat r7.z, c10.x, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r3.y, r3, r3.x, c19.x
mad r0.x, r3.y, r3, c19.y
mad r0.x, r0, r3, c19.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c16.y
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add_pp r1.xyz, r1, c20.w
rsq r2.x, r2.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v1.w, c6.x
cmp r0.x, v4, r0, -r0
mul r3.z, r0.x, c20.x
abs r0.x, v4.y
mul_sat r0.y, r0.z, c17.z
add r0.z, -r0.x, c16.y
mul_pp r1.xyz, r1, c24.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
add r6.x, r3.z, c20.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v4.z, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c17, r1.w
mul r1.w, r0.x, c18.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
add r1.xyz, v0, r1
dsy r0.zw, v4.xyxy
mul r0.zw, r0, r0
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c20.x
mov r6.y, r1.w
mul r5.z, r0.x, c20.x
texldd r0.yw, r6, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c20.w
mov r0.xyz, v7
dp3 r0.w, v6, r0
dp3 r2.w, v6, v6
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c21
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
mad r1.w, r4.y, c21.z, c21.x
cmp r0.y, r0.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.x, r0, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r7.z, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r4.xy, v4.zyzw, c15.x
dp3_sat r7.w, v3, r1
dp3_pp_sat r3.w, -r2, -c9
mul r5.xy, v4, c15.x
add_pp r8.x, r3.w, -r7.w
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mad_pp r0.y, r7.z, r8.x, r7.w
rcp r0.x, v2.w
mad r8.xy, v2, r0.x, c20.y
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s8
mul_pp r0.z, r0, r0.w
mul_pp r7.z, r0, r0.x
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v5.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 199 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mad_sat r2.w, r0, c23.z, c23
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v4.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c18, c18.z
mad r3.y, r3, r3.x, c18.w
mad r3.y, r3, r3.x, c19.x
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
add_pp r1.xyz, r1, c20.w
mad r3.y, r3, r3.x, c19
mad r0.x, r3.y, r3, c19.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c16.z, c16
mul_pp r2.xyz, r1, c24.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
cmp r1.x, v4, r0, -r0
mul r3.z, r1.x, c20.x
abs r1.x, v4.y
mul r0.y, v1.w, c6.x
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
mul_sat r0.x, r0.y, c17.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c16.y
mad r1.w, r0, r1, c17.x
mad r0.w, r0, r1, c17.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.x, r3.z, c20.y
mul r2.x, r0.w, r2
cmp r1.w, v4.z, c16.x, c16.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v4.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c17.z, r1.y
mad r0.w, r1.x, c17, r0
mul r0.w, r0, c18.x
mad r1.y, -r2, c17.z, r2.x
mad r1.x, r1.w, c17.w, r1.y
mul r1.x, r1, c18
dsy r1.zw, v4.xyxy
mul r1.zw, r1, r1
dsy r4.w, r1.x
dsx r5.w, r1.x
dsx r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.y, c20.x
mul r5.z, r1.x, c20.x
mov r6.y, r0.w
texldd r2.yw, r6, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c20.w
mul r3.xy, r0, c21
mov r0.xyz, v7
mov r3.w, r0
dp3 r1.w, v6, r0
dp3 r2.w, v6, v6
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c21.z, c21
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
cmp r0.y, r1.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.y, r0.x, r0
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c21.w, c21.x
frc r0.y, r0
mov_pp r7.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r7.xz, r0.yyxw
dp3_pp_sat r3.w, -r7, -c9
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v3, r3
mul_sat r0.x, c10, c10
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v4, c15.x
mad_pp r7.z, r0.x, r0, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
dp3 r0.x, v2, v2
mul_pp r0.y, r7.z, c2.w
texld r0.w, v2, s8
texld r0.x, r0.x, s7
mul r7.z, r0.x, r0.w
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v5.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 196 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r1.w, v4.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r2.w, r0, c23.z, c23
abs r0.zw, v4.xyxy
mad r3.xyz, r2.w, r2, r1
max r0.x, r0.z, r1.w
mul r1.xy, v4, c5.x
min r0.y, r0.z, r1.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r0.xy, v4, c4.x
mul r4.x, r3.w, r3.w
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r0.x, r4, c18.y, c18.z
mad r0.x, r0, r4, c18.w
mad r4.y, r0.x, r4.x, c19.x
mul r0.xy, v4.zxzw, c4.x
texld r2.xyz, r0, s2
mad r0.x, r4.y, r4, c19.y
mad r0.x, r0, r4, c19.z
mul r0.y, r0.x, r3.w
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c20.w
dsx r4.xy, v4
dsy r3.zw, v4.xyxy
mul_pp r1.xyz, r1, c24.x
mul r4.xy, r4, r4
add r2.x, r0.z, -r1.w
add r0.x, -r0.y, c19.w
cmp r0.y, -r2.x, r0, r0.x
add r0.x, -r0.y, c17.w
cmp r0.y, v4.z, r0, r0.x
mul r0.x, v1.w, c6
mul_sat r0.x, r0, c17.z
mad_pp r2.xyz, r0.x, -r1, r1
abs r1.y, v4
cmp r0.y, v4.x, r0, -r0
mul r0.x, r0.y, c20
add r0.y, -r1, c16
mad r1.x, r1.y, c16.z, c16.w
mad r1.x, r1, r1.y, c17
mad r1.x, r1, r1.y, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.w, r1.x, r0.y
cmp r3.y, v4, c16.x, c16
mul r1.z, r3.y, r2.w
mad r1.z, -r1, c17, r2.w
add r0.y, -r1.w, c16
mad r1.x, r1.w, c16.z, c16.w
mad r1.x, r1.w, r1, c17
rsq r0.y, r0.y
add r3.x, r0, c20.y
cmp r1.y, v4.z, c16.x, c16
mad r1.z, r3.y, c17.w, r1
rcp r0.y, r0.y
mad r1.x, r1.w, r1, c17.y
mul r1.x, r1, r0.y
mul r0.y, r1, r1.x
mad r0.y, -r0, c17.z, r1.x
mad r1.x, r1.y, c17.w, r0.y
mul r0.y, r1.z, c18.x
mul r1.x, r1, c18
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
mov r3.y, r0
dsx r1.y, r1.x
dsy r1.w, r1.x
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rcp r2.w, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2.w, c20
mul r1.z, r1, c20.x
texldd r4.yw, r3, s6, r1, r1.zwzw
add r3.zw, r4.xywy, c20.w
mul r3.zw, r3, c21.xyxy
add r0.xy, r0, r3.zwzw
add r2.xyz, v0, r2
mov r5.xyz, v7
dp3 r2.w, v6, r5
dp3 r4.w, v6, v6
mad r4.w, -r2, r2, r4
rsq r3.z, r4.w
rcp r4.w, r3.z
add r3.w, -r4, c11.x
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
mad r0.x, r0, c21.w, c21
add_pp r4.xyz, -r2, c13
cmp r3.z, r2.w, c16.y, c16.x
cmp r3.w, r3, c16.y, c16.x
mul_pp r3.w, r3, r3.z
mul r3.z, r4.w, r4.w
add r5.xyz, v8, -c14
dp3 r4.w, r5, r5
mad r0.y, r0, c22.x, c22
sincos r5.xy, r0.y
frc r0.x, r0
mad r0.y, r0.x, c22.x, c22
mov_pp r6.y, r5.x
sincos r5.xy, r0.y
mov_pp r6.xz, r5.yyxw
mad r3.z, c11.x, c11.x, -r3
rsq r4.w, r4.w
rsq r3.z, r3.z
rcp r3.z, r3.z
add r2.w, r2, -r3.z
cmp r2.w, -r3, v1, r2
rcp r4.w, r4.w
add r4.w, -r4, c11.x
add r4.w, r4, c16.y
frc r3.z, r4.w
add_sat r3.z, r4.w, -r3
add r2.w, v1, -r2
dp4_pp r0.x, c1, c1
rsq_pp r0.x, r0.x
mul_pp r7.xyz, r0.x, c1
dp3_sat r0.y, v3, r7
mul r3.z, r3, c12.x
mul_sat r2.w, r2, c12.x
mad r2.w, r3.z, c23.x, r2
mad_pp r2.xyz, r2.w, r4, r2
texldd r4.xyz, r3, s0, r1, r1.zwzw
dp3_pp_sat r2.w, -r6, -c9
add_pp r0.x, r2.w, -r0.y
mul r5.xy, v4, c15.x
texld r6, r5, s5
add_pp r2.w, r2, c22.z
texldd r1, r3, s3, r1, r1.zwzw
add_pp r4.xyz, r4, -r2
mul_sat r3.z, c10.x, c10.x
mad_pp r2.xyz, r3.z, r4, r2
mad_pp r3.z, r3, r0.x, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
mad_pp r6, r0.z, r7, r6
mul r0.xy, v4.zxzw, c15.x
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mov r4.w, c7.x
texld r5, r5, s4
texld r3.w, v2, s7
mul_pp r3.z, r3, c2.w
mul_pp r3.z, r3.w, r3
mul_pp_sat r4.z, r3, c17
add r7.xyz, c2, r4.w
add r3.z, v0.w, c20
frc r4.w, r3.z
add_sat r3.z, r3, -r4.w
mul_pp r1.w, r1, r3.z
mad_sat r7.xyz, r7, r4.z, c0
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r5, r5, -r4
mul_pp r2.w, r2, c2
mad_pp r0, r0.w, r5, r4
mul_pp r6, r1, r6
mul_pp r3.xyz, r7, v5.x
add_pp r7.xyz, r6, -r2
mul_pp r0, r1, r0
mul_pp r2.w, r2, r3
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.w, -r1.x, c16.y
mul r6.xyz, r3, c8.x
mad_pp r2.xyz, r6.w, r7, r2
mad_pp r2.xyz, r2, c3, r6
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 208 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c25, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c24.y
mad_sat r2.w, r0, c24.z, c24
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c19, c19.z
mad r3.y, r3, r3.x, c19.w
mad r3.y, r3, r3.x, c20.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c21.w
mad r3.y, r3, r3.x, c20
mad r0.x, r3.y, r3, c20.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c17.z, c17
mul_pp r2.xyz, r1, c25.x
add r0.z, -r0.y, c20.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c21.x
abs r1.x, v5.y
mul r0.y, v1.w, c7.x
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
mul_sat r0.x, r0.y, c18.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c17.y
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c21.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c21.x
mul r4.z, r1.y, c21.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c21.w
mul r3.xy, r0, c22
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c22.z, c22
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c12
add_pp r2.xyz, -r1, c14
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c12.x, c12.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c23.x, c23.y
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c24, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c22.w, c22.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c23.x, c23.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c10
mul_sat r0.x, c11, c11
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5.zyzw, c16.x
mad_pp r7.z, r0.x, r0, r0.y
mul r6.xy, v5, c16.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c16.x
texld r0, r4, s5
add_pp r2, r0, -r1
mul_pp r0.y, r7.z, c3.w
texldp r0.x, v3, s9
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v2.w
mad r8.xy, v2, r0.x, c21.y
cmp r0.z, r0, c17.y, r0.w
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r7.z, -v2, c17.x, c17.y
mul_pp r0.w, r7.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r7.z, r0.x, r0
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c21.z
frc r2.w, r1
mov r1.x, c8
add_sat r2.w, r1, -r2
add r1.xyz, c3, r1.x
mul_pp_sat r2.x, r7.w, c18.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c23.z
mul_pp r2.w, r2, c3
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c9.x
mad_pp r3.xyz, r0, c4, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c23.w
add_pp r1.x, -r1, c17.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 207 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c25, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c24.y
mad_sat r2.w, r0, c24.z, c24
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c19, c19.z
mad r3.y, r3, r3.x, c19.w
mad r3.y, r3, r3.x, c20.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c21.w
mad r3.y, r3, r3.x, c20
mad r0.x, r3.y, r3, c20.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c17.z, c17
mul_pp r2.xyz, r1, c25.x
add r0.z, -r0.y, c20.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c21.x
abs r1.x, v5.y
mul r0.y, v1.w, c7.x
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
mul_sat r0.x, r0.y, c18.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c17.y
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c21.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c21.x
mul r4.z, r1.y, c21.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c21.w
mul r3.xy, r0, c22
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c22.z, c22
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c12
add_pp r2.xyz, -r1, c14
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c12.x, c12.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c23.x, c23.y
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c24, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c22.w, c22.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c23.x, c23.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c10
mul_sat r0.x, c11, c11
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5.zyzw, c16.x
mad_pp r7.z, r0.x, r0, r0.y
mul r6.xy, v5, c16.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c16.x
texld r0, r4, s5
add_pp r2, r0, -r1
mul_pp r0.y, r7.z, c3.w
mov r0.x, c2
rcp r0.w, v2.w
mad r8.xy, v2, r0.w, c21.y
add r0.z, c17.y, -r0.x
texldp r0.x, v3, s9
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r7.z, -v2, c17.x, c17.y
mul_pp r0.w, r7.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r7.z, r0.x, r0
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c21.z
frc r2.w, r1
mov r1.x, c8
add_sat r2.w, r1, -r2
add r1.xyz, c3, r1.x
mul_pp_sat r2.x, r7.w, c18.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c23.z
mul_pp r2.w, r2, c3
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c9.x
mad_pp r3.xyz, r0, c4, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c23.w
add_pp r1.x, -r1, c17.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 196 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r1.w, v4.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r2.w, r0, c23.z, c23
abs r0.zw, v4.xyxy
mad r3.xyz, r2.w, r2, r1
max r0.x, r0.z, r1.w
mul r1.xy, v4, c5.x
min r0.y, r0.z, r1.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r0.xy, v4, c4.x
mul r4.x, r3.w, r3.w
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r0.x, r4, c18.y, c18.z
mad r0.x, r0, r4, c18.w
mad r4.y, r0.x, r4.x, c19.x
mul r0.xy, v4.zxzw, c4.x
texld r2.xyz, r0, s2
mad r0.x, r4.y, r4, c19.y
mad r0.x, r0, r4, c19.z
mul r0.y, r0.x, r3.w
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c20.w
dsx r4.xy, v4
dsy r3.zw, v4.xyxy
mul_pp r1.xyz, r1, c24.x
mul r4.xy, r4, r4
add r2.x, r0.z, -r1.w
add r0.x, -r0.y, c19.w
cmp r0.y, -r2.x, r0, r0.x
add r0.x, -r0.y, c17.w
cmp r0.y, v4.z, r0, r0.x
mul r0.x, v1.w, c6
mul_sat r0.x, r0, c17.z
mad_pp r2.xyz, r0.x, -r1, r1
abs r1.y, v4
cmp r0.y, v4.x, r0, -r0
mul r0.x, r0.y, c20
add r0.y, -r1, c16
mad r1.x, r1.y, c16.z, c16.w
mad r1.x, r1, r1.y, c17
mad r1.x, r1, r1.y, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.w, r1.x, r0.y
cmp r3.y, v4, c16.x, c16
mul r1.z, r3.y, r2.w
mad r1.z, -r1, c17, r2.w
add r0.y, -r1.w, c16
mad r1.x, r1.w, c16.z, c16.w
mad r1.x, r1.w, r1, c17
rsq r0.y, r0.y
add r3.x, r0, c20.y
cmp r1.y, v4.z, c16.x, c16
mad r1.z, r3.y, c17.w, r1
rcp r0.y, r0.y
mad r1.x, r1.w, r1, c17.y
mul r1.x, r1, r0.y
mul r0.y, r1, r1.x
mad r0.y, -r0, c17.z, r1.x
mad r1.x, r1.y, c17.w, r0.y
mul r0.y, r1.z, c18.x
mul r1.x, r1, c18
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
mov r3.y, r0
dsx r1.y, r1.x
dsy r1.w, r1.x
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rcp r2.w, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2.w, c20
mul r1.z, r1, c20.x
texldd r4.yw, r3, s6, r1, r1.zwzw
add r3.zw, r4.xywy, c20.w
mul r3.zw, r3, c21.xyxy
add r0.xy, r0, r3.zwzw
add r2.xyz, v0, r2
mov r5.xyz, v7
dp3 r2.w, v6, r5
dp3 r4.w, v6, v6
mad r4.w, -r2, r2, r4
rsq r3.z, r4.w
rcp r4.w, r3.z
add r3.w, -r4, c11.x
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
mad r0.x, r0, c21.w, c21
add_pp r4.xyz, -r2, c13
cmp r3.z, r2.w, c16.y, c16.x
cmp r3.w, r3, c16.y, c16.x
mul_pp r3.w, r3, r3.z
mul r3.z, r4.w, r4.w
add r5.xyz, v8, -c14
dp3 r4.w, r5, r5
mad r0.y, r0, c22.x, c22
sincos r5.xy, r0.y
frc r0.x, r0
mad r0.y, r0.x, c22.x, c22
mov_pp r6.y, r5.x
sincos r5.xy, r0.y
mov_pp r6.xz, r5.yyxw
mad r3.z, c11.x, c11.x, -r3
rsq r4.w, r4.w
rsq r3.z, r3.z
rcp r3.z, r3.z
add r2.w, r2, -r3.z
cmp r2.w, -r3, v1, r2
rcp r4.w, r4.w
add r4.w, -r4, c11.x
add r4.w, r4, c16.y
frc r3.z, r4.w
add_sat r3.z, r4.w, -r3
add r2.w, v1, -r2
dp4_pp r0.x, c1, c1
rsq_pp r0.x, r0.x
mul_pp r7.xyz, r0.x, c1
dp3_sat r0.y, v3, r7
mul r3.z, r3, c12.x
mul_sat r2.w, r2, c12.x
mad r2.w, r3.z, c23.x, r2
mad_pp r2.xyz, r2.w, r4, r2
texldd r4.xyz, r3, s0, r1, r1.zwzw
dp3_pp_sat r2.w, -r6, -c9
add_pp r0.x, r2.w, -r0.y
mul r5.xy, v4, c15.x
texld r6, r5, s5
add_pp r2.w, r2, c22.z
texldd r1, r3, s3, r1, r1.zwzw
add_pp r4.xyz, r4, -r2
mul_sat r3.z, c10.x, c10.x
mad_pp r2.xyz, r3.z, r4, r2
mad_pp r3.z, r3, r0.x, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
mad_pp r6, r0.z, r7, r6
mul r0.xy, v4.zxzw, c15.x
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mov r4.z, c7.x
texld r5, r5, s4
texldp r8.x, v2, s7
mul_pp r3.z, r3, c2.w
mul_pp r3.z, r8.x, r3
mul_pp_sat r3.w, r3.z, c17.z
add r7.xyz, c2, r4.z
add r3.z, v0.w, c20
frc r4.z, r3
add_sat r3.z, r3, -r4
mul_pp r1.w, r1, r3.z
mad_sat r7.xyz, r7, r3.w, c0
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r5, r5, -r4
mul_pp r2.w, r2, c2
mad_pp r0, r0.w, r5, r4
mul_pp r6, r1, r6
mul_pp r3.xyz, r7, v5.x
add_pp r7.xyz, r6, -r2
mul_pp r0, r1, r0
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.w, -r1.x, c16.y
mul r6.xyz, r3, c8.x
mad_pp r2.xyz, r6.w, r7, r2
mad_pp r2.xyz, r2, c3, r6
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 198 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mad_sat r2.w, r0, c23.z, c23
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r6.zw, v5.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c18, c18.z
mad r3.y, r3, r3.x, c18.w
mad r3.y, r3, r3.x, c19.x
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
add_pp r1.xyz, r1, c20.w
mad r3.y, r3, r3.x, c19
mad r0.x, r3.y, r3, c19.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c16.z, c16
mul_pp r2.xyz, r1, c24.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c20.x
abs r1.x, v5.y
mul r0.y, v1.w, c6.x
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
mul_sat r0.x, r0.y, c17.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c16.y
mad r1.w, r0, r1, c17.x
mad r0.w, r0, r1, c17.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.x, r3.z, c20.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c16.x, c16.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c17.z, r1.y
mad r0.w, r1.x, c17, r0
mul r0.w, r0, c18.x
mad r1.y, -r2, c17.z, r2.x
mad r1.x, r1.w, c17.w, r1.y
mul r1.x, r1, c18
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsy r4.w, r1.x
dsx r5.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.y, c20.x
mul r5.z, r1.x, c20.x
mov r6.y, r0.w
texldd r2.yw, r6, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c20.w
mul r3.xy, r0, c21
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c21.z, c21
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
cmp r0.y, r1.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c21.w, c21.x
frc r0.y, r0
mov_pp r7.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r7.xz, r0.yyxw
dp3_pp_sat r3.w, -r7, -c9
mul_pp r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
mul_sat r0.x, c10, c10
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5, c15.x
mad_pp r7.z, r0.x, r0, r0.y
mul r4.xy, v5.zyzw, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v5.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mul_pp r0.y, r7.z, c2.w
texldp r0.x, v3, s7
texld r0.w, v2, s8
mul r7.z, r0.w, r0.x
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 207 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0.25000000
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c26.z
mul r1.xy, v5.zyzw, c7.x
mul r0.xy, v5.zyzw, c6.x
abs r7.xy, v5
abs r1.w, v5.z
max r2.w, r7.x, r1
rcp r3.x, r2.w
min r2.w, r7.x, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c27.x, c27.y
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v5, c6.x
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r2, r0
mad r1.x, r3, c20.y, c20.z
mad r3.y, r1.x, r3.x, c20.w
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
mul_sat r7.z, c12.x, c12.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
mad r3.y, r3, r3.x, c21.x
mad r0.x, r3.y, r3, c21.y
mad r0.x, r0, r3, c21.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c18.y
mad r0.w, r1, c18.z, c18
mad r0.w, r1, r0, c19.x
add_pp r1.xyz, r1, c22.w
rsq r2.x, r2.x
add r0.z, -r0.y, c21.w
add r0.x, r7, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c19.w
cmp r0.x, v5.z, r0, r0.y
mul r0.z, v1.w, c8.x
cmp r0.x, v5, r0, -r0
mul r3.z, r0.x, c22.x
abs r0.x, v5.y
mul_sat r0.y, r0.z, c19.z
add r0.z, -r0.x, c18.y
mul_pp r1.xyz, r1, c26.w
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
add r6.z, r3, c22.y
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mad r0.w, r1, r0, c19.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c18.x, c18.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c19, r1.w
mul r1.w, r0.x, c20.x
mad r0.y, r0.w, c19.w, r0.z
mul r0.x, r0.y, c20
add r1.xyz, v0, r1
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c22.x
mul r4.z, r0.y, c22.x
mov r6.w, r1
texldd r0.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c22.w
mov r0.xyz, v8
dp3 r0.w, v7, r0
dp3 r2.w, v7, v7
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c23
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c13
add_pp r2.xyz, -r1, c15
mad r1.w, r4.y, c23.z, c23.x
cmp r0.y, r0.w, c18, c18.x
cmp r0.x, r0, c18.y, c18
mul_pp r3.x, r0, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c13.x, c13.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c13
add r0.x, r0, c18.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c24.x, c24.y
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c26.y, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r7.z, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c23.w, c23.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c24, c24.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r6.xy, v5, c17.x
dp3_sat r7.w, v4, r1
dp3_pp_sat r3.w, -r2, -c11
mul r5.xy, v5.zyzw, c17.x
add_pp r8.x, r3.w, -r7.w
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c17.x
texld r0, r4, s5
add_pp r2, r0, -r1
mad_pp r0.y, r7.z, r8.x, r7.w
dp3 r0.x, v3, v3
rsq r7.z, r0.x
mul_pp r7.w, r0.y, c4
texld r0, v3, s7
dp4 r0.y, r0, c25
rcp r7.z, r7.z
mul r0.x, r7.z, c2.w
mad r0.y, -r0.x, c24.w, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c18, r0.z
texld r0.x, r0.x, s8
mul r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c9
add_sat r2.w, r1, -r2
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r7.w, c19.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c10.x
mad_pp r3.xyz, r0, c5, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c26
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 208 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0.25000000
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c26.z
mad_sat r2.w, r0, c27.x, c27.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c20, c20.z
mad r3.y, r3, r3.x, c20.w
mad r3.y, r3, r3.x, c21.x
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c22.w
mad r3.y, r3, r3.x, c21
mad r0.x, r3.y, r3, c21.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c18.z, c18
mul_pp r2.xyz, r1, c26.w
add r0.z, -r0.y, c21.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c19.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c22.x
abs r1.x, v5.y
mul r0.y, v1.w, c8.x
add r1.z, -r1.x, c18.y
mad r1.y, r1.x, c18.z, c18.w
mad r1.y, r1, r1.x, c19.x
mul_sat r0.x, r0.y, c19.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
mad r0.w, r0, r1, c19.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c22.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c18.x, c18.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c19.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c18, c18.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c19.z, r1.y
mad r0.w, r1.x, c19, r0
mul r0.w, r0, c20.x
mad r1.y, -r2, c19.z, r2.x
mad r1.x, r1.w, c19.w, r1.y
mul r1.x, r1, c20
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c22.x
mul r4.z, r1.y, c22.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c22.w
mul r3.xy, r0, c23
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c23.z, c23
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c13
add_pp r2.xyz, -r1, c15
cmp r0.y, r1.w, c18, c18.x
cmp r0.x, r0, c18.y, c18
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c13.x, c13.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c18.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c24.x, c24.y
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c26.y, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c24.x, c24.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c11
mul_sat r0.x, c12, c12
add_pp r0.z, r3.w, -r0.y
mad_pp r7.z, r0.x, r0, r0.y
mul_pp r7.w, r7.z, c4
dp3 r7.z, v3, v3
mad_pp r3.xyz, r0.x, r2, r1
mul r6.xy, v5, c17.x
mul r5.xy, v5.zyzw, c17.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c17.x
texld r0, r4, s5
add_pp r2, r0, -r1
texld r0, v3, s7
dp4 r0.y, r0, c25
rsq r7.z, r7.z
rcp r0.x, r7.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c18, r0.z
dp3 r0.x, v2, v2
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c9
add_sat r2.w, r1, -r2
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r7.w, c19.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c10.x
mad_pp r3.xyz, r0, c5, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c26
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c28.z
mad_sat r1.w, r0, c29.x, c29.y
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
mul r2.xy, v5, c10.x
abs r7.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c9.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r7.x, r0, r1
mul r0.xy, v5.zxzw, c9.x
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r7.y, r3, r2
max r0.x, r7, r0.w
rcp r0.y, r0.x
min r0.x, r7, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c23, c23.z
mad r0.y, r0, r0.x, c23.w
mad r0.y, r0, r0.x, c24.x
mad r0.y, r0, r0.x, c24
add_pp r2.xyz, r2, c25.w
mul r0.z, v1.w, c11.x
mad r1.y, r0, r0.x, c24.z
mul_sat r0.z, r0, c22
mul_pp r2.xyz, r2, c27.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c18
add r2.y, -r2.x, c24.w
add r1.w, r7.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c22.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c16
cmp r2.y, r2.w, c21, c21.x
cmp r2.x, r2, c21.y, c21
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c19
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c16.x, c16.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c16
add r2.x, r2, c21.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c17.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c25.x
mad r1.w, r0, c21.z, c21
mul r2.x, r2, c17
mad r2.x, r2, c28.y, r2.y
mad_pp r1.xyz, r2.x, r1, r0
abs r0.x, v5.y
add r0.z, -r0.x, c21.y
mad r0.y, r0.x, c21.z, c21.w
mad r0.y, r0, r0.x, c22.x
add r2.x, -r0.w, c21.y
mad r1.w, r0, r1, c22.x
rsq r0.z, r0.z
rsq r2.x, r2.x
add r6.z, r2, c25.y
mad r0.w, r0, r1, c22.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c21.x, c21.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c22.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.z, -r2.x, c22, r1.w
mad r0.x, r0, c22.w, r0.y
mad r0.y, r0.w, c22.w, r0.z
mul r0.w, r0.x, c23.x
mul r0.x, r0.y, c23
dsy r2.xy, v5
mul r2.xy, r2, r2
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r2.x, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c25.x
mul r4.z, r0.y, c25.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r2.xy, r2.wyzw, c25.w
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r8.w, c15.x, c15.x
mad_pp r3.xyz, r8.w, r0, r1
mul r6.xy, v5, c20.x
mul r0.xy, r2, c26
mov r2.w, r0
add r7.zw, r2, r0.xyxy
mul r5.xy, v5.zyzw, c20.x
mad r2.x, r7.w, c26.z, c26
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r7.x, r0, r1
frc r0.x, r2
mad r3.w, r0.x, c27.x, c27.y
mul r4.xy, v5.zxzw, c20.x
texld r0, r4, s5
add_pp r2, r0, -r1
sincos r0.xy, r3.w
mad r0.y, r7.z, c26.w, c26.x
frc r0.y, r0
mad r3.w, r0.y, c27.x, c27.y
mov_pp r9.y, r0.x
sincos r0.xy, r3.w
dp4 r7.z, c1, c1
rsq r0.z, r7.z
mov_pp r9.xz, r0.yyxw
mul r8.xyz, r0.z, c1
rcp r7.z, v3.w
dp3_sat r0.x, v4, r8
dp3_pp_sat r3.w, -r9, -c14
add_pp r0.y, r3.w, -r0.x
mad_pp r0.z, r8.w, r0.y, r0.x
mad r0.xy, v3, r7.z, c6
texld r0.x, r0, s9
mad r8.xy, v3, r7.z, c5
mov r0.w, r0.x
texld r0.x, r8, s9
mul_pp r7.w, r0.z, c7
mad r8.xy, v3, r7.z, c4
mov r0.z, r0.x
texld r0.x, r8, s9
mad r8.xy, v3, r7.z, c3
mov r0.y, r0.x
texld r0.x, r8, s9
mad r0, -v3.z, r7.z, r0
mov r8.x, c2
cmp r0, r0, c21.y, r8.x
dp4_pp r0.y, r0, c27.w
rcp r7.z, v2.w
mad r8.xy, v2, r7.z, c25.y
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c25.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c12
add_sat r2.w, r1, -r2
add r1.xyz, c7, r1.x
mul_pp_sat r2.x, r7.w, c22.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c27.z
mul_pp r2.w, r2, c7
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c13.x
mad_pp r3.xyz, r0, c8, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c28
add_pp r1.x, -r1, c21.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c28.z
mad_sat r1.w, r0, c29.x, c29.y
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
mul r2.xy, v5, c10.x
abs r7.zw, v5.xyxy
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c9.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r7.z, r0, r1
mul r0.xy, v5.zxzw, c9.x
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r7.w, r3, r2
max r0.x, r7.z, r0.w
rcp r0.y, r0.x
min r0.x, r7.z, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c23, c23.z
mad r0.y, r0, r0.x, c23.w
mad r0.y, r0, r0.x, c24.x
mad r0.y, r0, r0.x, c24
add_pp r2.xyz, r2, c25.w
mul r0.z, v1.w, c11.x
mad r1.y, r0, r0.x, c24.z
mul_sat r8.w, c15.x, c15.x
mul_sat r0.z, r0, c22
mul_pp r2.xyz, r2, c27.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c18
add r2.y, -r2.x, c24.w
add r1.w, r7.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c22.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c16
cmp r2.y, r2.w, c21, c21.x
cmp r2.x, r2, c21.y, c21
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c19
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c16.x, c16.x, -r3.x
cmp r1.w, v5.x, r1, -r1
mul r3.x, r1.w, c25
mad r1.w, r0, c21.z, c21
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c16
add r2.x, r2, c21.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
add r6.z, r3.x, c25.y
mul_sat r2.y, r2.z, c17.x
mul r2.x, r2, c17
mad r2.x, r2, c28.y, r2.y
mad_pp r0.xyz, r2.x, r1, r0
abs r1.x, v5.y
add r1.z, -r1.x, c21.y
mad r1.y, r1.x, c21.z, c21.w
mad r1.y, r1, r1.x, c22.x
add r2.x, -r0.w, c21.y
mad r1.w, r0, r1, c22.x
mad r0.w, r0, r1, c22.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c21.x, c21.y
mad r1.x, r1.y, r1, c22.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c21, c21.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c22.z, r1.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c22.z, r2.x
mad r0.w, r1.x, c22, r0
mul r3.z, r0.w, c23.x
mad r1.x, r1.w, c22.w, r1.y
mul r0.w, r1.x, c23.x
dsx r1.xy, v5
dsy r2.xy, v5
mul r1.xy, r1, r1
mov r6.w, r3.z
dsx r5.w, r0
dsy r1.w, r0
add r0.w, r1.x, r1.y
mul r2.xy, r2, r2
add r1.x, r2, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r5.z, r0.w, c25.x
mul r1.z, r1.x, c25.x
texldd r3.yw, r6.zwzw, s6, r5.zwzw, r1.zwzw
add r1.xy, r3.wyzw, c25.w
texldd r2.xyz, r6.zwzw, s0, r5.zwzw, r1.zwzw
add_pp r2.xyz, r2, -r0
mad_pp r4.xyz, r8.w, r2, r0
mul r7.xy, v5, c20.x
mul r6.xy, v5.zyzw, c20.x
texld r2, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r2
mad_pp r2, r7.z, r0, r2
mov r3.y, r3.z
mul r1.xy, r1, c26
add r1.xy, r3, r1
mad r0.x, r1.y, c26.z, c26
frc r1.y, r0.x
mul r5.xy, v5.zxzw, c20.x
texld r0, r5, s5
add_pp r3, r0, -r2
mad r1.y, r1, c27.x, c27
sincos r0.xy, r1.y
mad r1.x, r1, c26.w, c26
frc r0.y, r1.x
rcp r1.y, v3.w
mad r1.x, r0.y, c27, c27.y
mov_pp r8.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r8.xz, r0.yyxw
dp3_pp_sat r4.w, -r8, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v4, r0
add_pp r1.x, r4.w, -r0.w
mad_pp r0.w, r8, r1.x, r0
mad r0.xyz, v3, r1.y, c6
mad r8.xyz, v3, r1.y, c4
texld r1.x, r8, s9
mad r8.xyz, v3, r1.y, c3
texld r0.x, r0, s9
mul_pp r8.w, r0, c7
mov_pp r0.w, r0.x
mad r0.xyz, v3, r1.y, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c21.y, -r0
texld r0.x, r8, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.w
rcp r1.x, v2.w
mad r1.xy, v2, r1.x, c25.y
texld r0.w, r1, s7
dp3 r0.x, v2, v2
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r8.x, r0, r0.y
mad_pp r0, r7.w, r3, r2
mul_pp r1.x, r8, r8.w
mul_pp_sat r2.w, r1.x, c22.z
mov r1.y, c12.x
add r2.xyz, c7, r1.y
add r1.x, v0.w, c25.z
mad_sat r2.xyz, r2, r2.w, c0
mul_pp r2.xyz, r2, v6.x
frc r1.y, r1.x
add_sat r2.w, r1.x, -r1.y
texldd r1, r6.zwzw, s3, r5.zwzw, r1.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c27.z
mul_pp r2.w, r2, c7
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c13.x
mad_pp r4.xyz, r0, c8, r3
texld r0, r7, s4
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r7.z, r3, r0
texld r3, r5, s4
add_pp r3, r3, -r0
mad_pp r0, r7.w, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c28
add_pp r1.x, -r1, c21.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 215 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c27.z
mad_sat r1.w, r0, c28.x, c28.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
mul r2.xy, v5, c7.x
abs r9.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c6.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r9.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r9.y, r3, r2
max r0.x, r9, r0.w
rcp r0.y, r0.x
min r0.x, r9, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c20, c20.z
mad r0.y, r0, r0.x, c20.w
mad r0.y, r0, r0.x, c21.x
mad r0.y, r0, r0.x, c21
add_pp r2.xyz, r2, c22.w
mul r0.z, v1.w, c8.x
mad r1.y, r0, r0.x, c21.z
mul_sat r3.w, c12.x, c12.x
mul_sat r0.z, r0, c19
mul_pp r2.xyz, r2, c25.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c15
add r2.y, -r2.x, c21.w
add r1.w, r9.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c19.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c13
cmp r2.y, r2.w, c18, c18.x
cmp r2.x, r2, c18.y, c18
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c16
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c13.x, c13.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c13
add r2.x, r2, c18.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c14.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c22.x
mad r1.w, r0, c18.z, c18
mul r2.x, r2, c14
mad r2.x, r2, c27.y, r2.y
mad_pp r1.xyz, r2.x, r1, r0
abs r0.x, v5.y
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
rsq r0.z, r0.z
rsq r2.x, r2.x
add r8.z, r2, c22.y
mad r0.w, r0, r1, c19.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c18.x, c18.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.z, -r2.x, c19, r1.w
mad r0.x, r0, c19.w, r0.y
mad r0.y, r0.w, c19.w, r0.z
mul r0.w, r0.x, c20.x
mul r0.x, r0.y, c20
dsy r2.xy, v5
mul r2.xy, r2, r2
mov r8.w, r0
dsx r7.w, r0.x
dsy r6.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r2.x, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r7.z, r0.x, c22.x
mul r6.z, r0.y, c22.x
texldd r2.yw, r8.zwzw, s6, r7.zwzw, r6.zwzw
add r2.xy, r2.wyzw, c22.w
texldd r0.xyz, r8.zwzw, s0, r7.zwzw, r6.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r4.xyz, r3.w, r0, r1
mul r8.xy, v5, c17.x
mul r0.xy, r2, c23
mov r2.w, r0
add r3.xy, r2.zwzw, r0
mul r7.xy, v5.zyzw, c17.x
mad r2.x, r3.y, c23.z, c23
texld r1, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r9.x, r0, r1
frc r0.x, r2
mad r3.y, r0.x, c24.x, c24
mul r6.xy, v5.zxzw, c17.x
texld r0, r6, s5
add_pp r2, r0, -r1
sincos r0.xy, r3.y
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
mov_pp r5.y, r0.x
mad r3.x, r0.y, c24, c24.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v4, r3
dp3_pp_sat r4.w, -r5, -c11
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r3.w, r3, r0.w
mul_pp r9.z, r3.x, c4.w
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
dp4 r5.x, r0, c26
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r3, r0, c18.y, r3.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r3, c25.w
texld r0.x, r0.x, s8
mul r5.x, r0, r0.y
mad_pp r0, r9.y, r2, r1
add r1.w, v0, c22.z
mul_pp r3.x, r5, r9.z
frc r2.w, r1
mov r1.x, c9
add_sat r2.w, r1, -r2
mul_pp_sat r2.x, r3, c19.z
add r1.xyz, c4, r1.x
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r8.zwzw, s3, r7.zwzw, r6.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c10.x
mad_pp r4.xyz, r0, c5, r3
texld r0, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r0
mad_pp r0, r9.x, r3, r0
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r9.y, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r5.x
mul_pp_sat r1.x, r2.w, c27
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c27.z
mad_sat r1.w, r0, c28.x, c28.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
mul r2.xy, v5, c7.x
abs r9.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c6.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r9.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r9.y, r3, r2
max r0.x, r9, r0.w
rcp r0.y, r0.x
min r0.x, r9, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c20, c20.z
mad r0.y, r0, r0.x, c20.w
mad r0.y, r0, r0.x, c21.x
mad r0.y, r0, r0.x, c21
add_pp r2.xyz, r2, c22.w
mul r0.z, v1.w, c8.x
mad r1.y, r0, r0.x, c21.z
mul_sat r3.w, c12.x, c12.x
mul_sat r0.z, r0, c19
mul_pp r2.xyz, r2, c25.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c15
add r2.y, -r2.x, c21.w
add r1.w, r9.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c19.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c13
cmp r2.y, r2.w, c18, c18.x
cmp r2.x, r2, c18.y, c18
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c16
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c13.x, c13.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c13
add r2.x, r2, c18.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c14.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c22.x
mad r1.w, r0, c18.z, c18
mul r2.x, r2, c14
mad r2.x, r2, c27.y, r2.y
mad_pp r0.xyz, r2.x, r1, r0
abs r1.x, v5.y
add r1.z, -r1.x, c18.y
mad r1.y, r1.x, c18.z, c18.w
mad r1.y, r1, r1.x, c19.x
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
mad r0.w, r0, r1, c19.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r8.z, r2, c22.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c18.x, c18.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c19.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c18, c18.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c19.z, r1.y
mad r0.w, r1.x, c19, r0
mad r1.y, -r2, c19.z, r2.x
mul r3.x, r0.w, c20
mad r1.x, r1.w, c19.w, r1.y
mul r0.w, r1.x, c20.x
dsx r1.xy, v5
dsy r1.zw, v5.xyxy
mul r1.xy, r1, r1
mul r1.zw, r1, r1
mov r8.w, r3.x
dsx r7.w, r0
dsy r6.w, r0
add r0.w, r1.x, r1.y
add r1.x, r1.z, r1.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r7.z, r0.w, c22.x
mul r6.z, r1.x, c22.x
texldd r2.yw, r8.zwzw, s6, r7.zwzw, r6.zwzw
add r2.xy, r2.wyzw, c22.w
texldd r1.xyz, r8.zwzw, s0, r7.zwzw, r6.zwzw
add_pp r1.xyz, r1, -r0
mad_pp r4.xyz, r3.w, r1, r0
mul r8.xy, v5, c17.x
mul r7.xy, v5.zyzw, c17.x
mov r2.w, r3.x
mul r2.xy, r2, c23
add r3.xy, r2.zwzw, r2
texld r1, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r9.x, r0, r1
mad r0.x, r3.y, c23.z, c23
frc r3.y, r0.x
mul r6.xy, v5.zxzw, c17.x
texld r0, r6, s5
add_pp r2, r0, -r1
mad r3.y, r3, c24.x, c24
sincos r0.xy, r3.y
mad r3.x, r3, c23.w, c23
frc r0.y, r3.x
mad r3.x, r0.y, c24, c24.y
mov_pp r3.y, r0.x
sincos r0.xy, r3.x
dp4 r0.z, c1, c1
mov_pp r3.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r4.w, -r3, -c11
mul r0.xyz, r0.z, c1
dp3_sat r3.x, v4, r0
add_pp r3.y, r4.w, -r3.x
mad_pp r9.z, r3.w, r3.y, r3.x
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
dp4 r5.x, r0, c26
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r0, r0, c18.y, r3.x
dp4_pp r0.y, r0, c25.w
dp3 r0.x, v2, v2
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r5.x, r0, r0.y
mad_pp r0, r9.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r3.x, r9.z, c4.w
mul_pp r3.x, r5, r3
mov r1.x, c9
add_sat r2.w, r1, -r2
mul_pp_sat r2.x, r3, c19.z
add r1.xyz, c4, r1.x
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r8.zwzw, s3, r7.zwzw, r6.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c10.x
mad_pp r4.xyz, r0, c5, r3
texld r0, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r0
mad_pp r0, r9.x, r3, r0
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r9.y, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r5.x
mul_pp_sat r1.x, r2.w, c27
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 198 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r1.w, v4.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.z, c23
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c18.y, c18.z
mad r3.y, r1.x, r3.x, c18.w
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r3.y, r3, r3.x, c19.x
mad r0.x, r3.y, r3, c19.y
mad r0.x, r0, r3, c19.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c16.y
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add_pp r1.xyz, r1, c20.w
rsq r2.x, r2.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v1.w, c6.x
cmp r0.x, v4, r0, -r0
mul r3.z, r0.x, c20.x
abs r0.x, v4.y
mul_sat r0.y, r0.z, c17.z
add r0.z, -r0.x, c16.y
mul_pp r1.xyz, r1, c24.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
add r6.x, r3.z, c20.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v4.z, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c17, r1.w
mul r1.w, r0.x, c18.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
add r1.xyz, v0, r1
dsy r0.zw, v4.xyxy
mul r0.zw, r0, r0
mov r6.y, r1.w
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c20.x
mul r4.z, r0.y, c20.x
texldd r0.yw, r6, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c20.w
mov r0.xyz, v7
dp3 r0.w, v6, r0
dp3 r2.w, v6, v6
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c21
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
mad r1.w, r4.y, c21.z, c21.x
cmp r0.y, r0.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.x, r0, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r3.w, c10.x, c10.x
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r3.w, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r4.xy, v4.zyzw, c15.x
dp3_sat r7.w, v3, r1
dp3_pp_sat r7.z, -r2, -c9
mul r5.xy, v4, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mad_pp r1, r6.w, r1, r2
add_pp r8.x, r7.z, -r7.w
mad_pp r0.y, r3.w, r8.x, r7.w
add r2.w, v0, c20.z
frc r3.w, r2
dp3 r0.x, v2, v2
add_sat r3.w, r2, -r3
texld r0.x, r0.x, s7
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.z, r0.y, c17
mov r0.y, c7.x
add r2.xyz, c2, r0.y
mad_sat r0.yzw, r2.xxyz, r0.z, c0.xxyz
texldd r2, r6, s3, r5.zwzw, r4.zwzw
mul_pp r2.w, r2, r3
mul_pp r1, r2, r1
mul_pp r0.yzw, r0, v5.x
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r1.w, r1, r3
texld r3, r4, s4
mul r8.xyz, r0.yzww, c8.x
mad_pp r8.xyz, r1, c3, r8
texld r1, r5, s4
add_pp r3, r3, -r1
mad_pp r1, r6.z, r3, r1
add_pp r4.x, r7.z, c22.z
texld r3, r7, s4
add_pp r3, r3, -r1
mul_pp r4.x, r4, c2.w
mad_pp r1, r6.w, r3, r1
mul_pp r1, r2, r1
mul_pp r0.x, r4, r0
mul_pp_sat r0.x, r0, c22.w
add_pp r0.x, -r0, c16.y
mad_pp r1.xyz, -r8, r0.yzww, r1
mul_pp r2.xyz, r8, r0.yzww
mul_pp r0.x, r1.w, r0
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
"ps_3_0
; 195 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.x
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.xyz
dcl_texcoord9 v7.xyz
mov r0.xyz, v3
dp3_sat r0.w, v1, -r0
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
add r0.w, r0, c23.y
mul r2.xy, v3, c5.x
abs r6.zw, v3.xyxy
abs r1.w, v3.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c23.z, c23
mad r0.xyz, r0.w, r3, r0
mul r1.xy, v3, c4.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r6.z, r0, r1
mul r0.xy, v3.zxzw, c4.x
mul r1.xy, v3.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
max r2.w, r6.z, r1
mad_pp r2.xyz, r6.w, r0, r2
mul r1.z, v1.w, c6.x
add_pp r2.xyz, r2, c20.w
rcp r1.x, r2.w
min r0.w, r6.z, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r0.x, r1, c18.y, c18.z
mad r1.y, r0.x, r1.x, c18.w
mad r1.y, r1, r1.x, c19.x
mad r1.y, r1, r1.x, c19
mul_pp r0.xyz, r2, c24.x
mul_sat r1.z, r1, c17
mad_pp r0.xyz, r1.z, -r0, r0
mad r1.x, r1.y, r1, c19.z
mul r2.x, r1, r0.w
add r0.xyz, v0, r0
add_pp r1.xyz, -r0, c13
add r2.y, -r2.x, c19.w
add r0.w, r6.z, -r1
cmp r0.w, -r0, r2.x, r2.y
mov r2.xyz, v6
dp3 r2.w, v5, r2
add r2.x, -r0.w, c17.w
cmp r0.w, v3.z, r0, r2.x
dp3 r3.x, v5, v5
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c11
cmp r0.w, v3.x, r0, -r0
mul r6.x, r0.w, c20
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add r4.z, r6.x, c20.y
cmp r2.y, r2.w, c16, c16.x
cmp r2.x, r2, c16.y, c16
mul_pp r3.y, r2.x, r2
add r2.xyz, v7, -c14
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c11.x, c11.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c11
add r2.x, r2, c16.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mad r0.w, r1, r0, c17.y
mul_sat r2.y, r2.z, c12.x
mul r2.x, r2, c12
mad r2.x, r2, c23, r2.y
mad_pp r2.xyz, r2.x, r1, r0
abs r0.x, v3.y
add r0.z, -r0.x, c16.y
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
add r1.x, -r1.w, c16.y
rsq r0.z, r0.z
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v3.z, c16.x, c16.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mul r3.w, r0.x, c18.x
mul r1.y, r0.w, r1.x
mad r0.z, -r1.y, c17, r1.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
dsy r1.xy, v3
dsx r4.y, r0.x
dsy r0.w, r0.x
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.x, r0, c20
mul r0.z, r0.y, c20.x
mov r4.w, r3
texldd r1.xyz, r4.zwzw, s0, r4, r0.zwzw
texldd r8.yw, r4.zwzw, s6, r4, r0.zwzw
add_pp r1.xyz, r1, -r2
mul_sat r5.w, c10.x, c10.x
mad_pp r3.xyz, r5.w, r1, r2
mul r7.xy, v3, c15.x
mul r0.xy, v3.zyzw, c15.x
mov r6.y, r3.w
texld r2, r7, s5
texld r1, r0, s5
add_pp r1, r1, -r2
mad_pp r2, r6.z, r1, r2
add r5.xy, r8.wyzw, c20.w
mul r1.xy, r5, c21
add r5.xy, r6, r1
mul r6.xy, v3.zxzw, c15.x
mad r3.w, r5.y, c21.z, c21.x
texld r1, r6, s5
add_pp r1, r1, -r2
frc r3.w, r3
mad_pp r1, r6.w, r1, r2
mad r3.w, r3, c22.x, c22.y
sincos r2.xy, r3.w
mad r5.x, r5, c21.w, c21
frc r2.y, r5.x
mad r3.w, r2.y, c22.x, c22.y
mov_pp r5.y, r2.x
sincos r2.xy, r3.w
dp4_pp r2.z, c1, c1
mov_pp r5.xz, r2.yyxw
rsq_pp r2.z, r2.z
mul_pp r2.xyz, r2.z, c1
dp3_sat r2.z, v2, r2
dp3_pp_sat r3.w, -r5, -c9
add_pp r2.w, r3, -r2.z
add r2.x, v0.w, c20.z
frc r2.y, r2.x
mad_pp r5.x, r5.w, r2.w, r2.z
add_sat r5.y, r2.x, -r2
texldd r2, r4.zwzw, s3, r4, r0.zwzw
mul_pp r2.w, r2, r5.y
mul_pp r1, r2, r1
add_pp r1.xyz, r1, -r3
mul_pp r0.w, r5.x, c2
mov r0.z, c7.x
mad_pp r3.xyz, r1.w, r1, r3
texld r1, r7, s4
mul_pp_sat r0.w, r0, c17.z
add r4.xyz, c2, r0.z
mad_sat r4.xyz, r4, r0.w, c0
mul_pp r4.xyz, r4, v4.x
mul r5.xyz, r4, c8.x
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r6.z, r0, r1
texld r1, r6, s4
add_pp r1, r1, -r0
mad_pp r0, r6.w, r1, r0
add_pp r3.w, r3, c22.z
mul_pp r1.x, r3.w, c2.w
mul_pp_sat r1.x, r1, c22.w
mul_pp r0, r2, r0
mad_pp r3.xyz, r3, c3, r5
add_pp r1.x, -r1, c16.y
mad_pp r0.xyz, -r3, r4, r0
mul_pp r2.xyz, r3, r4
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
"ps_3_0
; 203 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
abs r1.w, v4.z
max r2.w, r6.z, r1
rcp r3.x, r2.w
min r2.w, r6.z, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c23.z, c23
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v4, c4.x
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r2, r0
mad r1.x, r3, c18.y, c18.z
mad r3.y, r1.x, r3.x, c18.w
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
mul_sat r7.z, c10.x, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
mad r3.y, r3, r3.x, c19.x
mad r0.x, r3.y, r3, c19.y
mad r0.x, r0, r3, c19.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c16.y
mad r0.w, r1, c16.z, c16
mad r0.w, r1, r0, c17.x
add_pp r1.xyz, r1, c20.w
rsq r2.x, r2.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
mul r0.z, v1.w, c6.x
cmp r0.x, v4, r0, -r0
mul r3.z, r0.x, c20.x
abs r0.x, v4.y
mul_sat r0.y, r0.z, c17.z
add r0.z, -r0.x, c16.y
mul_pp r1.xyz, r1, c24.x
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c16.z, c16.w
mad r0.y, r0, r0.x, c17.x
rsq r0.z, r0.z
add r6.x, r3.z, c20.y
mad r0.x, r0.y, r0, c17.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v4.y, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c17.z, r0
mad r0.x, r0, c17.w, r0.y
mad r0.w, r1, r0, c17.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v4.z, c16.x, c16.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c17, r1.w
mul r1.w, r0.x, c18.x
mad r0.y, r0.w, c17.w, r0.z
mul r0.x, r0.y, c18
add r1.xyz, v0, r1
dsy r0.zw, v4.xyxy
mul r0.zw, r0, r0
dsy r4.w, r0.x
dsx r5.w, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.y, c20.x
mov r6.y, r1.w
mul r5.z, r0.x, c20.x
texldd r0.yw, r6, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c20.w
mov r0.xyz, v7
dp3 r0.w, v6, r0
dp3 r2.w, v6, v6
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c21
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
mad r1.w, r4.y, c21.z, c21.x
cmp r0.y, r0.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.x, r0, r0.y
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r7.z, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c21.w, c21.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c22, c22.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r4.xy, v4.zyzw, c15.x
dp3_sat r7.w, v3, r1
dp3_pp_sat r3.w, -r2, -c9
mul r5.xy, v4, c15.x
add_pp r8.x, r3.w, -r7.w
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mad_pp r0.y, r7.z, r8.x, r7.w
rcp r0.x, v2.w
mad r8.xy, v2, r0.x, c20.y
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r0.z, -v2, c16.x, c16.y
mul_pp r0.y, r0, c2.w
texld r0.x, r0.x, s8
mul_pp r0.z, r0, r0.w
mul_pp r7.z, r0, r0.x
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v5.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 199 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_cube s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mad_sat r2.w, r0, c23.z, c23
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r6.zw, v4.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v4.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c18, c18.z
mad r3.y, r3, r3.x, c18.w
mad r3.y, r3, r3.x, c19.x
mul r1.xy, v4, c5.x
mul r0.xy, v4, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v4.zxzw, c5.x
mul r0.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
add_pp r1.xyz, r1, c20.w
mad r3.y, r3, r3.x, c19
mad r0.x, r3.y, r3, c19.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c16.z, c16
mul_pp r2.xyz, r1, c24.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v4.z, r0, r0.y
cmp r1.x, v4, r0, -r0
mul r3.z, r1.x, c20.x
abs r1.x, v4.y
mul r0.y, v1.w, c6.x
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
mul_sat r0.x, r0.y, c17.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c16.y
mad r1.w, r0, r1, c17.x
mad r0.w, r0, r1, c17.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.x, r3.z, c20.y
mul r2.x, r0.w, r2
cmp r1.w, v4.z, c16.x, c16.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v4.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c17.z, r1.y
mad r0.w, r1.x, c17, r0
mul r0.w, r0, c18.x
mad r1.y, -r2, c17.z, r2.x
mad r1.x, r1.w, c17.w, r1.y
mul r1.x, r1, c18
dsy r1.zw, v4.xyxy
mul r1.zw, r1, r1
dsy r4.w, r1.x
dsx r5.w, r1.x
dsx r1.xy, v4
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.y, c20.x
mul r5.z, r1.x, c20.x
mov r6.y, r0.w
texldd r2.yw, r6, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c20.w
mul r3.xy, r0, c21
mov r0.xyz, v7
mov r3.w, r0
dp3 r1.w, v6, r0
dp3 r2.w, v6, v6
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c21.z, c21
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
cmp r0.y, r1.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.y, r0.x, r0
add r0.xyz, v8, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c21.w, c21.x
frc r0.y, r0
mov_pp r7.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r7.xz, r0.yyxw
dp3_pp_sat r3.w, -r7, -c9
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v3, r3
mul_sat r0.x, c10, c10
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v4, c15.x
mad_pp r7.z, r0.x, r0, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v4.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
dp3 r0.x, v2, v2
mul_pp r0.y, r7.z, c2.w
texld r0.w, v2, s8
texld r0.x, r0.x, s7
mul r7.z, r0.x, r0.w
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v5.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 196 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r1.w, v4.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r2.w, r0, c23.z, c23
abs r0.zw, v4.xyxy
mad r3.xyz, r2.w, r2, r1
max r0.x, r0.z, r1.w
mul r1.xy, v4, c5.x
min r0.y, r0.z, r1.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r0.xy, v4, c4.x
mul r4.x, r3.w, r3.w
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r0.x, r4, c18.y, c18.z
mad r0.x, r0, r4, c18.w
mad r4.y, r0.x, r4.x, c19.x
mul r0.xy, v4.zxzw, c4.x
texld r2.xyz, r0, s2
mad r0.x, r4.y, r4, c19.y
mad r0.x, r0, r4, c19.z
mul r0.y, r0.x, r3.w
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c20.w
dsx r4.xy, v4
dsy r3.zw, v4.xyxy
mul_pp r1.xyz, r1, c24.x
mul r4.xy, r4, r4
add r2.x, r0.z, -r1.w
add r0.x, -r0.y, c19.w
cmp r0.y, -r2.x, r0, r0.x
add r0.x, -r0.y, c17.w
cmp r0.y, v4.z, r0, r0.x
mul r0.x, v1.w, c6
mul_sat r0.x, r0, c17.z
mad_pp r2.xyz, r0.x, -r1, r1
abs r1.y, v4
cmp r0.y, v4.x, r0, -r0
mul r0.x, r0.y, c20
add r0.y, -r1, c16
mad r1.x, r1.y, c16.z, c16.w
mad r1.x, r1, r1.y, c17
mad r1.x, r1, r1.y, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.w, r1.x, r0.y
cmp r3.y, v4, c16.x, c16
mul r1.z, r3.y, r2.w
mad r1.z, -r1, c17, r2.w
add r0.y, -r1.w, c16
mad r1.x, r1.w, c16.z, c16.w
mad r1.x, r1.w, r1, c17
rsq r0.y, r0.y
add r3.x, r0, c20.y
cmp r1.y, v4.z, c16.x, c16
mad r1.z, r3.y, c17.w, r1
rcp r0.y, r0.y
mad r1.x, r1.w, r1, c17.y
mul r1.x, r1, r0.y
mul r0.y, r1, r1.x
mad r0.y, -r0, c17.z, r1.x
mad r1.x, r1.y, c17.w, r0.y
mul r0.y, r1.z, c18.x
mul r1.x, r1, c18
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
mov r3.y, r0
dsx r1.y, r1.x
dsy r1.w, r1.x
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rcp r2.w, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2.w, c20
mul r1.z, r1, c20.x
texldd r4.yw, r3, s6, r1, r1.zwzw
add r3.zw, r4.xywy, c20.w
mul r3.zw, r3, c21.xyxy
add r0.xy, r0, r3.zwzw
add r2.xyz, v0, r2
mov r5.xyz, v7
dp3 r2.w, v6, r5
dp3 r4.w, v6, v6
mad r4.w, -r2, r2, r4
rsq r3.z, r4.w
rcp r4.w, r3.z
add r3.w, -r4, c11.x
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
mad r0.x, r0, c21.w, c21
add_pp r4.xyz, -r2, c13
cmp r3.z, r2.w, c16.y, c16.x
cmp r3.w, r3, c16.y, c16.x
mul_pp r3.w, r3, r3.z
mul r3.z, r4.w, r4.w
add r5.xyz, v8, -c14
dp3 r4.w, r5, r5
mad r0.y, r0, c22.x, c22
sincos r5.xy, r0.y
frc r0.x, r0
mad r0.y, r0.x, c22.x, c22
mov_pp r6.y, r5.x
sincos r5.xy, r0.y
mov_pp r6.xz, r5.yyxw
mad r3.z, c11.x, c11.x, -r3
rsq r4.w, r4.w
rsq r3.z, r3.z
rcp r3.z, r3.z
add r2.w, r2, -r3.z
cmp r2.w, -r3, v1, r2
rcp r4.w, r4.w
add r4.w, -r4, c11.x
add r4.w, r4, c16.y
frc r3.z, r4.w
add_sat r3.z, r4.w, -r3
add r2.w, v1, -r2
dp4_pp r0.x, c1, c1
rsq_pp r0.x, r0.x
mul_pp r7.xyz, r0.x, c1
dp3_sat r0.y, v3, r7
mul r3.z, r3, c12.x
mul_sat r2.w, r2, c12.x
mad r2.w, r3.z, c23.x, r2
mad_pp r2.xyz, r2.w, r4, r2
texldd r4.xyz, r3, s0, r1, r1.zwzw
dp3_pp_sat r2.w, -r6, -c9
add_pp r0.x, r2.w, -r0.y
mul r5.xy, v4, c15.x
texld r6, r5, s5
add_pp r2.w, r2, c22.z
texldd r1, r3, s3, r1, r1.zwzw
add_pp r4.xyz, r4, -r2
mul_sat r3.z, c10.x, c10.x
mad_pp r2.xyz, r3.z, r4, r2
mad_pp r3.z, r3, r0.x, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
mad_pp r6, r0.z, r7, r6
mul r0.xy, v4.zxzw, c15.x
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mov r4.w, c7.x
texld r5, r5, s4
texld r3.w, v2, s7
mul_pp r3.z, r3, c2.w
mul_pp r3.z, r3.w, r3
mul_pp_sat r4.z, r3, c17
add r7.xyz, c2, r4.w
add r3.z, v0.w, c20
frc r4.w, r3.z
add_sat r3.z, r3, -r4.w
mul_pp r1.w, r1, r3.z
mad_sat r7.xyz, r7, r4.z, c0
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r5, r5, -r4
mul_pp r2.w, r2, c2
mad_pp r0, r0.w, r5, r4
mul_pp r6, r1, r6
mul_pp r3.xyz, r7, v5.x
add_pp r7.xyz, r6, -r2
mul_pp r0, r1, r0
mul_pp r2.w, r2, r3
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.w, -r1.x, c16.y
mul r6.xyz, r3, c8.x
mad_pp r2.xyz, r6.w, r7, r2
mad_pp r2.xyz, r2, c3, r6
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 208 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c25, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c24.y
mad_sat r2.w, r0, c24.z, c24
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c19, c19.z
mad r3.y, r3, r3.x, c19.w
mad r3.y, r3, r3.x, c20.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c21.w
mad r3.y, r3, r3.x, c20
mad r0.x, r3.y, r3, c20.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c17.z, c17
mul_pp r2.xyz, r1, c25.x
add r0.z, -r0.y, c20.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c21.x
abs r1.x, v5.y
mul r0.y, v1.w, c7.x
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
mul_sat r0.x, r0.y, c18.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c17.y
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c21.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c21.x
mul r4.z, r1.y, c21.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c21.w
mul r3.xy, r0, c22
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c22.z, c22
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c12
add_pp r2.xyz, -r1, c14
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c12.x, c12.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c23.x, c23.y
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c24, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c22.w, c22.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c23.x, c23.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c10
mul_sat r0.x, c11, c11
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5.zyzw, c16.x
mad_pp r7.z, r0.x, r0, r0.y
mul r6.xy, v5, c16.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c16.x
texld r0, r4, s5
add_pp r2, r0, -r1
mul_pp r0.y, r7.z, c3.w
texldp r0.x, v3, s9
rcp r0.z, v3.w
mad r0.z, -v3, r0, r0.x
mov r0.w, c2.x
rcp r0.x, v2.w
mad r8.xy, v2, r0.x, c21.y
cmp r0.z, r0, c17.y, r0.w
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r7.z, -v2, c17.x, c17.y
mul_pp r0.w, r7.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r7.z, r0.x, r0
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c21.z
frc r2.w, r1
mov r1.x, c8
add_sat r2.w, r1, -r2
add r1.xyz, c3, r1.x
mul_pp_sat r2.x, r7.w, c18.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c23.z
mul_pp r2.w, r2, c3
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c9.x
mad_pp r3.xyz, r0, c4, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c23.w
add_pp r1.x, -r1, c17.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Vector 10 [_SunDir]
Float 11 [_PlanetOpacity]
Float 12 [_OceanRadius]
Float 13 [_OceanDepthFactor]
Vector 14 [_OceanColor]
Vector 15 [_PlanetOrigin]
Float 16 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 207 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c17, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c22, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c23, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c24, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c25, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c24.y
mad_sat r2.w, r0, c24.z, c24
mul r0.xy, v5.zyzw, c6.x
mul r1.xy, v5.zyzw, c5.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c19, c19.z
mad r3.y, r3, r3.x, c19.w
mad r3.y, r3, r3.x, c20.x
mul r1.xy, v5, c6.x
mul r0.xy, v5, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c6.x
mul r0.xy, v5.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c21.w
mad r3.y, r3, r3.x, c20
mad r0.x, r3.y, r3, c20.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c17.z, c17
mul_pp r2.xyz, r1, c25.x
add r0.z, -r0.y, c20.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c18.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c21.x
abs r1.x, v5.y
mul r0.y, v1.w, c7.x
add r1.z, -r1.x, c17.y
mad r1.y, r1.x, c17.z, c17.w
mad r1.y, r1, r1.x, c18.x
mul_sat r0.x, r0.y, c18.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c17.y
mad r1.w, r0, r1, c18.x
mad r0.w, r0, r1, c18.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c21.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c17.x, c17.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c18.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c17, c17.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c18.z, r1.y
mad r0.w, r1.x, c18, r0
mul r0.w, r0, c19.x
mad r1.y, -r2, c18.z, r2.x
mad r1.x, r1.w, c18.w, r1.y
mul r1.x, r1, c19
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c21.x
mul r4.z, r1.y, c21.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c21.w
mul r3.xy, r0, c22
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c22.z, c22
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c12
add_pp r2.xyz, -r1, c14
cmp r0.y, r1.w, c17, c17.x
cmp r0.x, r0, c17.y, c17
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c15
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c12.x, c12.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c12
add r0.x, r0, c17.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c23.x, c23.y
mul_sat r0.y, r0.z, c13.x
mul r0.x, r0, c13
mad r0.x, r0, c24, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c22.w, c22.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c23.x, c23.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c10
mul_sat r0.x, c11, c11
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5.zyzw, c16.x
mad_pp r7.z, r0.x, r0, r0.y
mul r6.xy, v5, c16.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c16.x
texld r0, r4, s5
add_pp r2, r0, -r1
mul_pp r0.y, r7.z, c3.w
mov r0.x, c2
rcp r0.w, v2.w
mad r8.xy, v2, r0.w, c21.y
add r0.z, c17.y, -r0.x
texldp r0.x, v3, s9
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r7.z, -v2, c17.x, c17.y
mul_pp r0.w, r7.z, r0
texld r0.x, r0.x, s8
mul_pp r0.x, r0.w, r0
mul_pp r7.z, r0.x, r0
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c21.z
frc r2.w, r1
mov r1.x, c8
add_sat r2.w, r1, -r2
add r1.xyz, c3, r1.x
mul_pp_sat r2.x, r7.w, c18.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c23.z
mul_pp r2.w, r2, c3
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c9.x
mad_pp r3.xyz, r0, c4, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c23.w
add_pp r1.x, -r1, c17.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c17.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
"ps_3_0
; 196 ALU, 22 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.x
dcl_texcoord7 v6.xyz
dcl_texcoord8 v7.xyz
dcl_texcoord9 v8.xyz
mov r0.xyz, v4
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
abs r1.w, v4.z
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mad_sat r2.w, r0, c23.z, c23
abs r0.zw, v4.xyxy
mad r3.xyz, r2.w, r2, r1
max r0.x, r0.z, r1.w
mul r1.xy, v4, c5.x
min r0.y, r0.z, r1.w
rcp r0.x, r0.x
mul r3.w, r0.y, r0.x
mul r0.xy, v4, c4.x
mul r4.x, r3.w, r3.w
texld r2.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r2.xyz, r3, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r0.x, r4, c18.y, c18.z
mad r0.x, r0, r4, c18.w
mad r4.y, r0.x, r4.x, c19.x
mul r0.xy, v4.zxzw, c4.x
texld r2.xyz, r0, s2
mad r0.x, r4.y, r4, c19.y
mad r0.x, r0, r4, c19.z
mul r0.y, r0.x, r3.w
mul r1.xy, v4.zxzw, c5.x
texld r1.xyz, r1, s1
add r2.xyz, r2, -r1
mad r1.xyz, r2.w, r2, r1
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add_pp r1.xyz, r1, c20.w
dsx r4.xy, v4
dsy r3.zw, v4.xyxy
mul_pp r1.xyz, r1, c24.x
mul r4.xy, r4, r4
add r2.x, r0.z, -r1.w
add r0.x, -r0.y, c19.w
cmp r0.y, -r2.x, r0, r0.x
add r0.x, -r0.y, c17.w
cmp r0.y, v4.z, r0, r0.x
mul r0.x, v1.w, c6
mul_sat r0.x, r0, c17.z
mad_pp r2.xyz, r0.x, -r1, r1
abs r1.y, v4
cmp r0.y, v4.x, r0, -r0
mul r0.x, r0.y, c20
add r0.y, -r1, c16
mad r1.x, r1.y, c16.z, c16.w
mad r1.x, r1, r1.y, c17
mad r1.x, r1, r1.y, c17.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.w, r1.x, r0.y
cmp r3.y, v4, c16.x, c16
mul r1.z, r3.y, r2.w
mad r1.z, -r1, c17, r2.w
add r0.y, -r1.w, c16
mad r1.x, r1.w, c16.z, c16.w
mad r1.x, r1.w, r1, c17
rsq r0.y, r0.y
add r3.x, r0, c20.y
cmp r1.y, v4.z, c16.x, c16
mad r1.z, r3.y, c17.w, r1
rcp r0.y, r0.y
mad r1.x, r1.w, r1, c17.y
mul r1.x, r1, r0.y
mul r0.y, r1, r1.x
mad r0.y, -r0, c17.z, r1.x
mad r1.x, r1.y, c17.w, r0.y
mul r0.y, r1.z, c18.x
mul r1.x, r1, c18
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
mov r3.y, r0
dsx r1.y, r1.x
dsy r1.w, r1.x
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rcp r2.w, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2.w, c20
mul r1.z, r1, c20.x
texldd r4.yw, r3, s6, r1, r1.zwzw
add r3.zw, r4.xywy, c20.w
mul r3.zw, r3, c21.xyxy
add r0.xy, r0, r3.zwzw
add r2.xyz, v0, r2
mov r5.xyz, v7
dp3 r2.w, v6, r5
dp3 r4.w, v6, v6
mad r4.w, -r2, r2, r4
rsq r3.z, r4.w
rcp r4.w, r3.z
add r3.w, -r4, c11.x
mad r0.y, r0, c21.z, c21.x
frc r0.y, r0
mad r0.x, r0, c21.w, c21
add_pp r4.xyz, -r2, c13
cmp r3.z, r2.w, c16.y, c16.x
cmp r3.w, r3, c16.y, c16.x
mul_pp r3.w, r3, r3.z
mul r3.z, r4.w, r4.w
add r5.xyz, v8, -c14
dp3 r4.w, r5, r5
mad r0.y, r0, c22.x, c22
sincos r5.xy, r0.y
frc r0.x, r0
mad r0.y, r0.x, c22.x, c22
mov_pp r6.y, r5.x
sincos r5.xy, r0.y
mov_pp r6.xz, r5.yyxw
mad r3.z, c11.x, c11.x, -r3
rsq r4.w, r4.w
rsq r3.z, r3.z
rcp r3.z, r3.z
add r2.w, r2, -r3.z
cmp r2.w, -r3, v1, r2
rcp r4.w, r4.w
add r4.w, -r4, c11.x
add r4.w, r4, c16.y
frc r3.z, r4.w
add_sat r3.z, r4.w, -r3
add r2.w, v1, -r2
dp4_pp r0.x, c1, c1
rsq_pp r0.x, r0.x
mul_pp r7.xyz, r0.x, c1
dp3_sat r0.y, v3, r7
mul r3.z, r3, c12.x
mul_sat r2.w, r2, c12.x
mad r2.w, r3.z, c23.x, r2
mad_pp r2.xyz, r2.w, r4, r2
texldd r4.xyz, r3, s0, r1, r1.zwzw
dp3_pp_sat r2.w, -r6, -c9
add_pp r0.x, r2.w, -r0.y
mul r5.xy, v4, c15.x
texld r6, r5, s5
add_pp r2.w, r2, c22.z
texldd r1, r3, s3, r1, r1.zwzw
add_pp r4.xyz, r4, -r2
mul_sat r3.z, c10.x, c10.x
mad_pp r2.xyz, r3.z, r4, r2
mad_pp r3.z, r3, r0.x, r0.y
mul r4.xy, v4.zyzw, c15.x
texld r7, r4, s5
add_pp r7, r7, -r6
mad_pp r6, r0.z, r7, r6
mul r0.xy, v4.zxzw, c15.x
texld r7, r0, s5
add_pp r7, r7, -r6
mad_pp r6, r0.w, r7, r6
mov r4.z, c7.x
texld r5, r5, s4
texldp r8.x, v2, s7
mul_pp r3.z, r3, c2.w
mul_pp r3.z, r8.x, r3
mul_pp_sat r3.w, r3.z, c17.z
add r7.xyz, c2, r4.z
add r3.z, v0.w, c20
frc r4.z, r3
add_sat r3.z, r3, -r4
mul_pp r1.w, r1, r3.z
mad_sat r7.xyz, r7, r3.w, c0
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r0.z, r4, r5
texld r5, r0, s4
add_pp r5, r5, -r4
mul_pp r2.w, r2, c2
mad_pp r0, r0.w, r5, r4
mul_pp r6, r1, r6
mul_pp r3.xyz, r7, v5.x
add_pp r7.xyz, r6, -r2
mul_pp r0, r1, r0
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.w, -r1.x, c16.y
mul r6.xyz, r3, c8.x
mad_pp r2.xyz, r6.w, r7, r2
mad_pp r2.xyz, r2, c3, r6
mad_pp r0.xyz, -r2, r3, r0
mul_pp r1.xyz, r2, r3
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Vector 9 [_SunDir]
Float 10 [_PlanetOpacity]
Float 11 [_OceanRadius]
Float 12 [_OceanDepthFactor]
Vector 13 [_OceanColor]
Vector 14 [_PlanetOrigin]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] 2D
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 198 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c21, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c22, 6.28318501, -3.14159298, -0.01000214, 4.03944778
def c23, 15.00000000, -0.94999999, 32.00000000, 0.50000000
def c24, 0.25000000, 0, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c23.y
mad_sat r2.w, r0, c23.z, c23
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r6.zw, v5.xyxy
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r6.z, r0.w
rcp r0.y, r1.x
min r0.x, r6.z, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c18, c18.z
mad r3.y, r3, r3.x, c18.w
mad r3.y, r3, r3.x, c19.x
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.z, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r6.w, r1, r2
add_pp r1.xyz, r1, c20.w
mad r3.y, r3, r3.x, c19
mad r0.x, r3.y, r3, c19.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c16.z, c16
mul_pp r2.xyz, r1, c24.x
add r0.z, -r0.y, c19.w
add r0.x, r6.z, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c17.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c20.x
abs r1.x, v5.y
mul r0.y, v1.w, c6.x
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
mul_sat r0.x, r0.y, c17.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c16.y
mad r1.w, r0, r1, c17.x
mad r0.w, r0, r1, c17.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.x, r3.z, c20.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c16.x, c16.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c17.z, r1.y
mad r0.w, r1.x, c17, r0
mul r0.w, r0, c18.x
mad r1.y, -r2, c17.z, r2.x
mad r1.x, r1.w, c17.w, r1.y
mul r1.x, r1, c18
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsy r4.w, r1.x
dsx r5.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.y, c20.x
mul r5.z, r1.x, c20.x
mov r6.y, r0.w
texldd r2.yw, r6, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c20.w
mul r3.xy, r0, c21
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c21.z, c21
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c11
add_pp r2.xyz, -r1, c13
cmp r0.y, r1.w, c16, c16.x
cmp r0.x, r0, c16.y, c16
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c14
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c11.x, c11.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c11
add r0.x, r0, c16.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c22.x, c22.y
mul_sat r0.y, r0.z, c12.x
mul r0.x, r0, c12
mad r0.x, r0, c23, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c21.w, c21.x
frc r0.y, r0
mov_pp r7.y, r0.x
mad r1.w, r0.y, c22.x, c22.y
sincos r0.xy, r1.w
dp4_pp r2.w, c1, c1
rsq_pp r0.z, r2.w
mov_pp r7.xz, r0.yyxw
dp3_pp_sat r3.w, -r7, -c9
mul_pp r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
mul_sat r0.x, c10, c10
add_pp r0.z, r3.w, -r0.y
mad_pp r3.xyz, r0.x, r2, r1
mul r5.xy, v5, c15.x
mad_pp r7.z, r0.x, r0, r0.y
mul r4.xy, v5.zyzw, c15.x
texld r1, r5, s5
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r2, r6.z, r0, r1
mul r7.xy, v5.zxzw, c15.x
texld r0, r7, s5
add_pp r1, r0, -r2
mul_pp r0.y, r7.z, c2.w
texldp r0.x, v3, s7
texld r0.w, v2, s8
mul r7.z, r0.w, r0.x
mul_pp r7.w, r7.z, r0.y
mad_pp r0, r6.w, r1, r2
add r1.w, v0, c20.z
frc r2.w, r1
mov r1.x, c7
add_sat r2.w, r1, -r2
add r1.xyz, c2, r1.x
mul_pp_sat r2.x, r7.w, c17.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c22.z
mul_pp r2.w, r2, c2
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c8.x
mad_pp r3.xyz, r0, c3, r8
texld r0, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r6.z, r4, r0
texld r4, r7, s4
add_pp r4, r4, -r0
mad_pp r0, r6.w, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c22.w
add_pp r1.x, -r1, c16.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 207 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0.25000000
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c26.z
mul r1.xy, v5.zyzw, c7.x
mul r0.xy, v5.zyzw, c6.x
abs r7.xy, v5
abs r1.w, v5.z
max r2.w, r7.x, r1
rcp r3.x, r2.w
min r2.w, r7.x, r1
mul r2.w, r2, r3.x
mul r3.x, r2.w, r2.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad_sat r0.w, r0, c27.x, c27.y
mad r2.xyz, r0.w, r0, r1
mul r0.xy, v5, c6.x
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r2.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r2, r0
mad r1.x, r3, c20.y, c20.z
mad r3.y, r1.x, r3.x, c20.w
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
mul_sat r7.z, c12.x, c12.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r0.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
mad r3.y, r3, r3.x, c21.x
mad r0.x, r3.y, r3, c21.y
mad r0.x, r0, r3, c21.z
mul r0.y, r0.x, r2.w
add r2.x, -r1.w, c18.y
mad r0.w, r1, c18.z, c18
mad r0.w, r1, r0, c19.x
add_pp r1.xyz, r1, c22.w
rsq r2.x, r2.x
add r0.z, -r0.y, c21.w
add r0.x, r7, -r1.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c19.w
cmp r0.x, v5.z, r0, r0.y
mul r0.z, v1.w, c8.x
cmp r0.x, v5, r0, -r0
mul r3.z, r0.x, c22.x
abs r0.x, v5.y
mul_sat r0.y, r0.z, c19.z
add r0.z, -r0.x, c18.y
mul_pp r1.xyz, r1, c26.w
mad_pp r1.xyz, r0.y, -r1, r1
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
rsq r0.z, r0.z
add r6.z, r3, c22.y
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.x, r0, c19.w, r0.y
mad r0.w, r1, r0, c19.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c18.x, c18.y
mul r2.x, r0.w, r1.w
mad r0.z, -r2.x, c19, r1.w
mul r1.w, r0.x, c20.x
mad r0.y, r0.w, c19.w, r0.z
mul r0.x, r0.y, c20
add r1.xyz, v0, r1
dsy r0.zw, v5.xyxy
mul r0.zw, r0, r0
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c22.x
mul r4.z, r0.y, c22.x
mov r6.w, r1
texldd r0.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r3.xy, r0.wyzw, c22.w
mov r0.xyz, v8
dp3 r0.w, v7, r0
dp3 r2.w, v7, v7
mad r0.z, -r0.w, r0.w, r2.w
rsq r0.z, r0.z
mul r0.xy, r3, c23
mov r3.w, r1
add r4.xy, r3.zwzw, r0
rcp r2.w, r0.z
add r0.x, -r2.w, c13
add_pp r2.xyz, -r1, c15
mad r1.w, r4.y, c23.z, c23.x
cmp r0.y, r0.w, c18, c18.x
cmp r0.x, r0, c18.y, c18
mul_pp r3.x, r0, r0.y
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c13.x, c13.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r0.w, -r0
cmp r0.z, -r3.x, v1.w, r0.y
frc r0.w, r1
add r0.x, -r0, c13
add r0.x, r0, c18.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c24.x, c24.y
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c26.y, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r7.z, r0, r1
sincos r0.xy, r1.w
mad r0.y, r4.x, c23.w, c23.x
frc r0.y, r0
mov_pp r2.y, r0.x
mad r1.x, r0.y, c24, c24.y
sincos r0.xy, r1.x
dp4 r1.y, c1, c1
rsq r0.z, r1.y
mul r1.xyz, r0.z, c1
mov_pp r2.xz, r0.yyxw
mul r6.xy, v5, c17.x
dp3_sat r7.w, v4, r1
dp3_pp_sat r3.w, -r2, -c11
mul r5.xy, v5.zyzw, c17.x
add_pp r8.x, r3.w, -r7.w
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c17.x
texld r0, r4, s5
add_pp r2, r0, -r1
mad_pp r0.y, r7.z, r8.x, r7.w
dp3 r0.x, v3, v3
rsq r7.z, r0.x
mul_pp r7.w, r0.y, c4
texld r0, v3, s7
dp4 r0.y, r0, c25
rcp r7.z, r7.z
mul r0.x, r7.z, c2.w
mad r0.y, -r0.x, c24.w, r0
mov r0.z, c3.x
dp3 r0.x, v2, v2
cmp r0.y, r0, c18, r0.z
texld r0.x, r0.x, s8
mul r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c9
add_sat r2.w, r1, -r2
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r7.w, c19.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c10.x
mad_pp r3.xyz, r0, c5, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c26
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 208 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.97000003
def c25, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c26, 4.03944778, 15.00000000, -0.94999999, 0.25000000
def c27, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c26.z
mad_sat r2.w, r0, c27.x, c27.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
abs r7.xy, v5
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r0.w, v5.z
mad r2.xyz, r2.w, r2, r0
max r1.x, r7, r0.w
rcp r0.y, r1.x
min r0.x, r7, r0.w
mul r1.w, r0.x, r0.y
mul r3.x, r1.w, r1.w
mad r3.y, r3.x, c20, c20.z
mad r3.y, r3, r3.x, c20.w
mad r3.y, r3, r3.x, c21.x
mul r1.xy, v5, c7.x
mul r0.xy, v5, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r7.x, r1, r0
mul r1.xy, v5.zxzw, c7.x
mul r0.xy, v5.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r1.xyz, r2.w, r0, r1
add_pp r1.xyz, r1, -r2
mad_pp r1.xyz, r7.y, r1, r2
add_pp r1.xyz, r1, c22.w
mad r3.y, r3, r3.x, c21
mad r0.x, r3.y, r3, c21.z
mul r0.y, r0.x, r1.w
mad r1.w, r0, c18.z, c18
mul_pp r2.xyz, r1, c26.w
add r0.z, -r0.y, c21.w
add r0.x, r7, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c19.w
cmp r0.x, v5.z, r0, r0.y
cmp r1.x, v5, r0, -r0
mul r3.z, r1.x, c22.x
abs r1.x, v5.y
mul r0.y, v1.w, c8.x
add r1.z, -r1.x, c18.y
mad r1.y, r1.x, c18.z, c18.w
mad r1.y, r1, r1.x, c19.x
mul_sat r0.x, r0.y, c19.z
mad_pp r0.xyz, r0.x, -r2, r2
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
mad r0.w, r0, r1, c19.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r6.z, r3, c22.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c18.x, c18.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c19.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c18, c18.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c19.z, r1.y
mad r0.w, r1.x, c19, r0
mul r0.w, r0, c20.x
mad r1.y, -r2, c19.z, r2.x
mad r1.x, r1.w, c19.w, r1.y
mul r1.x, r1, c20
dsy r1.zw, v5.xyxy
mul r1.zw, r1, r1
dsx r5.w, r1.x
dsy r4.w, r1.x
dsx r1.xy, v5
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r5.z, r1.x, c22.x
mul r4.z, r1.y, c22.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r1.xyz, v0, r0
add r0.xy, r2.wyzw, c22.w
mul r3.xy, r0, c23
mov r0.xyz, v8
mov r3.w, r0
dp3 r1.w, v7, r0
dp3 r2.w, v7, v7
mad r0.x, -r1.w, r1.w, r2.w
rsq r0.y, r0.x
add r3.xy, r3.zwzw, r3
mad r0.x, r3.y, c23.z, c23
rcp r2.w, r0.y
frc r0.w, r0.x
add r0.x, -r2.w, c13
add_pp r2.xyz, -r1, c15
cmp r0.y, r1.w, c18, c18.x
cmp r0.x, r0, c18.y, c18
mul_pp r3.y, r0.x, r0
add r0.xyz, v9, -c16
dp3 r0.x, r0, r0
mul r2.w, r2, r2
mad r0.y, c13.x, c13.x, -r2.w
rsq r0.x, r0.x
rsq r0.y, r0.y
rcp r0.x, r0.x
rcp r0.y, r0.y
add r0.y, r1.w, -r0
cmp r0.z, -r3.y, v1.w, r0.y
add r0.x, -r0, c13
add r0.x, r0, c18.y
frc r0.y, r0.x
add_sat r0.x, r0, -r0.y
add r0.z, v1.w, -r0
mad r1.w, r0, c24.x, c24.y
mul_sat r0.y, r0.z, c14.x
mul r0.x, r0, c14
mad r0.x, r0, c26.y, r0.y
mad_pp r1.xyz, r0.x, r2, r1
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r2.xyz, r0, -r1
sincos r0.xy, r1.w
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
mov_pp r8.y, r0.x
mad r1.w, r0.y, c24.x, c24.y
sincos r0.xy, r1.w
dp4 r2.w, c1, c1
rsq r0.z, r2.w
mov_pp r8.xz, r0.yyxw
mul r3.xyz, r0.z, c1
dp3_sat r0.y, v4, r3
dp3_pp_sat r3.w, -r8, -c11
mul_sat r0.x, c12, c12
add_pp r0.z, r3.w, -r0.y
mad_pp r7.z, r0.x, r0, r0.y
mul_pp r7.w, r7.z, c4
dp3 r7.z, v3, v3
mad_pp r3.xyz, r0.x, r2, r1
mul r6.xy, v5, c17.x
mul r5.xy, v5.zyzw, c17.x
texld r0, r6, s5
texld r1, r5, s5
add_pp r1, r1, -r0
mad_pp r1, r7.x, r1, r0
mul r4.xy, v5.zxzw, c17.x
texld r0, r4, s5
add_pp r2, r0, -r1
texld r0, v3, s7
dp4 r0.y, r0, c25
rsq r7.z, r7.z
rcp r0.x, r7.z
mul r0.x, r0, c2.w
mad r0.x, -r0, c24.w, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c18, r0.z
dp3 r0.x, v2, v2
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c9
add_sat r2.w, r1, -r2
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r7.w, c19.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c10.x
mad_pp r3.xyz, r0, c5, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c26
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c28.z
mad_sat r1.w, r0, c29.x, c29.y
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
mul r2.xy, v5, c10.x
abs r7.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c9.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r7.x, r0, r1
mul r0.xy, v5.zxzw, c9.x
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r7.y, r3, r2
max r0.x, r7, r0.w
rcp r0.y, r0.x
min r0.x, r7, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c23, c23.z
mad r0.y, r0, r0.x, c23.w
mad r0.y, r0, r0.x, c24.x
mad r0.y, r0, r0.x, c24
add_pp r2.xyz, r2, c25.w
mul r0.z, v1.w, c11.x
mad r1.y, r0, r0.x, c24.z
mul_sat r0.z, r0, c22
mul_pp r2.xyz, r2, c27.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c18
add r2.y, -r2.x, c24.w
add r1.w, r7.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c22.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c16
cmp r2.y, r2.w, c21, c21.x
cmp r2.x, r2, c21.y, c21
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c19
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c16.x, c16.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c16
add r2.x, r2, c21.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c17.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c25.x
mad r1.w, r0, c21.z, c21
mul r2.x, r2, c17
mad r2.x, r2, c28.y, r2.y
mad_pp r1.xyz, r2.x, r1, r0
abs r0.x, v5.y
add r0.z, -r0.x, c21.y
mad r0.y, r0.x, c21.z, c21.w
mad r0.y, r0, r0.x, c22.x
add r2.x, -r0.w, c21.y
mad r1.w, r0, r1, c22.x
rsq r0.z, r0.z
rsq r2.x, r2.x
add r6.z, r2, c25.y
mad r0.w, r0, r1, c22.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c21.x, c21.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c22.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c21, c21.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c22.z, r0
mad r0.z, -r2.x, c22, r1.w
mad r0.x, r0, c22.w, r0.y
mad r0.y, r0.w, c22.w, r0.z
mul r0.w, r0.x, c23.x
mul r0.x, r0.y, c23
dsy r2.xy, v5
mul r2.xy, r2, r2
dsx r5.w, r0.x
dsy r4.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r2.x, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r5.z, r0.x, c25.x
mul r4.z, r0.y, c25.x
mov r6.w, r0
texldd r2.yw, r6.zwzw, s6, r5.zwzw, r4.zwzw
add r2.xy, r2.wyzw, c25.w
texldd r0.xyz, r6.zwzw, s0, r5.zwzw, r4.zwzw
add_pp r0.xyz, r0, -r1
mul_sat r8.w, c15.x, c15.x
mad_pp r3.xyz, r8.w, r0, r1
mul r6.xy, v5, c20.x
mul r0.xy, r2, c26
mov r2.w, r0
add r7.zw, r2, r0.xyxy
mul r5.xy, v5.zyzw, c20.x
mad r2.x, r7.w, c26.z, c26
texld r1, r6, s5
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r7.x, r0, r1
frc r0.x, r2
mad r3.w, r0.x, c27.x, c27.y
mul r4.xy, v5.zxzw, c20.x
texld r0, r4, s5
add_pp r2, r0, -r1
sincos r0.xy, r3.w
mad r0.y, r7.z, c26.w, c26.x
frc r0.y, r0
mad r3.w, r0.y, c27.x, c27.y
mov_pp r9.y, r0.x
sincos r0.xy, r3.w
dp4 r7.z, c1, c1
rsq r0.z, r7.z
mov_pp r9.xz, r0.yyxw
mul r8.xyz, r0.z, c1
rcp r7.z, v3.w
dp3_sat r0.x, v4, r8
dp3_pp_sat r3.w, -r9, -c14
add_pp r0.y, r3.w, -r0.x
mad_pp r0.z, r8.w, r0.y, r0.x
mad r0.xy, v3, r7.z, c6
texld r0.x, r0, s9
mad r8.xy, v3, r7.z, c5
mov r0.w, r0.x
texld r0.x, r8, s9
mul_pp r7.w, r0.z, c7
mad r8.xy, v3, r7.z, c4
mov r0.z, r0.x
texld r0.x, r8, s9
mad r8.xy, v3, r7.z, c3
mov r0.y, r0.x
texld r0.x, r8, s9
mad r0, -v3.z, r7.z, r0
mov r8.x, c2
cmp r0, r0, c21.y, r8.x
dp4_pp r0.y, r0, c27.w
rcp r7.z, v2.w
mad r8.xy, v2, r7.z, c25.y
dp3 r0.x, v2, v2
texld r0.w, r8, s7
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r7.z, r0.x, r0.y
mad_pp r0, r7.y, r2, r1
add r1.w, v0, c25.z
frc r2.w, r1
mul_pp r7.w, r7.z, r7
mov r1.x, c12
add_sat r2.w, r1, -r2
add r1.xyz, c7, r1.x
mul_pp_sat r2.x, r7.w, c22.z
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r6.zwzw, s3, r5.zwzw, r4.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r3
add_pp r2.w, r3, c27.z
mul_pp r2.w, r2, c7
mad_pp r0.xyz, r0.w, r0, r3
mul r8.xyz, r2, c13.x
mad_pp r3.xyz, r0, c8, r8
texld r0, r6, s4
texld r5, r5, s4
add_pp r5, r5, -r0
mad_pp r0, r7.x, r5, r0
texld r4, r4, s4
add_pp r4, r4, -r0
mad_pp r0, r7.y, r4, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r3, r2, r0
mul_pp r2.w, r2, r7.z
mul_pp_sat r1.x, r2.w, c28
add_pp r1.x, -r1, c21.y
mul_pp r2.xyz, r3, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Vector 14 [_SunDir]
Float 15 [_PlanetOpacity]
Float 16 [_OceanRadius]
Float 17 [_OceanDepthFactor]
Vector 18 [_OceanColor]
Vector 19 [_PlanetOrigin]
Float 20 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_LightTexture0] 2D
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_ShadowMapTexture] 2D
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
dcl_2d s9
def c21, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c22, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c23, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c24, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c25, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c26, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c27, 6.28318501, -3.14159298, -0.01000214, 0.25000000
def c28, 4.03944778, 15.00000000, -0.94999999, 0
def c29, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c28.z
mad_sat r1.w, r0, c29.x, c29.y
mul r0.xy, v5.zyzw, c10.x
mul r1.xy, v5.zyzw, c9.x
mul r2.xy, v5, c10.x
abs r7.zw, v5.xyxy
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c9.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r7.z, r0, r1
mul r0.xy, v5.zxzw, c9.x
mul r1.xy, v5.zxzw, c10.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r7.w, r3, r2
max r0.x, r7.z, r0.w
rcp r0.y, r0.x
min r0.x, r7.z, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c23, c23.z
mad r0.y, r0, r0.x, c23.w
mad r0.y, r0, r0.x, c24.x
mad r0.y, r0, r0.x, c24
add_pp r2.xyz, r2, c25.w
mul r0.z, v1.w, c11.x
mad r1.y, r0, r0.x, c24.z
mul_sat r8.w, c15.x, c15.x
mul_sat r0.z, r0, c22
mul_pp r2.xyz, r2, c27.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c18
add r2.y, -r2.x, c24.w
add r1.w, r7.z, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c22.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c16
cmp r2.y, r2.w, c21, c21.x
cmp r2.x, r2, c21.y, c21
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c19
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c16.x, c16.x, -r3.x
cmp r1.w, v5.x, r1, -r1
mul r3.x, r1.w, c25
mad r1.w, r0, c21.z, c21
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c16
add r2.x, r2, c21.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
add r6.z, r3.x, c25.y
mul_sat r2.y, r2.z, c17.x
mul r2.x, r2, c17
mad r2.x, r2, c28.y, r2.y
mad_pp r0.xyz, r2.x, r1, r0
abs r1.x, v5.y
add r1.z, -r1.x, c21.y
mad r1.y, r1.x, c21.z, c21.w
mad r1.y, r1, r1.x, c22.x
add r2.x, -r0.w, c21.y
mad r1.w, r0, r1, c22.x
mad r0.w, r0, r1, c22.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c21.x, c21.y
mad r1.x, r1.y, r1, c22.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c21, c21.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c22.z, r1.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c22.z, r2.x
mad r0.w, r1.x, c22, r0
mul r3.z, r0.w, c23.x
mad r1.x, r1.w, c22.w, r1.y
mul r0.w, r1.x, c23.x
dsx r1.xy, v5
dsy r2.xy, v5
mul r1.xy, r1, r1
mov r6.w, r3.z
dsx r5.w, r0
dsy r1.w, r0
add r0.w, r1.x, r1.y
mul r2.xy, r2, r2
add r1.x, r2, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r5.z, r0.w, c25.x
mul r1.z, r1.x, c25.x
texldd r3.yw, r6.zwzw, s6, r5.zwzw, r1.zwzw
add r1.xy, r3.wyzw, c25.w
texldd r2.xyz, r6.zwzw, s0, r5.zwzw, r1.zwzw
add_pp r2.xyz, r2, -r0
mad_pp r4.xyz, r8.w, r2, r0
mul r7.xy, v5, c20.x
mul r6.xy, v5.zyzw, c20.x
texld r2, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r2
mad_pp r2, r7.z, r0, r2
mov r3.y, r3.z
mul r1.xy, r1, c26
add r1.xy, r3, r1
mad r0.x, r1.y, c26.z, c26
frc r1.y, r0.x
mul r5.xy, v5.zxzw, c20.x
texld r0, r5, s5
add_pp r3, r0, -r2
mad r1.y, r1, c27.x, c27
sincos r0.xy, r1.y
mad r1.x, r1, c26.w, c26
frc r0.y, r1.x
rcp r1.y, v3.w
mad r1.x, r0.y, c27, c27.y
mov_pp r8.y, r0.x
sincos r0.xy, r1.x
dp4 r0.z, c1, c1
mov_pp r8.xz, r0.yyxw
dp3_pp_sat r4.w, -r8, -c14
rsq r0.z, r0.z
mul r0.xyz, r0.z, c1
dp3_sat r0.w, v4, r0
add_pp r1.x, r4.w, -r0.w
mad_pp r0.w, r8, r1.x, r0
mad r0.xyz, v3, r1.y, c6
mad r8.xyz, v3, r1.y, c4
texld r1.x, r8, s9
mad r8.xyz, v3, r1.y, c3
texld r0.x, r0, s9
mul_pp r8.w, r0, c7
mov_pp r0.w, r0.x
mad r0.xyz, v3, r1.y, c5
texld r0.x, r0, s9
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c2
add r1.x, c21.y, -r0
texld r0.x, r8, s9
mad r0, r0, r1.x, c2.x
dp4_pp r0.y, r0, c27.w
rcp r1.x, v2.w
mad r1.xy, v2, r1.x, c25.y
texld r0.w, r1, s7
dp3 r0.x, v2, v2
cmp r0.z, -v2, c21.x, c21.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s8
mul_pp r0.x, r0.z, r0
mul_pp r8.x, r0, r0.y
mad_pp r0, r7.w, r3, r2
mul_pp r1.x, r8, r8.w
mul_pp_sat r2.w, r1.x, c22.z
mov r1.y, c12.x
add r2.xyz, c7, r1.y
add r1.x, v0.w, c25.z
mad_sat r2.xyz, r2, r2.w, c0
mul_pp r2.xyz, r2, v6.x
frc r1.y, r1.x
add_sat r2.w, r1.x, -r1.y
texldd r1, r6.zwzw, s3, r5.zwzw, r1.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c27.z
mul_pp r2.w, r2, c7
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c13.x
mad_pp r4.xyz, r0, c8, r3
texld r0, r7, s4
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r7.z, r3, r0
texld r3, r5, s4
add_pp r3, r3, -r0
mad_pp r0, r7.w, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r8.x
mul_pp_sat r1.x, r2.w, c28
add_pp r1.x, -r1, c21.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c21.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTexture0] 2D
"ps_3_0
; 215 ALU, 26 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c27.z
mad_sat r1.w, r0, c28.x, c28.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
mul r2.xy, v5, c7.x
abs r9.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c6.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r9.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r9.y, r3, r2
max r0.x, r9, r0.w
rcp r0.y, r0.x
min r0.x, r9, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c20, c20.z
mad r0.y, r0, r0.x, c20.w
mad r0.y, r0, r0.x, c21.x
mad r0.y, r0, r0.x, c21
add_pp r2.xyz, r2, c22.w
mul r0.z, v1.w, c8.x
mad r1.y, r0, r0.x, c21.z
mul_sat r3.w, c12.x, c12.x
mul_sat r0.z, r0, c19
mul_pp r2.xyz, r2, c25.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c15
add r2.y, -r2.x, c21.w
add r1.w, r9.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c19.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c13
cmp r2.y, r2.w, c18, c18.x
cmp r2.x, r2, c18.y, c18
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c16
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c13.x, c13.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c13
add r2.x, r2, c18.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c14.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c22.x
mad r1.w, r0, c18.z, c18
mul r2.x, r2, c14
mad r2.x, r2, c27.y, r2.y
mad_pp r1.xyz, r2.x, r1, r0
abs r0.x, v5.y
add r0.z, -r0.x, c18.y
mad r0.y, r0.x, c18.z, c18.w
mad r0.y, r0, r0.x, c19.x
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
rsq r0.z, r0.z
rsq r2.x, r2.x
add r8.z, r2, c22.y
mad r0.w, r0, r1, c19.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v5.z, c18.x, c18.y
mul r2.x, r0.w, r1.w
mad r0.x, r0.y, r0, c19.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v5.y, c18, c18.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c19.z, r0
mad r0.z, -r2.x, c19, r1.w
mad r0.x, r0, c19.w, r0.y
mad r0.y, r0.w, c19.w, r0.z
mul r0.w, r0.x, c20.x
mul r0.x, r0.y, c20
dsy r2.xy, v5
mul r2.xy, r2, r2
mov r8.w, r0
dsx r7.w, r0.x
dsy r6.w, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r2.x, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r7.z, r0.x, c22.x
mul r6.z, r0.y, c22.x
texldd r2.yw, r8.zwzw, s6, r7.zwzw, r6.zwzw
add r2.xy, r2.wyzw, c22.w
texldd r0.xyz, r8.zwzw, s0, r7.zwzw, r6.zwzw
add_pp r0.xyz, r0, -r1
mad_pp r4.xyz, r3.w, r0, r1
mul r8.xy, v5, c17.x
mul r0.xy, r2, c23
mov r2.w, r0
add r3.xy, r2.zwzw, r0
mul r7.xy, v5.zyzw, c17.x
mad r2.x, r3.y, c23.z, c23
texld r1, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r9.x, r0, r1
frc r0.x, r2
mad r3.y, r0.x, c24.x, c24
mul r6.xy, v5.zxzw, c17.x
texld r0, r6, s5
add_pp r2, r0, -r1
sincos r0.xy, r3.y
mad r0.y, r3.x, c23.w, c23.x
frc r0.y, r0
mov_pp r5.y, r0.x
mad r3.x, r0.y, c24, c24.y
sincos r0.xy, r3.x
dp4 r3.y, c1, c1
rsq r0.z, r3.y
mul r3.xyz, r0.z, c1
mov_pp r5.xz, r0.yyxw
dp3_sat r0.w, v4, r3
dp3_pp_sat r4.w, -r5, -c11
add_pp r3.x, r4.w, -r0.w
mad_pp r3.x, r3.w, r3, r0.w
mul_pp r9.z, r3.x, c4.w
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
dp4 r5.x, r0, c26
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r3, r0, c18.y, r3.x
dp3 r0.x, v2, v2
dp4_pp r0.y, r3, c25.w
texld r0.x, r0.x, s8
mul r5.x, r0, r0.y
mad_pp r0, r9.y, r2, r1
add r1.w, v0, c22.z
mul_pp r3.x, r5, r9.z
frc r2.w, r1
mov r1.x, c9
add_sat r2.w, r1, -r2
mul_pp_sat r2.x, r3, c19.z
add r1.xyz, c4, r1.x
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r8.zwzw, s3, r7.zwzw, r6.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c10.x
mad_pp r4.xyz, r0, c5, r3
texld r0, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r0
mad_pp r0, r9.x, r3, r0
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r9.y, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r5.x
mul_pp_sat r1.x, r2.w, c27
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Vector 11 [_SunDir]
Float 12 [_PlanetOpacity]
Float 13 [_OceanRadius]
Float 14 [_OceanDepthFactor]
Vector 15 [_OceanColor]
Vector 16 [_PlanetOrigin]
Float 17 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_BumpMap] 2D
SetTexture 7 [_ShadowMapTexture] CUBE
SetTexture 8 [_LightTextureB0] 2D
SetTexture 9 [_LightTexture0] CUBE
"ps_3_0
; 216 ALU, 27 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
dcl_2d s8
dcl_cube s9
def c18, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 0.99000001, -0.50000000
def c23, 0.50000000, 1.00000000, 0.49999991, 0.99999982
def c24, 6.28318501, -3.14159298, -0.01000214, 0.00781250
def c25, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c26, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c27, 4.03944778, 15.00000000, -0.94999999, 0
def c28, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.x
dcl_texcoord7 v7.xyz
dcl_texcoord8 v8.xyz
dcl_texcoord9 v9.xyz
mov r0.xyz, v5
dp3_sat r0.w, v1, -r0
add r0.w, r0, c27.z
mad_sat r1.w, r0, c28.x, c28.y
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
mul r2.xy, v5, c7.x
abs r9.xy, v5
abs r0.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mul r1.xy, v5, c6.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r1.w, r1, r2
mad r0.xyz, r1.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r9.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r3.xyz, r0, -r1
mad r3.xyz, r1.w, r3, r1
add_pp r3.xyz, r3, -r2
mad_pp r2.xyz, r9.y, r3, r2
max r0.x, r9, r0.w
rcp r0.y, r0.x
min r0.x, r9, r0.w
mul r1.x, r0, r0.y
mul r0.x, r1, r1
mad r0.y, r0.x, c20, c20.z
mad r0.y, r0, r0.x, c20.w
mad r0.y, r0, r0.x, c21.x
mad r0.y, r0, r0.x, c21
add_pp r2.xyz, r2, c22.w
mul r0.z, v1.w, c8.x
mad r1.y, r0, r0.x, c21.z
mul_sat r3.w, c12.x, c12.x
mul_sat r0.z, r0, c19
mul_pp r2.xyz, r2, c25.w
mad_pp r2.xyz, r0.z, -r2, r2
add r0.xyz, v0, r2
mul r2.x, r1.y, r1
add_pp r1.xyz, -r0, c15
add r2.y, -r2.x, c21.w
add r1.w, r9.x, -r0
cmp r1.w, -r1, r2.x, r2.y
mov r2.xyz, v8
dp3 r2.w, v7, r2
add r2.x, -r1.w, c19.w
cmp r1.w, v5.z, r1, r2.x
dp3 r3.x, v7, v7
mad r2.y, -r2.w, r2.w, r3.x
rsq r2.y, r2.y
rcp r3.x, r2.y
add r2.x, -r3, c13
cmp r2.y, r2.w, c18, c18.x
cmp r2.x, r2, c18.y, c18
mul_pp r3.y, r2.x, r2
add r2.xyz, v9, -c16
dp3 r2.x, r2, r2
mul r3.x, r3, r3
mad r2.y, c13.x, c13.x, -r3.x
rsq r2.x, r2.x
rsq r2.y, r2.y
rcp r2.x, r2.x
rcp r2.y, r2.y
add r2.y, r2.w, -r2
cmp r2.z, -r3.y, v1.w, r2.y
add r2.x, -r2, c13
add r2.x, r2, c18.y
frc r2.y, r2.x
add_sat r2.x, r2, -r2.y
add r2.z, v1.w, -r2
mul_sat r2.y, r2.z, c14.x
cmp r1.w, v5.x, r1, -r1
mul r2.z, r1.w, c22.x
mad r1.w, r0, c18.z, c18
mul r2.x, r2, c14
mad r2.x, r2, c27.y, r2.y
mad_pp r0.xyz, r2.x, r1, r0
abs r1.x, v5.y
add r1.z, -r1.x, c18.y
mad r1.y, r1.x, c18.z, c18.w
mad r1.y, r1, r1.x, c19.x
add r2.x, -r0.w, c18.y
mad r1.w, r0, r1, c19.x
mad r0.w, r0, r1, c19.y
rsq r1.z, r1.z
rsq r2.x, r2.x
rcp r2.x, r2.x
add r8.z, r2, c22.y
mul r2.x, r0.w, r2
cmp r1.w, v5.z, c18.x, c18.y
mul r2.y, r1.w, r2.x
mad r1.x, r1.y, r1, c19.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v5.y, c18, c18.y
mul r1.z, r1.x, r1.y
mad r0.w, -r1.z, c19.z, r1.y
mad r0.w, r1.x, c19, r0
mad r1.y, -r2, c19.z, r2.x
mul r3.x, r0.w, c20
mad r1.x, r1.w, c19.w, r1.y
mul r0.w, r1.x, c20.x
dsx r1.xy, v5
dsy r1.zw, v5.xyxy
mul r1.xy, r1, r1
mul r1.zw, r1, r1
mov r8.w, r3.x
dsx r7.w, r0
dsy r6.w, r0
add r0.w, r1.x, r1.y
add r1.x, r1.z, r1.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r7.z, r0.w, c22.x
mul r6.z, r1.x, c22.x
texldd r2.yw, r8.zwzw, s6, r7.zwzw, r6.zwzw
add r2.xy, r2.wyzw, c22.w
texldd r1.xyz, r8.zwzw, s0, r7.zwzw, r6.zwzw
add_pp r1.xyz, r1, -r0
mad_pp r4.xyz, r3.w, r1, r0
mul r8.xy, v5, c17.x
mul r7.xy, v5.zyzw, c17.x
mov r2.w, r3.x
mul r2.xy, r2, c23
add r3.xy, r2.zwzw, r2
texld r1, r8, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r9.x, r0, r1
mad r0.x, r3.y, c23.z, c23
frc r3.y, r0.x
mul r6.xy, v5.zxzw, c17.x
texld r0, r6, s5
add_pp r2, r0, -r1
mad r3.y, r3, c24.x, c24
sincos r0.xy, r3.y
mad r3.x, r3, c23.w, c23
frc r0.y, r3.x
mad r3.x, r0.y, c24, c24.y
mov_pp r3.y, r0.x
sincos r0.xy, r3.x
dp4 r0.z, c1, c1
mov_pp r3.xz, r0.yyxw
rsq r0.z, r0.z
dp3_pp_sat r4.w, -r3, -c11
mul r0.xyz, r0.z, c1
dp3_sat r3.x, v4, r0
add_pp r3.y, r4.w, -r3.x
mad_pp r9.z, r3.w, r3.y, r3.x
add r0.xyz, v3, c25.xyyw
texld r0, r0, s7
dp4 r5.w, r0, c26
add r0.xyz, v3, c25.yxyw
texld r0, r0, s7
dp4 r5.z, r0, c26
add r3.xyz, v3, c25.yyxw
texld r3, r3, s7
dp4 r5.y, r3, c26
add r0.xyz, v3, c24.w
texld r0, r0, s7
dp3 r3.x, v3, v3
dp4 r5.x, r0, c26
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0, -r0.x, c25.z, r5
mov r3.x, c3
cmp r0, r0, c18.y, r3.x
dp4_pp r0.y, r0, c25.w
dp3 r0.x, v2, v2
texld r0.w, v2, s9
texld r0.x, r0.x, s8
mul r0.x, r0, r0.w
mul r5.x, r0, r0.y
mad_pp r0, r9.y, r2, r1
add r1.w, v0, c22.z
frc r2.w, r1
mul_pp r3.x, r9.z, c4.w
mul_pp r3.x, r5, r3
mov r1.x, c9
add_sat r2.w, r1, -r2
mul_pp_sat r2.x, r3, c19.z
add r1.xyz, c4, r1.x
mad_sat r2.xyz, r1, r2.x, c0
texldd r1, r8.zwzw, s3, r7.zwzw, r6.zwzw
mul_pp r1.w, r1, r2
mul_pp r0, r1, r0
mul_pp r2.xyz, r2, v6.x
add_pp r0.xyz, r0, -r4
add_pp r2.w, r4, c24.z
mul_pp r2.w, r2, c4
mad_pp r0.xyz, r0.w, r0, r4
mul r3.xyz, r2, c10.x
mad_pp r4.xyz, r0, c5, r3
texld r0, r8, s4
texld r3, r7, s4
add_pp r3, r3, -r0
mad_pp r0, r9.x, r3, r0
texld r3, r6, s4
add_pp r3, r3, -r0
mad_pp r0, r9.y, r3, r0
mul_pp r0, r1, r0
mad_pp r0.xyz, -r4, r2, r0
mul_pp r2.w, r2, r5.x
mul_pp_sat r1.x, r2.w, c27
add_pp r1.x, -r1, c18.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c18.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 251

	
		}
		
		Pass {
            Tags {"LightMode" = "ForwardAdd"} 
            Blend One One                                      
            Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 10 to 19
//   d3d9 - ALU: 12 to 21
//   d3d11 - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 9 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
"!!ARBvp1.0
# 10 ALU
PARAM c[10] = { program.local[0],
		state.matrix.mvp,
		program.local[5..9] };
TEMP R0;
MOV R0, c[9];
DP4 result.texcoord[2].z, R0, c[7];
DP4 result.texcoord[2].y, R0, c[6];
DP4 result.texcoord[2].x, R0, c[5];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 10 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"vs_2_0
; 12 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c6
dp4 oT2.z, c8, r0
mov r0, c5
mov r1, c4
dp4 oT2.y, c8, r0
dp4 oT2.x, c8, r1
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhlffamgibkghgdhcndobnoaidcnlmladabaaaaaafiadaaaaadaaaaaa
cmaaaaaalmaaaaaafmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
jiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
peabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaaaaaaaaaaabaaaaaafjaaaaae
egiocaaaabaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaaaaaaaaaaaaaaaaaegiccaaa
abaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabaaaaaaa
agiacaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaabaaaaaabcaaaaaakgikcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegiccaaaabaaaaaabdaaaaaapgipcaaaaaaaaaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"agal_vs
[bc]
aaaaaaaaaaaaapacagaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c6
bdaaaaaaacaaaeaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c8, r0
aaaaaaaaaaaaapacafaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c5
aaaaaaaaabaaapacaeaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c4
bdaaaaaaacaaacaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c8, r0
bdaaaaaaacaaabaeaiaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c8, r1
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjnmaggkionlfmiffnkeilonkceebjlmlabaaaaaaliaeaaaaaeaaaaaa
daaaaaaaimabaaaaiiadaaaabiaeaaaaebgpgodjfeabaaaafeabaaaaaaacpopp
aiabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaaaaa
abaaabaaaaaaaaaaabaaaaaaaeaaacaaaaaaaaaaabaabaaaaeaaagaaaaaaaaaa
aaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapja
bpaaaaacafaaaciaacaaapjaabaaaaacaaaaapiaabaaoekaafaaaaadabaaahia
aaaaffiaahaaoekaaeaaaaaeabaaahiaagaaoekaaaaaaaiaabaaoeiaaeaaaaae
aaaaahiaaiaaoekaaaaakkiaabaaoeiaaeaaaaaeabaaahoaajaaoekaaaaappia
aaaaoeiaafaaaaadaaaaapiaaaaaffjaadaaoekaaeaaaaaeaaaaapiaacaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaeaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaafaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaac
adaaapoaabaaoejappppaaaafdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaae
egiocaaaaaaaaaaaabaaaaaafjaaaaaeegiocaaaabaaaaaabeaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaaaaaaaaaegiccaaaabaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaabaaaaaabaaaaaaaagiacaaaaaaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabcaaaaaakgikcaaa
aaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
abaaaaaabdaaaaaapgipcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaa
abaaaaaadoaaaaabejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
hoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdejfeejepeo
aaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheojiaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 332
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 336
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    #line 340
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 344
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = 1.0;
    #line 348
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 352
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 19 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 19 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 21 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddiemkimndippbbnjeipihbehkfmhcbkpabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaiaeaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 v3.w, r0, c15
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedeikidmidnabnlgbjbikkomfoibegjdckabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaapiaaaaaffiaacaaoeka
aeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeabaaapiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaapoaaeaaoekaaaaappiaabaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
aeaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 344
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 348
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 353
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 357
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 361
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 365
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 336
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 340
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 345
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 349
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 353
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 357
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 16 ALU
PARAM c[18] = { program.local[0],
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
MOV R0, c[17];
DP4 result.texcoord[2].z, R0, c[11];
DP4 result.texcoord[2].y, R0, c[10];
DP4 result.texcoord[2].x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 16 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 18 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 oT2.z, c16, r0
mov r0, c9
dp4 oT2.y, c16, r0
mov r1, c8
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 oT2.x, c16, r1
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddmhacdconjpjameeinopjabeejblfbnhabaaaaaalmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefceaadaaaaeaaaabaa
naaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
mccabaaaabaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
bdaaaaaaacaaabaebaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c16, r1
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfdghapkdldpokkagfeafamaifeehnmmfabaaaaaamaagaaaaaeaaaaaa
daaaaaaadaacaaaahiafaaaaaiagaaaaebgpgodjpiabaaaapiabaaaaaaacpopp
kaabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaaiaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
abaaahoabbaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaalaaoeka
aeaaaaaeaaaaapiaakaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaad
abaaadiaaaaaffiaacaaobkaaeaaaaaeaaaaadiaabaaobkaaaaaaaiaabaaoeia
aeaaaaaeaaaaadiaadaaobkaaaaakkiaaaaaoeiaaeaaaaaeaaaaamoaaeaabeka
aaaappiaaaaaeeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoeja
abaaaaacadaaapoaabaaoejappppaaaafdeieefceaadaaaaeaaaabaanaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
acaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaa
abaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 8 to 17, TEX: 0 to 2
//   d3d9 - ALU: 9 to 17, TEX: 1 to 2
//   d3d11 - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
//   d3d11_9x - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 12 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
texld r0, r0, s0
mul_pp r0.x, r0, c1
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbioionpndiclbpbkjhaodjppefcaogpfabaaaaaammacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckmabaaaa
eaaaaaaaglaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaaaaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r0, r0.xyyy, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedalemgnichmemlepajpfbeadidmiehekdabaaaaaapaadaaaaaeaaaaaa
daaaaaaafaabaaaaaeadaaaalmadaaaaebgpgodjbiabaaaabiabaaaaaaacpppp
oeaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaac
aaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaiaaeaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaaeaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaaiaaaaadaaaaaiiaadaaoelaadaaoelaabaaaaacabaaadia
aaaappiaecaaaaadabaacpiaabaaoeiaaaaioekaacaaaaadaaaaaiiaabaaaaia
abaaaaiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaappla
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefckmabaaaaeaaaaaaaglaaaaaa
fjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaabejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
adaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"!!ARBfp1.0
# 8 ALU, 0 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.w, fragment.texcoord[1], R0;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[1].x;
MOV result.color.w, fragment.texcoord[5];
END
# 8 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"ps_2_0
; 9 ALU
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t5
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r0.xyz, r0.x, t2
dp3_pp_sat r0.x, t1, r0
mul r1.xyz, t5, c0
mul r0.xyz, r1, r0.x
mul r0.xyz, r0, c1.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedloieipnbkbffnjnmagdbeekmebefinkdabaaaaaadaacaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcciabaaaaeaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaaaaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r0.xyz, r0.x, v2
bcaaaaaaaaaaabacabaaaaoeaeaaaaaaaaaaaakeacaaaaaa dp3 r0.x, v1, r0.xyzz
bgaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r0.x, r0.x
adaaaaaaabaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r1.xyz, v5, c0
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
adaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaaaaabaaaaaa mul r0.xyz, r0.xyzz, c1.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhmbgndkhekjafmbnlllfoeplpaliaonaabaaaaaapmacaaaaaeaaaaaa
daaaaaaapiaaaaaaciacaaaamiacaaaaebgpgodjmaaaaaaamaaaaaaaaaacpppp
jaaaaaaadaaaaaaaabaaceaaaaaadaaaaaaadaaaaaaaceaaaaaadaaaaaaaacaa
abaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaacplaceaaaaacaaaaahiaabaaoelaaiaaaaad
aaaadbiaacaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaad
aaaaahiaaaaaaaiaaaaabliaacaaaaadaaaachiaaaaaoeiaaaaaoeiaabaaaaac
aaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcciabaaaa
eaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaa
aeaaaaaadoaaaaabejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
imaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaafaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"!!ARBfp1.0
# 17 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 0, 0.5, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.z, fragment.texcoord[3], fragment.texcoord[3];
RCP R0.x, fragment.texcoord[3].w;
MAD R0.xy, fragment.texcoord[3], R0.x, c[1].y;
SLT R2.x, c[1], fragment.texcoord[3].z;
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0, texture[0], 2D;
TEX R1.w, R0.z, texture[1], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 17 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"ps_2_0
; 17 ALU, 2 TEX
dcl_2d s0
dcl_2d s1
def c1, 0.50000000, 0.00000000, 1.00000000, 2.00000000
dcl t2.xyz
dcl t1.xyz
dcl t3
dcl t5
rcp r1.x, t3.w
mad r2.xy, t3, r1.x, c1.x
dp3 r0.x, t3, t3
mov r1.xy, r0.x
texld r0, r2, s0
texld r2, r1, s1
cmp r0.x, -t3.z, c1.y, c1.z
mul_pp r0.x, r0, r0.w
mul_pp r0.x, r0, r2
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
mul_pp r0.x, r0, c1.w
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednbeijpebpeecdfmohlgldkeeefgcibieabaaaaaakeadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieacaaaa
eaaaaaaakbaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaa
egbabaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaa
aaaaaaaaagaabaaaabaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaajgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"agal_ps
c1 0.5 0.0 1.0 2.0
[bc]
afaaaaaaabaaabacadaaaappaeaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, v3.w
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
adaaaaaaabaaadacadaaaaoeaeaaaaaaabaaaaaaacaaaaaa mul r1.xy, v3, r1.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaaaaabaaaaaa add r1.xy, r1.xyyy, c1.x
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacabaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r1.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacaaaaaafeacaaaaaaabaaaaaaafaababb tex r0, r0.xyyy, s1 <2d wrap linear point>
bfaaaaaaacaaaiacadaaaakkaeaaaaaaaaaaaaaaaaaaaaaa neg r2.w, v3.z
ckaaaaaaaaaaabacacaaaappacaaaaaaabaaaaffabaaaaaa slt r0.x, r2.w, c1.y
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappacaaaaaa mul r0.x, r0.x, r1.w
adaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaappacaaaaaa mul r0.x, r0.x, r0.w
bcaaaaaaabaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r1.x, v2, v2
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappabaaaaaa mul r0.x, r0.x, c1.w
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecediebbibeaffknnoffjkdbkppjakhalgobabaaaaaaeeafaaaaaeaaaaaa
daaaaaaammabaaaafiaeaaaabaafaaaaebgpgodjjeabaaaajeabaaaaaaacpppp
fmabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaaaaaaaaa
abababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppfbaaaaafabaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaaaplabpaaaaacaaaaaaiaaeaacplabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkaagaaaaacaaaaaiiaadaappla
aeaaaaaeaaaaadiaadaaoelaaaaappiaabaaaakaaiaaaaadabaaaiiaadaaoela
adaaoelaabaaaaacabaaadiaabaappiaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadabaacpiaabaaoeiaabaioekaafaaaaadaaaacbiaaaaappiaabaaaaia
fiaaaaaeaaaacbiaadaakklbabaaffkaaaaaaaiaacaaaaadaaaaabiaaaaaaaia
aaaaaaiaceaaaaacabaaahiaabaaoelaaiaaaaadaaaadciaacaaoelaabaaoeia
afaaaaadabaaahiaaeaaoelaaaaaoekaafaaaaadaaaaaoiaaaaaffiaabaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaabaaaaacaaaaciiaaeaapplaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcieacaaaaeaaaaaaakbaaaaaafjaaaaae
egiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaaaaaaaaaaagaabaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
jgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegbcbaaaafaaaaaaegiccaaa
aaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"!!ARBfp1.0
# 13 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R1.w, fragment.texcoord[3], texture[1], CUBE;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"ps_2_0
; 13 ALU, 2 TEX
dcl_2d s0
dcl_cube s1
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
texld r2, r0, s0
texld r0, t3, s1
dp3 r0.x, t2, t2
rsq r1.x, r0.x
mul r1.xyz, r1.x, t2
mul r0.x, r2, r0.w
mul_pp r0.x, r0, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmibmaanhegfhgebjgfckekinpiclngbeabaaaaaaamadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomabaaaa
eaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaa
bacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r0.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaabaaaaaaafbababb tex r0, v3, s1 <cube wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r0.x
adaaaaaaaaaaabacabaaaappacaaaaaaaaaaaappacaaaaaa mul r0.x, r1.w, r0.w
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.x, c1
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedllanjeideokngnjhhgonjfkkfphknfmoabaaaaaagaaeaaaaaeaaaaaa
daaaaaaaiaabaaaaheadaaaacmaeaaaaebgpgodjeiabaaaaeiabaaaaaaacpppp
baabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaabaaaaaa
aaababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaacplabpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkaaiaaaaad
aaaaaiiaadaaoelaadaaoelaabaaaaacaaaaadiaaaaappiaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadabaaapiaadaaoelaaaaioekaafaaaaadaaaacbia
aaaaaaiaabaappiaacaaaaadaaaaabiaaaaaaaiaaaaaaaiaceaaaaacabaaahia
abaaoelaaiaaaaadaaaadciaacaaoelaabaaoeiaafaaaaadabaaahiaaeaaoela
aaaaoekaafaaaaadaaaaaoiaaaaaffiaabaabliaafaaaaadaaaachiaaaaaaaia
aaaabliaabaaaaacaaaaciiaaeaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcomabaaaaeaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaa
agaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 10 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R0.w, fragment.texcoord[3], texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, fragment.texcoord[5];
END
# 10 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 10 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xy
dcl t5
texld r0, t3, s0
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r1.xyz, r0.x, t2
mul_pp r0.x, r0.w, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddlagaeffgggjojnblaiknbdlaooljhknabaaaaaalaacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaabaaaa
eaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadmcbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaaaaaaaaaafaababb tex r0, v3, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefieceddjfbacnndndbchhbkadbfkdckhdefnbcabaaaaaameadaaaaaeaaaaaa
daaaaaaaeaabaaaaniacaaaajaadaaaaebgpgodjaiabaaaaaiabaaaaaaacpppp
neaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaahlabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaabaaaaacabaaadiaaaaabllaecaaaaadabaacpiaabaaoeia
aaaioekaacaaaaadaaaaaiiaabaappiaabaappiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcjaabaaaaeaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
mcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaa
aaaaaaaaagaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaaeaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaabaaaaaaamamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
acaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}

#LINE 312

        }
	} 
	
	FallBack "VertexLit"
}

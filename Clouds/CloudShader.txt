Shader "CloudShader" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_BumpMap ("Bumpmap", 2D) = "bump" {}
		_FalloffPow ("Falloff Power", Range(0,5)) = 2
		_FalloffScale ("Falloff Scale", Range(0,10)) = 3
	}

SubShader {
		Tags {  "Queue"="Transparent"
	   			"RenderMode"="Transparent" }
		Lighting On
		Cull Back
	    ZWrite Off
		
		Blend SrcAlpha OneMinusSrcAlpha
		
		CGPROGRAM
		#pragma surface surf SimpleLambert vertex:vert noforwardadd novertexlights nolightmap nodirlightmap

		sampler2D _MainTex;
		sampler2D _DetailTex;
		sampler2D _BumpMap;
		fixed4 _Color;
		float _FalloffPow;
		float _FalloffScale;
		
		half4 LightingSimpleLambert (SurfaceOutput s, half3 lightDir, half atten) {
          half NdotL = saturate(dot (s.Normal, lightDir));
          half4 c;
          c.rgb = s.Albedo * saturate(.16+ _LightColor0.rgb * (NdotL * atten * 2));
          c.a = s.Alpha;
          return c;
      	}
		
		struct Input {
			float2 uv_MainTex;
			float2 uv_DetailTex;
			float2 uv_BumpMap;
			float3 viewDir;
			float2 viewDist;
		};

		void vert (inout appdata_full v, out Input o) {
		   UNITY_INITIALIZE_OUTPUT(Input, o);
		   float3 vertexPos = mul(_Object2World, v.vertex).xyz;
		   float3 origin = mul(_Object2World, float4(0,0,0,1)).xyz;
		   float diff = 0.00875*distance(vertexPos,_WorldSpaceCameraPos);
	   	   o.viewDist.x = diff;
	   	   o.viewDist.y = saturate((distance(origin,_WorldSpaceCameraPos)-1.0005*distance(origin, vertexPos)));
	 	}

		void surf (Input IN, inout SurfaceOutput o) {
			half4 main = tex2D (_MainTex, IN.uv_MainTex);
			half4 detail = tex2D (_DetailTex, IN.uv_DetailTex);
			half detailLevel = saturate(2*IN.viewDist.x);
			half3 albedo = main.rgb * lerp(detail.rgb, half3(1,1,1), detailLevel);//*1.5;
			o.Normal = float3(0,0,1);
			o.Albedo = albedo * _Color;
			half avg = lerp(detail.a, 1, detailLevel)*main.a;
			half rim = saturate(dot(normalize(IN.viewDir), o.Normal));
          	o.Alpha = avg * IN.viewDist.y * saturate((1-IN.viewDist.y) +(saturate(pow(_FalloffScale*rim,_FalloffPow))));
          	detailLevel = saturate(IN.viewDist.x);
          	o.Normal = lerp(UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap)),half3(0,0,1),detailLevel);//*(detailLevel + ((1-detailLevel)*UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap))));
		}
		ENDCG
	
	}
	
	 
	FallBack "Diffuse"
}

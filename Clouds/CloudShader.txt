Shader "CloudShader" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_Mixer ("Mixer (RGB)", 2D) = "white" {}
		_BumpMap ("Bumpmap", 2D) = "bump" {}
		_FalloffPow ("Falloff Power", Range(0,5)) = 1.8
		_FalloffScale ("Falloff Scale", Range(0,20)) = 10
	}

SubShader {
		Tags {  "Queue"="Transparent"
	   			"RenderMode"="Transparent" }
		Lighting On
		Cull Back
	    ZWrite Off
		
		Blend SrcAlpha OneMinusSrcAlpha
		
		CGPROGRAM
		#pragma surface surf BlinnPhong vertex:vert noforwardadd noambient novertexlights nolightmap nodirlightmap

		sampler2D _MainTex;
		sampler2D _Mixer;
		sampler2D _BumpMap;
		fixed4 _Color;
		float _FalloffPow;
		float _FalloffScale;
		
		struct Input {
			float2 uv_MainTex;
			float2 uv_Mixer;
			float2 uv_BumpMap;
			float viewAngle;
		};

		void vert (inout appdata_full v, out Input o) {
			UNITY_INITIALIZE_OUTPUT(Input, o);
		   float3 normalDir = normalize(mul(_Object2World, v.normal.xyzz).xyz);
		   float3 modelCam = _WorldSpaceCameraPos;
		   float3 vertePos = mul(_Object2World, v.vertex).xyz;
		   float3 viewPos = normalize( vertePos - modelCam);
		   o.viewAngle = dot (normalDir, -viewPos);
	 	}

		void surf (Input IN, inout SurfaceOutput o) {
			half4 main = tex2D (_MainTex, IN.uv_MainTex);
			half4 mixer = tex2D (_Mixer, IN.uv_Mixer);
			half3 albedo = main.rgb * mixer.rgb*1.5;
			o.Albedo = albedo * _Color;
			half avg = mixer.r*(albedo.r);
          	o.Alpha = avg * saturate(pow(_FalloffScale*IN.viewAngle,_FalloffPow));
          	o.Normal = UnpackNormal (tex2D (_BumpMap, IN.uv_BumpMap));
		}
		ENDCG
	
	}
	
	 
	FallBack "Diffuse"
}

// Compiled shader for all platforms, uncompressed size: 1021.9KB

// Skipping shader variants that would not be included into build of current scene.

Shader "EVE/CloudShadow" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _MainTex ("Main (RGB)", 2D) = "white" { }
 _DetailTex ("Detail (RGB)", 2D) = "white" { }
 _DetailScale ("Detail Scale", Float) = 100
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _PlanetOrigin ("Sphere Center", Vector) = (0,0,0,1)
 _SunDir ("Sunlight direction", Vector) = (0,0,0,1)
 _Radius ("Radius", Float) = 1
 _PlanetRadius ("Planet Radius", Float) = 1
 _ShadowFactor ("Shadow Factor", Float) = 1
}
SubShader { 


 // Stats for Vertex shader:
 //       d3d11 : 48 avg math (48..49)
 //        d3d9 : 52 avg math (51..53)
 //        gles : 89 avg math (50..124), 3 avg texture (2..7), 0 avg branch (0..3)
 //       metal : 43 math
 //      opengl : 89 avg math (50..124), 3 avg texture (2..7), 0 avg branch (0..3)
 // Stats for Fragment shader:
 //       d3d11 : 85 avg math (54..100), 0 avg texture (0..1)
 //        d3d9 : 83 avg math (54..103), 10 avg texture (4..21)
 //       metal : 89 avg math (50..124), 3 avg texture (2..7), 0 avg branch (0..3)
 Pass {
  ZWrite Off
  Blend Zero SrcColor
  GpuProgramID 53604
Program "vp" {
SubProgram "opengl " {
// Stats: 114 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec2 uv_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_11.y, mix (tmpvar_11.x, tmpvar_11.z, tmpvar_13), tmpvar_14));
  vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(tmpvar_15);
  vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = tmpvar_15;
  vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = tmpvar_15;
  vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_11.yxz), mix ((tmpvar_16 * tmpvar_11.xzy), (tmpvar_17 * tmpvar_11.zxy), vec3(tmpvar_13)), vec3(tmpvar_14));
  uv_10 = (((
    (0.5 * tmpvar_19.yz)
   / 
    abs(tmpvar_19.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_20;
  vec2 tmpvar_21;
  tmpvar_21 = abs((uv_10 - (0.5 * _DetailScale)));
  uvCont_20.x = max (tmpvar_21.x, tmpvar_21.y);
  uvCont_20.y = min (tmpvar_21.x, tmpvar_21.y);
  vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_20);
  tmpvar_22.zw = dFdy(uvCont_20);
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = ((_Color * texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw)) * mix (texture2DGradARB (_DetailTex, uv_10, tmpvar_22.xy, tmpvar_22.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_23, tmpvar_23)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_24.w;
  color_1.xyz = clamp ((tmpvar_24.xyz * (1.0 - tmpvar_24.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_24.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 114 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 uv_14;
  mediump vec3 detailCoords_15;
  mediump float s_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  highp float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  zxlerp_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  nylerp_17 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = mix (tmpvar_19.x, tmpvar_19.z, zxlerp_18);
  s_16 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, s_16, nylerp_17));
  s_16 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = -(s_16);
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, -1.0);
  tmpvar_26.y = s_16;
  highp vec3 tmpvar_27;
  tmpvar_27 = mix ((tmpvar_25 * tmpvar_19.xzy), (tmpvar_26 * tmpvar_19.zxy), vec3(zxlerp_18));
  detailCoords_15 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28.xy = vec2(1.0, 1.0);
  tmpvar_28.z = s_16;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_28 * tmpvar_19.yxz), detailCoords_15, vec3(nylerp_17));
  detailCoords_15 = tmpvar_29;
  uv_14 = (((
    (0.5 * detailCoords_15.yz)
   / 
    abs(detailCoords_15.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_30;
  uv_30 = uv_14;
  highp vec2 uvCont_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = abs((uv_30 - (0.5 * _DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  highp vec4 tmpvar_33;
  tmpvar_33.xy = dFdx(uvCont_31);
  tmpvar_33.zw = dFdy(uvCont_31);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, uv_14, tmpvar_33.xy, tmpvar_33.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  highp vec3 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_13) * mix (tmpvar_35, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp vec3 t10;
bool tb10;
mediump vec3 t16_11;
highp float t16;
highp vec2 t17;
bool tb17;
highp int ti18;
highp float t24;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t24 = max(abs(t0.y), abs(t0.x));
    t24 = float(1.0) / t24;
    t1.x = min(abs(t0.y), abs(t0.x));
    t24 = t24 * t1.x;
    t1.x = t24 * t24;
    t9.x = t1.x * 0.0208350997 + -0.0851330012;
    t9.x = t1.x * t9.x + 0.180141002;
    t9.x = t1.x * t9.x + -0.330299497;
    t1.x = t1.x * t9.x + 0.999866009;
    t9.x = t24 * t1.x;
    t9.x = t9.x * -2.0 + 1.57079637;
    tb17 = abs(t0.y)<abs(t0.x);
    t9.x = tb17 ? t9.x : float(0.0);
    t24 = t24 * t1.x + t9.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t24 = t24 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t24) : t24;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t24 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t0.z) + -0.212114394;
    t24 = t24 * abs(t0.z) + 1.57072878;
    t16 = -abs(t0.z) + 1.0;
    t16 = sqrt(t16);
    t1.x = t16 * t24;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t16 = t24 * t16 + t1.x;
    t2.y = t16 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_0 = t10_0 * _Color;
    t16_4.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.z)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.z), abs(t9.y));
    tb2 = t2.x>=abs(t9.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.x;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t16_5.y = float(ti1);
    t16_4.y = (-t16_5.y);
    t3.xyz = t9.yzx * t16_4.xyz;
    t16_5.xz = vec2(1.0, -1.0);
    t6.xyz = t16_5.xyz * t9.zyx + (-t3.xyz);
    t10.xyz = t10.xxx * t6.xyz + t3.xyz;
    t10.xyz = (-t16_5.xxy) * t9.xyz + t10.xyz;
    t1.xyz = t9.xyz * t16_5.xxy;
    t1.xyz = t2.xxx * t10.xyz + t1.xyz;
    t16_4.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_4.xy = t16_4.xy / abs(t1.xx);
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t1.xy = t16_4.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_7.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_7.xyz = t10_7.xxx * t16_2.xyz;
    t10_7.xyz = clamp(t10_7.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_7.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
bvec2 tb1;
vec3 t2;
mediump vec4 t16_2;
vec3 t3;
bool tb3;
vec3 t4;
vec2 t6;
vec3 t8;
int ti8;
float t10;
vec2 t11;
bool tb11;
float t15;
float t16;
int ti16;
float t17;
bool tb17;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t15 = max(abs(t0.y), abs(t0.x));
    t15 = float(1.0) / t15;
    t1.x = min(abs(t0.y), abs(t0.x));
    t15 = t15 * t1.x;
    t1.x = t15 * t15;
    t6.x = t1.x * 0.0208350997 + -0.0851330012;
    t6.x = t1.x * t6.x + 0.180141002;
    t6.x = t1.x * t6.x + -0.330299497;
    t1.x = t1.x * t6.x + 0.999866009;
    t6.x = t15 * t1.x;
    t6.x = t6.x * -2.0 + 1.57079637;
    tb11 = abs(t0.y)<abs(t0.x);
    t6.x = tb11 ? t6.x : float(0.0);
    t15 = t15 * t1.x + t6.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t15 = t15 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t15) : t15;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t15 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t15 = t15 * abs(t0.z) + -0.212114394;
    t15 = t15 * abs(t0.z) + 1.57072878;
    t10 = -abs(t0.z) + 1.0;
    t10 = sqrt(t10);
    t1.x = t10 * t15;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t10 = t15 * t10 + t1.x;
    t2.y = t10 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0 = t10_0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t16 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16 = inversesqrt(t16);
    t2.xyz = vec3(t16) * vs_TEXCOORD5.yxz;
    t17 = vs_TEXCOORD5.z * t16 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t17 = t3.x * t17 + t2.y;
    t16 = (-vs_TEXCOORD5.y) * t16 + t17;
    t17 = max(abs(t2.z), abs(t2.y));
    tb17 = t17>=abs(t2.x);
    t17 = tb17 ? 1.0 : float(0.0);
    t16 = t17 * t16 + t2.x;
    ti8 = int((0.0<t16) ? 0xFFFFFFFFu : uint(0u));
    ti16 = int((t16<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti16 = (-ti8) + ti16;
    t4.y = float(ti16);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t8.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t8.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t17) * t1.xyz + t2.xyz;
    t6.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t6.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t11.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t11.y), abs(t11.x));
    t11.x = min(abs(t11.y), abs(t11.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t11.x);
    t2.y = dFdy(t11.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float tmpvar_2;
  tmpvar_2 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * alphaMask1);
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec2 uv_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_13);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_13.y, mix (tmpvar_13.x, tmpvar_13.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, -1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = tmpvar_17;
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_13.yxz), mix ((tmpvar_18 * tmpvar_13.xzy), (tmpvar_19 * tmpvar_13.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_12 = (((
    (0.5 * tmpvar_21.yz)
   / 
    abs(tmpvar_21.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_22;
  vec2 tmpvar_23;
  tmpvar_23 = abs((uv_12 - (0.5 * _DetailScale)));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, uv_12, tmpvar_24.xy, tmpvar_24.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_25, tmpvar_25)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_26.w;
  color_1.xyz = clamp ((tmpvar_26.xyz * (1.0 - tmpvar_26.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_26.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, tmpvar_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_6;
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  highp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = dFdx(uvCont_10);
  tmpvar_11.zw = dFdy(uvCont_10);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 v_14;
  v_14 = (tmpvar_13 * alphaMask1);
  mediump vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  mediump vec2 uv_16;
  mediump vec3 detailCoords_17;
  mediump float s_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_21);
  highp float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_20 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_19 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = mix (tmpvar_21.x, tmpvar_21.z, zxlerp_20);
  s_18 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_21.y, s_18, nylerp_19));
  s_18 = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, -1.0);
  tmpvar_27.y = -(s_18);
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = s_18;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_27 * tmpvar_21.xzy), (tmpvar_28 * tmpvar_21.zxy), vec3(zxlerp_20));
  detailCoords_17 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30.xy = vec2(1.0, 1.0);
  tmpvar_30.z = s_18;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_30 * tmpvar_21.yxz), detailCoords_17, vec3(nylerp_19));
  detailCoords_17 = tmpvar_31;
  uv_16 = (((
    (0.5 * detailCoords_17.yz)
   / 
    abs(detailCoords_17.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_32;
  uv_32 = uv_16;
  highp vec2 uvCont_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = abs((uv_32 - (0.5 * _DetailScale)));
  uvCont_33.x = max (tmpvar_34.x, tmpvar_34.y);
  uvCont_33.y = min (tmpvar_34.x, tmpvar_34.y);
  highp vec4 tmpvar_35;
  tmpvar_35.xy = dFdx(uvCont_33);
  tmpvar_35.zw = dFdy(uvCont_33);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, uv_16, tmpvar_35.xy, tmpvar_35.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  highp vec3 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_38, tmpvar_38)
  )), 0.0, 1.0);
  tmpvar_39 = tmpvar_40;
  mediump vec4 tmpvar_41;
  tmpvar_41 = ((_Color * tmpvar_15) * mix (tmpvar_37, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_39)));
  color_2 = tmpvar_41;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_42;
  tmpvar_42 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_43;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp vec3 t10;
bool tb10;
mediump vec3 t16_11;
highp float t16;
highp vec2 t17;
bool tb17;
highp int ti18;
highp float t24;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t24 = max(abs(t0.y), abs(t0.x));
    t24 = float(1.0) / t24;
    t1.x = min(abs(t0.y), abs(t0.x));
    t24 = t24 * t1.x;
    t1.x = t24 * t24;
    t9.x = t1.x * 0.0208350997 + -0.0851330012;
    t9.x = t1.x * t9.x + 0.180141002;
    t9.x = t1.x * t9.x + -0.330299497;
    t1.x = t1.x * t9.x + 0.999866009;
    t9.x = t24 * t1.x;
    t9.x = t9.x * -2.0 + 1.57079637;
    tb17 = abs(t0.y)<abs(t0.x);
    t9.x = tb17 ? t9.x : float(0.0);
    t24 = t24 * t1.x + t9.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t24 = t24 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t24) : t24;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t24 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t0.z) + -0.212114394;
    t24 = t24 * abs(t0.z) + 1.57072878;
    t16 = -abs(t0.z) + 1.0;
    t16 = sqrt(t16);
    t1.x = t16 * t24;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t16 = t24 * t16 + t1.x;
    t2.y = t16 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_4.xy = t10_0.xy * alphaMask1.xy;
    t16_4.x = t16_4.y + t16_4.x;
    t16_4.x = t10_0.z * alphaMask1.z + t16_4.x;
    t16_0.w = t10_0.w * alphaMask1.w + t16_4.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_4.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.z)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.z), abs(t9.y));
    tb2 = t2.x>=abs(t9.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.x;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t16_5.y = float(ti1);
    t16_4.y = (-t16_5.y);
    t3.xyz = t9.yzx * t16_4.xyz;
    t16_5.xz = vec2(1.0, -1.0);
    t6.xyz = t16_5.xyz * t9.zyx + (-t3.xyz);
    t10.xyz = t10.xxx * t6.xyz + t3.xyz;
    t10.xyz = (-t16_5.xxy) * t9.xyz + t10.xyz;
    t1.xyz = t9.xyz * t16_5.xxy;
    t1.xyz = t2.xxx * t10.xyz + t1.xyz;
    t16_4.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_4.xy = t16_4.xy / abs(t1.xx);
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t1.xy = t16_4.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_7.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_7.xyz = t10_7.xxx * t16_2.xyz;
    t10_7.xyz = clamp(t10_7.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_7.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
bvec2 tb1;
vec3 t2;
mediump vec4 t16_2;
vec3 t3;
bool tb3;
vec3 t4;
vec2 t6;
vec3 t8;
int ti8;
float t10;
vec2 t11;
bool tb11;
float t15;
float t16;
int ti16;
float t17;
bool tb17;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t15 = max(abs(t0.y), abs(t0.x));
    t15 = float(1.0) / t15;
    t1.x = min(abs(t0.y), abs(t0.x));
    t15 = t15 * t1.x;
    t1.x = t15 * t15;
    t6.x = t1.x * 0.0208350997 + -0.0851330012;
    t6.x = t1.x * t6.x + 0.180141002;
    t6.x = t1.x * t6.x + -0.330299497;
    t1.x = t1.x * t6.x + 0.999866009;
    t6.x = t15 * t1.x;
    t6.x = t6.x * -2.0 + 1.57079637;
    tb11 = abs(t0.y)<abs(t0.x);
    t6.x = tb11 ? t6.x : float(0.0);
    t15 = t15 * t1.x + t6.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t15 = t15 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t15) : t15;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t15 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t15 = t15 * abs(t0.z) + -0.212114394;
    t15 = t15 * abs(t0.z) + 1.57072878;
    t10 = -abs(t0.z) + 1.0;
    t10 = sqrt(t10);
    t1.x = t10 * t15;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t10 = t15 * t10 + t1.x;
    t2.y = t10 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0.xy = t10_0.xy * alphaMask1.xy;
    t0.x = t0.y + t0.x;
    t0.x = t10_0.z * alphaMask1.z + t0.x;
    t0.w = t10_0.w * alphaMask1.w + t0.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t16 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16 = inversesqrt(t16);
    t2.xyz = vec3(t16) * vs_TEXCOORD5.yxz;
    t17 = vs_TEXCOORD5.z * t16 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t17 = t3.x * t17 + t2.y;
    t16 = (-vs_TEXCOORD5.y) * t16 + t17;
    t17 = max(abs(t2.z), abs(t2.y));
    tb17 = t17>=abs(t2.x);
    t17 = tb17 ? 1.0 : float(0.0);
    t16 = t17 * t16 + t2.x;
    ti8 = int((0.0<t16) ? 0xFFFFFFFFu : uint(0u));
    ti16 = int((t16<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti16 = (-ti8) + ti16;
    t4.y = float(ti16);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t8.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t8.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t17) * t1.xyz + t2.xyz;
    t6.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t6.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t11.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t11.y), abs(t11.x));
    t11.x = min(abs(t11.y), abs(t11.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t11.x);
    t2.y = dFdy(t11.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 50 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec2 uv_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_4;
  tmpvar_4 = abs(tmpvar_3);
  float tmpvar_5;
  tmpvar_5 = float((tmpvar_4.z >= tmpvar_4.x));
  float tmpvar_6;
  tmpvar_6 = float((max (tmpvar_4.x, tmpvar_4.z) >= tmpvar_4.y));
  float tmpvar_7;
  tmpvar_7 = sign(mix (tmpvar_3.y, mix (tmpvar_3.x, tmpvar_3.z, tmpvar_5), tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = -(tmpvar_7);
  vec3 tmpvar_9;
  tmpvar_9.xz = vec2(1.0, -1.0);
  tmpvar_9.y = tmpvar_7;
  vec3 tmpvar_10;
  tmpvar_10.xy = vec2(1.0, 1.0);
  tmpvar_10.z = tmpvar_7;
  vec3 tmpvar_11;
  tmpvar_11 = mix ((tmpvar_10 * tmpvar_3.yxz), mix ((tmpvar_8 * tmpvar_3.xzy), (tmpvar_9 * tmpvar_3.zxy), vec3(tmpvar_5)), vec3(tmpvar_6));
  uv_2 = (((
    (0.5 * tmpvar_11.yz)
   / 
    abs(tmpvar_11.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((uv_2 - (0.5 * _DetailScale)));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_16;
  tmpvar_16 = ((_Color * textureCube (cube_MainTex, normalize(xlv_TEXCOORD4))) * mix (texture2DGradARB (_DetailTex, uv_2, tmpvar_14.xy, tmpvar_14.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_15, tmpvar_15)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_16.w;
  color_1.xyz = clamp ((tmpvar_16.xyz * (1.0 - tmpvar_16.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_16.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 50 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec2 uv_8;
  mediump vec3 detailCoords_9;
  mediump float s_10;
  mediump float nylerp_11;
  mediump float zxlerp_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_13);
  highp float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  zxlerp_12 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  nylerp_11 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = mix (tmpvar_13.x, tmpvar_13.z, zxlerp_12);
  s_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = sign(mix (tmpvar_13.y, s_10, nylerp_11));
  s_10 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, -1.0);
  tmpvar_19.y = -(s_10);
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, -1.0);
  tmpvar_20.y = s_10;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_19 * tmpvar_13.xzy), (tmpvar_20 * tmpvar_13.zxy), vec3(zxlerp_12));
  detailCoords_9 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22.xy = vec2(1.0, 1.0);
  tmpvar_22.z = s_10;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_22 * tmpvar_13.yxz), detailCoords_9, vec3(nylerp_11));
  detailCoords_9 = tmpvar_23;
  uv_8 = (((
    (0.5 * detailCoords_9.yz)
   / 
    abs(detailCoords_9.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_24;
  uv_24 = uv_8;
  highp vec2 uvCont_25;
  highp vec2 tmpvar_26;
  tmpvar_26 = abs((uv_24 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_DetailTex, uv_8, tmpvar_27.xy, tmpvar_27.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  highp vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_7) * mix (tmpvar_29, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_34;
  tmpvar_34 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp vec3 t9;
bool tb9;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_0.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_0.xy = t16_0.xy / abs(t1.xx);
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    t1.xy = t16_0.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_0 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t16_0 = t2.xxxx * t16_1 + t10_0;
    t2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t2.xyz);
    t16_1 = t10_1 * _Color;
    t10_6.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t3;
vec2 t4;
vec3 t6;
int ti6;
vec2 t8;
float t12;
int ti12;
float t13;
bool tb13;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vs_TEXCOORD5.yxz;
    t13 = vs_TEXCOORD5.z * t12 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t13 = t2.x * t13 + t1.y;
    t12 = (-vs_TEXCOORD5.y) * t12 + t13;
    t13 = max(abs(t1.z), abs(t1.y));
    tb13 = t13>=abs(t1.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t12 = t13 * t12 + t1.x;
    ti6 = int((0.0<t12) ? 0xFFFFFFFFu : uint(0u));
    ti12 = int((t12<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti12 = (-ti6) + ti12;
    t3.y = float(ti12);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t6.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t6.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    t0.xyz = vec3(t13) * t0.xyz + t1.xyz;
    t4.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t4.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t8.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t8.y), abs(t8.x));
    t8.x = min(abs(t8.y), abs(t8.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t8.x);
    t1.y = dFdy(t8.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1 = t10_1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t13 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t13);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * alphaMask1);
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec2 uv_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_5.y, mix (tmpvar_5.x, tmpvar_5.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, -1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, -1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_5.yxz), mix ((tmpvar_10 * tmpvar_5.xzy), (tmpvar_11 * tmpvar_5.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_4 = (((
    (0.5 * tmpvar_13.yz)
   / 
    abs(tmpvar_13.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_14;
  vec2 tmpvar_15;
  tmpvar_15 = abs((uv_4 - (0.5 * _DetailScale)));
  uvCont_14.x = max (tmpvar_15.x, tmpvar_15.y);
  uvCont_14.y = min (tmpvar_15.x, tmpvar_15.y);
  vec4 tmpvar_16;
  tmpvar_16.xy = dFdx(uvCont_14);
  tmpvar_16.zw = dFdy(uvCont_14);
  vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_18;
  tmpvar_18 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, uv_4, tmpvar_16.xy, tmpvar_16.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_17, tmpvar_17)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_18.w;
  color_1.xyz = clamp ((tmpvar_18.xyz * (1.0 - tmpvar_18.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_18.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_6;
  tmpvar_6 = textureCube (cube_MainTex, tmpvar_5);
  mediump vec4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  mediump vec4 v_8;
  v_8 = (tmpvar_7 * alphaMask1);
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  mediump vec2 uv_10;
  mediump vec3 detailCoords_11;
  mediump float s_12;
  mediump float nylerp_13;
  mediump float zxlerp_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_15);
  highp float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_14 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_13 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = mix (tmpvar_15.x, tmpvar_15.z, zxlerp_14);
  s_12 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_15.y, s_12, nylerp_13));
  s_12 = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, -1.0);
  tmpvar_21.y = -(s_12);
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, -1.0);
  tmpvar_22.y = s_12;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((tmpvar_21 * tmpvar_15.xzy), (tmpvar_22 * tmpvar_15.zxy), vec3(zxlerp_14));
  detailCoords_11 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24.xy = vec2(1.0, 1.0);
  tmpvar_24.z = s_12;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix ((tmpvar_24 * tmpvar_15.yxz), detailCoords_11, vec3(nylerp_13));
  detailCoords_11 = tmpvar_25;
  uv_10 = (((
    (0.5 * detailCoords_11.yz)
   / 
    abs(detailCoords_11.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_26;
  uv_26 = uv_10;
  highp vec2 uvCont_27;
  highp vec2 tmpvar_28;
  tmpvar_28 = abs((uv_26 - (0.5 * _DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  highp vec4 tmpvar_29;
  tmpvar_29.xy = dFdx(uvCont_27);
  tmpvar_29.zw = dFdy(uvCont_27);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_DetailTex, uv_10, tmpvar_29.xy, tmpvar_29.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  highp vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_32, tmpvar_32)
  )), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35 = ((_Color * tmpvar_9) * mix (tmpvar_31, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_33)));
  color_2 = tmpvar_35;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_36;
  tmpvar_36 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp vec3 t9;
bool tb9;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_0.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_0.xy = t16_0.xy / abs(t1.xx);
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    t1.xy = t16_0.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_0 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t16_0 = t2.xxxx * t16_1 + t10_0;
    t2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t2.xyz);
    t16_3.xy = t10_1.xy * alphaMask1.xy;
    t16_3.x = t16_3.y + t16_3.x;
    t16_3.x = t10_1.z * alphaMask1.z + t16_3.x;
    t16_1.w = t10_1.w * alphaMask1.w + t16_3.x;
    t16_1.xyz = vec3(1.0, 1.0, 1.0);
    t16_1 = t16_1 * _Color;
    t10_6.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t3;
vec2 t4;
vec3 t6;
int ti6;
vec2 t8;
float t12;
int ti12;
float t13;
bool tb13;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vs_TEXCOORD5.yxz;
    t13 = vs_TEXCOORD5.z * t12 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t13 = t2.x * t13 + t1.y;
    t12 = (-vs_TEXCOORD5.y) * t12 + t13;
    t13 = max(abs(t1.z), abs(t1.y));
    tb13 = t13>=abs(t1.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t12 = t13 * t12 + t1.x;
    ti6 = int((0.0<t12) ? 0xFFFFFFFFu : uint(0u));
    ti12 = int((t12<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti12 = (-ti6) + ti12;
    t3.y = float(ti12);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t6.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t6.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    t0.xyz = vec3(t13) * t0.xyz + t1.xyz;
    t4.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t4.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t8.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t8.y), abs(t8.x));
    t8.x = min(abs(t8.y), abs(t8.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t8.x);
    t1.y = dFdy(t8.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1.xy = t10_1.xy * alphaMask1.xy;
    t1.x = t1.y + t1.x;
    t1.x = t10_1.z * alphaMask1.z + t1.x;
    t1.w = t10_1.w * alphaMask1.w + t1.x;
    t1.xyz = vec3(1.0, 1.0, 1.0);
    t1 = t1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t13 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t13);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 83 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec2 uv_17;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_18.y, mix (tmpvar_18.x, tmpvar_18.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, -1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = tmpvar_22;
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_18.yxz), mix ((tmpvar_23 * tmpvar_18.xzy), (tmpvar_24 * tmpvar_18.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_17 = (((
    (0.5 * tmpvar_26.yz)
   / 
    abs(tmpvar_26.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_27;
  vec2 tmpvar_28;
  tmpvar_28 = abs((uv_17 - (0.5 * _DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  vec4 tmpvar_29;
  tmpvar_29.xy = dFdx(uvCont_27);
  tmpvar_29.zw = dFdy(uvCont_27);
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_31;
  tmpvar_31 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, uv_17, tmpvar_29.xy, tmpvar_29.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_30, tmpvar_30)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_31.w;
  color_1.xyz = clamp ((tmpvar_31.xyz * (1.0 - tmpvar_31.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_31.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 83 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  mediump vec3 detailCoords_5;
  mediump float s_6;
  mediump float nylerp_7;
  mediump float zxlerp_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, zxlerp_8);
  s_6 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, s_6, nylerp_7));
  s_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15.xz = vec2(1.0, -1.0);
  tmpvar_15.y = -(s_6);
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = s_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((tmpvar_15 * tmpvar_9.xzy), (tmpvar_16 * tmpvar_9.zxy), vec3(zxlerp_8));
  detailCoords_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = s_6;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_9.yxz), detailCoords_5, vec3(nylerp_7));
  detailCoords_5 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20 = (((0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + 0.5);
  highp vec2 uv_21;
  uv_21 = tmpvar_20;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_6 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_8), nylerp_7);
  mediump vec2 uv_31;
  mediump vec3 detailCoords_32;
  mediump float s_33;
  mediump float nylerp_34;
  mediump float zxlerp_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_37;
  tmpvar_37 = abs(tmpvar_36);
  highp float tmpvar_38;
  tmpvar_38 = float((tmpvar_37.z >= tmpvar_37.x));
  zxlerp_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = float((max (tmpvar_37.x, tmpvar_37.z) >= tmpvar_37.y));
  nylerp_34 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_36.x, tmpvar_36.z, zxlerp_35);
  s_33 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_36.y, s_33, nylerp_34));
  s_33 = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42.xz = vec2(1.0, -1.0);
  tmpvar_42.y = -(s_33);
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = s_33;
  highp vec3 tmpvar_44;
  tmpvar_44 = mix ((tmpvar_42 * tmpvar_36.xzy), (tmpvar_43 * tmpvar_36.zxy), vec3(zxlerp_35));
  detailCoords_32 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45.xy = vec2(1.0, 1.0);
  tmpvar_45.z = s_33;
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_45 * tmpvar_36.yxz), detailCoords_32, vec3(nylerp_34));
  detailCoords_32 = tmpvar_46;
  uv_31 = (((
    (0.5 * detailCoords_32.yz)
   / 
    abs(detailCoords_32.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_47;
  uv_47 = uv_31;
  highp vec2 uvCont_48;
  highp vec2 tmpvar_49;
  tmpvar_49 = abs((uv_47 - (0.5 * _DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  highp vec4 tmpvar_50;
  tmpvar_50.xy = dFdx(uvCont_48);
  tmpvar_50.zw = dFdy(uvCont_48);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DetailTex, uv_31, tmpvar_50.xy, tmpvar_50.zw);
  mediump vec4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  highp vec3 tmpvar_53;
  tmpvar_53 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = tmpvar_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = ((_Color * tmpvar_30) * mix (tmpvar_52, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t8;
lowp vec3 t10_9;
mediump vec2 t16_10;
highp vec3 t11;
highp vec3 t12;
bool tb12;
highp vec3 t14;
mediump vec3 t16_14;
bool tb14;
mediump float t16_20;
highp vec2 t22;
highp int ti22;
highp int ti24;
bool tb31;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12.x = tb12 ? 1.0 : float(0.0);
    t2.x = t12.x * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2 = t2.x>=abs(t11.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = t12.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t1.xyz = t11.xyz * t16_3.xxy;
    tb31 = t16_3.y>=0.0;
    t16_0.x = (tb31) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_10.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t1.xx);
    t16_3.xy = t16_10.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_10.y), abs(t16_10.x));
    t1.y = min(abs(t16_10.y), abs(t16_10.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12.x * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_1.w = t2.x * t16_0.x + t16_0.y;
    t16_1.xyz = t16_0.www;
    t16_0 = t16_1 * _Color;
    t16_6.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t12.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t12.y);
    tb14 = abs(t12.z)>=abs(t12.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t4.x = t14.x * t4.x + t12.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t12.z), abs(t12.y));
    tb4 = t4.x>=abs(t12.x);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t12.x;
    ti24 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti24) + ti2;
    t16_7.y = float(ti2);
    t16_6.y = (-t16_7.y);
    t5.xyz = t12.yzx * t16_6.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t8.xyz = t16_7.xyz * t12.zyx + (-t5.xyz);
    t14.xyz = t14.xxx * t8.xyz + t5.xyz;
    t14.xyz = (-t16_7.xxy) * t12.xyz + t14.xyz;
    t2.xyz = t12.xyz * t16_7.xxy;
    t2.xyz = t4.xxx * t14.xyz + t2.xyz;
    t16_6.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_6.xy = t16_6.xy / abs(t2.xx);
    t16_6.xy = t16_6.xy + vec2(0.5, 0.5);
    t2.xy = t16_6.xy * vec2(_DetailScale);
    t22.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t22.y), abs(t22.x));
    t22.x = min(abs(t22.y), abs(t22.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t22.x);
    t4.y = dFdy(t22.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_9.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_9.xyz = t10_9.xxx * t16_2.xyz;
    t10_9.xyz = clamp(t10_9.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_14.xyz = t10_9.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_14.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
lowp vec4 t10_5;
vec2 t6;
vec2 t7;
vec3 t8;
int ti8;
vec3 t9;
int ti9;
float t12;
vec2 t13;
float t18;
int ti18;
bool tb18;
float t19;
int ti19;
bool tb19;
float t20;
bool tb20;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD4.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t1.w = t19 * t0.x + t0.y;
    t1.xyz = t0.www;
    t0 = t1 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t2.xyz = vec3(t19) * vs_TEXCOORD5.yxz;
    t20 = vs_TEXCOORD5.z * t19 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t20 = t3.x * t20 + t2.y;
    t19 = (-vs_TEXCOORD5.y) * t19 + t20;
    t20 = max(abs(t2.z), abs(t2.y));
    tb20 = t20>=abs(t2.x);
    t20 = tb20 ? 1.0 : float(0.0);
    t19 = t20 * t19 + t2.x;
    ti9 = int((0.0<t19) ? 0xFFFFFFFFu : uint(0u));
    ti19 = int((t19<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti19 = (-ti9) + ti19;
    t4.y = float(ti19);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t9.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t9.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t20) * t1.xyz + t2.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * alphaMask1);
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec2 uv_19;
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_20.y, mix (tmpvar_20.x, tmpvar_20.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, -1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = tmpvar_24;
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_20.yxz), mix ((tmpvar_25 * tmpvar_20.xzy), (tmpvar_26 * tmpvar_20.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_19 = (((
    (0.5 * tmpvar_28.yz)
   / 
    abs(tmpvar_28.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((uv_19 - (0.5 * _DetailScale)));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, uv_19, tmpvar_31.xy, tmpvar_31.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_32, tmpvar_32)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_33.w;
  color_1.xyz = clamp ((tmpvar_33.xyz * (1.0 - tmpvar_33.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_33.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  mediump vec3 detailCoords_5;
  mediump float s_6;
  mediump float nylerp_7;
  mediump float zxlerp_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, zxlerp_8);
  s_6 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, s_6, nylerp_7));
  s_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15.xz = vec2(1.0, -1.0);
  tmpvar_15.y = -(s_6);
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = s_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((tmpvar_15 * tmpvar_9.xzy), (tmpvar_16 * tmpvar_9.zxy), vec3(zxlerp_8));
  detailCoords_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = s_6;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_9.yxz), detailCoords_5, vec3(nylerp_7));
  detailCoords_5 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20 = (((0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + 0.5);
  highp vec2 uv_21;
  uv_21 = tmpvar_20;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexPOS, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexNEG, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, vec4(float((s_6 >= 0.0))));
  mediump vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_8), nylerp_7);
  mediump vec4 v_31;
  v_31 = (tmpvar_30 * alphaMask1);
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  mediump vec2 uv_33;
  mediump vec3 detailCoords_34;
  mediump float s_35;
  mediump float nylerp_36;
  mediump float zxlerp_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_38);
  highp float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_37 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_36 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.x, tmpvar_38.z, zxlerp_37);
  s_35 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_38.y, s_35, nylerp_36));
  s_35 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = -(s_35);
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = s_35;
  highp vec3 tmpvar_46;
  tmpvar_46 = mix ((tmpvar_44 * tmpvar_38.xzy), (tmpvar_45 * tmpvar_38.zxy), vec3(zxlerp_37));
  detailCoords_34 = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47.xy = vec2(1.0, 1.0);
  tmpvar_47.z = s_35;
  highp vec3 tmpvar_48;
  tmpvar_48 = mix ((tmpvar_47 * tmpvar_38.yxz), detailCoords_34, vec3(nylerp_36));
  detailCoords_34 = tmpvar_48;
  uv_33 = (((
    (0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_49;
  uv_49 = uv_33;
  highp vec2 uvCont_50;
  highp vec2 tmpvar_51;
  tmpvar_51 = abs((uv_49 - (0.5 * _DetailScale)));
  uvCont_50.x = max (tmpvar_51.x, tmpvar_51.y);
  uvCont_50.y = min (tmpvar_51.x, tmpvar_51.y);
  highp vec4 tmpvar_52;
  tmpvar_52.xy = dFdx(uvCont_50);
  tmpvar_52.zw = dFdy(uvCont_50);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2DGradEXT (_DetailTex, uv_33, tmpvar_52.xy, tmpvar_52.zw);
  mediump vec4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  highp vec3 tmpvar_55;
  tmpvar_55 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_55, tmpvar_55)
  )), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = ((_Color * tmpvar_32) * mix (tmpvar_54, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_56)));
  color_2 = tmpvar_58;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_60;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
highp vec3 t11;
highp vec3 t12;
bool tb12;
highp vec3 t14;
mediump vec3 t16_14;
bool tb14;
mediump float t16_20;
highp vec2 t22;
highp int ti22;
highp int ti24;
bool tb31;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12.x = tb12 ? 1.0 : float(0.0);
    t2.x = t12.x * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2 = t2.x>=abs(t11.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = t12.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t1.xyz = t11.xyz * t16_3.xxy;
    tb31 = t16_3.y>=0.0;
    t16_0.x = (tb31) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_10.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t1.xx);
    t16_3.xy = t16_10.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_10.y), abs(t16_10.x));
    t1.y = min(abs(t16_10.y), abs(t16_10.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12.x * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_10.xyz = t16_0.www;
    t16_10.xy = t16_10.xy * alphaMask1.xy;
    t16_10.x = t16_10.y + t16_10.x;
    t16_10.x = t16_10.z * alphaMask1.z + t16_10.x;
    t16_0.w = t16_0.x * alphaMask1.w + t16_10.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_6.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t12.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t12.y);
    tb14 = abs(t12.z)>=abs(t12.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t4.x = t14.x * t4.x + t12.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t12.z), abs(t12.y));
    tb4 = t4.x>=abs(t12.x);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t12.x;
    ti24 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti24) + ti2;
    t16_7.y = float(ti2);
    t16_6.y = (-t16_7.y);
    t5.xyz = t12.yzx * t16_6.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t8.xyz = t16_7.xyz * t12.zyx + (-t5.xyz);
    t14.xyz = t14.xxx * t8.xyz + t5.xyz;
    t14.xyz = (-t16_7.xxy) * t12.xyz + t14.xyz;
    t2.xyz = t12.xyz * t16_7.xxy;
    t2.xyz = t4.xxx * t14.xyz + t2.xyz;
    t16_6.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_6.xy = t16_6.xy / abs(t2.xx);
    t16_6.xy = t16_6.xy + vec2(0.5, 0.5);
    t2.xy = t16_6.xy * vec2(_DetailScale);
    t22.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t22.y), abs(t22.x));
    t22.x = min(abs(t22.y), abs(t22.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t22.x);
    t4.y = dFdy(t22.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_9.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_9.xyz = t10_9.xxx * t16_2.xyz;
    t10_9.xyz = clamp(t10_9.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_14.xyz = t10_9.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_14.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
lowp vec4 t10_5;
vec3 t6;
vec2 t7;
vec3 t8;
int ti8;
vec3 t9;
int ti9;
float t12;
vec2 t13;
float t18;
int ti18;
bool tb18;
float t19;
int ti19;
bool tb19;
float t20;
bool tb20;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD4.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t0.x = t19 * t0.x + t0.y;
    t6.xyz = t0.www;
    t6.xy = t6.xy * alphaMask1.xy;
    t6.x = t6.y + t6.x;
    t6.x = t6.z * alphaMask1.z + t6.x;
    t0.w = t0.x * alphaMask1.w + t6.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t2.xyz = vec3(t19) * vs_TEXCOORD5.yxz;
    t20 = vs_TEXCOORD5.z * t19 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t20 = t3.x * t20 + t2.y;
    t19 = (-vs_TEXCOORD5.y) * t19 + t20;
    t20 = max(abs(t2.z), abs(t2.y));
    tb20 = t20>=abs(t2.x);
    t20 = tb20 ? 1.0 : float(0.0);
    t19 = t20 * t19 + t2.x;
    ti9 = int((0.0<t19) ? 0xFFFFFFFFu : uint(0u));
    ti19 = int((t19<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti19 = (-ti9) + ti19;
    t4.y = float(ti19);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t9.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t9.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t20) * t1.xyz + t2.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 89 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec2 uv_15;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_16);
  float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_16.y, mix (tmpvar_16.x, tmpvar_16.z, tmpvar_18), tmpvar_19));
  vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, -1.0);
  tmpvar_21.y = -(tmpvar_20);
  vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, -1.0);
  tmpvar_22.y = tmpvar_20;
  vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = tmpvar_20;
  vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_16.yxz), mix ((tmpvar_21 * tmpvar_16.xzy), (tmpvar_22 * tmpvar_16.zxy), vec3(tmpvar_18)), vec3(tmpvar_19));
  uv_15 = (((
    (0.5 * tmpvar_24.yz)
   / 
    abs(tmpvar_24.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_25;
  vec2 tmpvar_26;
  tmpvar_26 = abs((uv_15 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_29;
  tmpvar_29 = ((_Color * mix (
    mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), vec4(tmpvar_4))
  , vec4(tmpvar_5))) * mix (texture2DGradARB (_DetailTex, uv_15, tmpvar_27.xy, tmpvar_27.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_28, tmpvar_28)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_29.w;
  color_1.xyz = clamp ((tmpvar_29.xyz * (1.0 - tmpvar_29.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_29.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 89 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  mediump vec3 detailCoords_5;
  mediump float s_6;
  mediump float nylerp_7;
  mediump float zxlerp_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, zxlerp_8);
  s_6 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, s_6, nylerp_7));
  s_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15.xz = vec2(1.0, -1.0);
  tmpvar_15.y = -(s_6);
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = s_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((tmpvar_15 * tmpvar_9.xzy), (tmpvar_16 * tmpvar_9.zxy), vec3(zxlerp_8));
  detailCoords_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = s_6;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_9.yxz), detailCoords_5, vec3(nylerp_7));
  detailCoords_5 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20 = (((0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + 0.5);
  highp vec2 uv_21;
  uv_21 = tmpvar_20;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec2 uv_37;
  mediump vec3 detailCoords_38;
  mediump float s_39;
  mediump float nylerp_40;
  mediump float zxlerp_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_43;
  tmpvar_43 = abs(tmpvar_42);
  highp float tmpvar_44;
  tmpvar_44 = float((tmpvar_43.z >= tmpvar_43.x));
  zxlerp_41 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = float((max (tmpvar_43.x, tmpvar_43.z) >= tmpvar_43.y));
  nylerp_40 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = mix (tmpvar_42.x, tmpvar_42.z, zxlerp_41);
  s_39 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = sign(mix (tmpvar_42.y, s_39, nylerp_40));
  s_39 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48.xz = vec2(1.0, -1.0);
  tmpvar_48.y = -(s_39);
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = s_39;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix ((tmpvar_48 * tmpvar_42.xzy), (tmpvar_49 * tmpvar_42.zxy), vec3(zxlerp_41));
  detailCoords_38 = tmpvar_50;
  mediump vec3 tmpvar_51;
  tmpvar_51.xy = vec2(1.0, 1.0);
  tmpvar_51.z = s_39;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_51 * tmpvar_42.yxz), detailCoords_38, vec3(nylerp_40));
  detailCoords_38 = tmpvar_52;
  uv_37 = (((
    (0.5 * detailCoords_38.yz)
   / 
    abs(detailCoords_38.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_53;
  uv_53 = uv_37;
  highp vec2 uvCont_54;
  highp vec2 tmpvar_55;
  tmpvar_55 = abs((uv_53 - (0.5 * _DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  highp vec4 tmpvar_56;
  tmpvar_56.xy = dFdx(uvCont_54);
  tmpvar_56.zw = dFdy(uvCont_54);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_DetailTex, uv_37, tmpvar_56.xy, tmpvar_56.zw);
  mediump vec4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  highp vec3 tmpvar_59;
  tmpvar_59 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = ((_Color * mix (
    mix (tmpvar_30, tmpvar_32, vec4(float((s_6 >= 0.0))))
  , 
    mix (mix (tmpvar_26, tmpvar_28, vec4(float((s_6 >= 0.0)))), mix (tmpvar_34, tmpvar_36, vec4(float((s_6 >= 0.0)))), vec4(zxlerp_8))
  , vec4(nylerp_7))) * mix (tmpvar_58, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
lowp vec3 t10_11;
mediump vec2 t16_12;
highp vec3 t13;
highp vec3 t14;
bool tb14;
highp vec3 t17;
mediump vec3 t16_17;
bool tb17;
highp vec2 t26;
highp int ti26;
highp int ti29;
bool tb37;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t13.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t13.y);
    tb14 = abs(t13.z)>=abs(t13.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t2.x = t14.x * t2.x + t13.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t13.z), abs(t13.y));
    tb2 = t2.x>=abs(t13.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t13.x;
    ti26 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti26) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t13.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t13.zyx + (-t4.xyz);
    t4.xyz = t14.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t13.xyz + t4.xyz;
    t1.xyz = t13.xyz * t16_3.xxy;
    tb37 = t16_3.y>=0.0;
    t16_0.x = (tb37) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_12.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_12.xy = t16_12.xy / abs(t1.xx);
    t16_3.xy = t16_12.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_12.y), abs(t16_12.x));
    t1.y = min(abs(t16_12.y), abs(t16_12.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t14.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0 = t16_0 * _Color;
    t16_8.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t14.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t14.y);
    tb17 = abs(t14.z)>=abs(t14.y);
    t17.x = tb17 ? 1.0 : float(0.0);
    t5.x = t17.x * t5.x + t14.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t14.z), abs(t14.y));
    tb5 = t5.x>=abs(t14.x);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t14.x;
    ti29 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti29) + ti2;
    t16_9.y = float(ti2);
    t16_8.y = (-t16_9.y);
    t7.xyz = t14.yzx * t16_8.xyz;
    t16_9.xz = vec2(1.0, -1.0);
    t10.xyz = t16_9.xyz * t14.zyx + (-t7.xyz);
    t17.xyz = t17.xxx * t10.xyz + t7.xyz;
    t17.xyz = (-t16_9.xxy) * t14.xyz + t17.xyz;
    t2.xyz = t14.xyz * t16_9.xxy;
    t2.xyz = t5.xxx * t17.xyz + t2.xyz;
    t16_8.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_8.xy = t16_8.xy / abs(t2.xx);
    t16_8.xy = t16_8.xy + vec2(0.5, 0.5);
    t2.xy = t16_8.xy * vec2(_DetailScale);
    t26.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t26.y), abs(t26.x));
    t26.x = min(abs(t26.y), abs(t26.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t26.x);
    t5.y = dFdy(t26.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_11.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_11.xyz = t10_11.xxx * t16_2.xyz;
    t10_11.xyz = clamp(t10_11.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_17.xyz = t10_11.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_17.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec2 t9;
vec3 t10;
int ti10;
vec3 t11;
int ti11;
vec2 t17;
float t24;
int ti24;
bool tb24;
float t25;
int ti25;
bool tb25;
float t26;
bool tb26;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t25 = inversesqrt(t25);
    t2.xyz = vec3(t25) * vs_TEXCOORD5.yxz;
    t26 = vs_TEXCOORD5.z * t25 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t26 = t3.x * t26 + t2.y;
    t25 = (-vs_TEXCOORD5.y) * t25 + t26;
    t26 = max(abs(t2.z), abs(t2.y));
    tb26 = t26>=abs(t2.x);
    t26 = tb26 ? 1.0 : float(0.0);
    t25 = t26 * t25 + t2.x;
    ti11 = int((0.0<t25) ? 0xFFFFFFFFu : uint(0u));
    ti25 = int((t25<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti25 = (-ti11) + ti25;
    t4.y = float(ti25);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t11.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t11.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t26) * t1.xyz + t2.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec3 tmpvar_2;
  tmpvar_2 = -(gl_Vertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (gl_Vertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * gl_Vertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * alphaMask1);
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec2 uv_17;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_18.y, mix (tmpvar_18.x, tmpvar_18.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, -1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = tmpvar_22;
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_18.yxz), mix ((tmpvar_23 * tmpvar_18.xzy), (tmpvar_24 * tmpvar_18.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_17 = (((
    (0.5 * tmpvar_26.yz)
   / 
    abs(tmpvar_26.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_27;
  vec2 tmpvar_28;
  tmpvar_28 = abs((uv_17 - (0.5 * _DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  vec4 tmpvar_29;
  tmpvar_29.xy = dFdx(uvCont_27);
  tmpvar_29.zw = dFdy(uvCont_27);
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_31;
  tmpvar_31 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, uv_17, tmpvar_29.xy, tmpvar_29.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_30, tmpvar_30)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_31.w;
  color_1.xyz = clamp ((tmpvar_31.xyz * (1.0 - tmpvar_31.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_31.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, (float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1)));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 51 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c21, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 o4.x, c4, v0
dp4 o4.y, c5, v0
dp4 o4.z, c6, v0
dp4 o4.w, c7, v0
dp3 r0.x, -v0, -v0
rsq r0.y, r0.x
mul r1.xyz, r0.y, -v0
rcp r0.y, r0.y
dp3 r0.z, r1, c19
mul_sat r0.z, r0.z, c21.x
sge r0.w, c20.x, r0.y
mov o3.x, r0.y
mul o2.x, r0.z, r0.w
dp3 r0.y, -v0, -c19
mad r0.z, r0.y, -r0.y, r0.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r0.x, r0.z, -r0.z, r0.x
mul r0.z, r0.z, r0.z
mad r0.z, c20.x, c20.x, -r0.z
rsq r0.z, r0.z
rcp r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, -r0.x, r0.z
add r1.x, -r0.z, r0.y
add r0.z, r0.z, r0.y
sge r0.y, r0.y, c21.y
lrp r1.y, r0.y, r0.z, r0.x
lrp r2.x, r0.y, r1.x, r0.x
lrp r3.x, r0.w, r1.y, r2.x
mad r0, -c19, r3.x, v0
dp4 r1.w, c11, r0
dp4 r1.x, c8, r0
dp4 r1.y, c9, r0
dp4 r1.z, c10, r0
dp4 o6.x, c16, r1
dp4 o6.y, c17, r1
dp4 o6.z, c18, r1
mov o5.xyz, r1

"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedbcblogiefmefioanlgnkbdihdgblcnjhabaaaaaaieaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcdaahaaaaeaaaabaammabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaiaebaaaaaaaaaaaaaabaaaaaaiccaabaaaaaaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaabkaaaaaadicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaamiecelaaaaafecaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiicaabaaaaaaaaaaaakiacaaaaaaaaaaablaaaaaackaabaaaaaaaaaaa
dgaaaaafcccabaaaacaaaaaackaabaaaaaaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaabaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaadaaaaaaegiocaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaabaaaaaakccaabaaaaaaaaaaaegbcbaiaebaaaaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaabkaaaaaadcaaaaakicaabaaaaaaaaaaabkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaamicaabaaaaaaaaaaaakiacaaaaaaaaaaa
blaaaaaaakiacaaaaaaaaaaablaaaaaadkaabaiaebaaaaaaaaaaaaaaelaaaaaf
jcaabaaaaaaaaaaaagambaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaabkaabaaaaaaaaaaabnaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaaiicaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajicaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
abaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaalpcaabaaaaaaaaaaaegiocaia
ebaaaaaaaaaaaaaabkaaaaaaagaabaaaaaaaaaaaegbobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafhccabaaaaeaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
afaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec3 tmpvar_2;
  tmpvar_2 = -(_glesVertex.xyz);
  highp float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = -(_SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  highp float tmpvar_9;
  tmpvar_9 = sqrt(((_Radius * _Radius) - tmpvar_6));
  planetPos_1 = (_MainRotation * (_glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_Radius >= tmpvar_3)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_Object2World * _glesVertex);
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  mediump vec3 detailCoords_5;
  mediump float s_6;
  mediump float nylerp_7;
  mediump float zxlerp_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, zxlerp_8);
  s_6 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, s_6, nylerp_7));
  s_6 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15.xz = vec2(1.0, -1.0);
  tmpvar_15.y = -(s_6);
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = s_6;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix ((tmpvar_15 * tmpvar_9.xzy), (tmpvar_16 * tmpvar_9.zxy), vec3(zxlerp_8));
  detailCoords_5 = tmpvar_17;
  mediump vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = s_6;
  highp vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_9.yxz), detailCoords_5, vec3(nylerp_7));
  detailCoords_5 = tmpvar_19;
  mediump vec2 tmpvar_20;
  tmpvar_20 = (((0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + 0.5);
  highp vec2 uv_21;
  uv_21 = tmpvar_20;
  highp vec2 uvCont_22;
  highp vec2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  highp vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2DGradEXT (cube_MainTexxn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (cube_MainTexxp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (cube_MainTexyn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (cube_MainTexyp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (cube_MainTexzn, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (cube_MainTexzp, tmpvar_20, tmpvar_24.xy, tmpvar_24.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  mediump vec4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, vec4(
    float((s_6 >= 0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, vec4(float((s_6 >= 0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, vec4(float((s_6 >= 0.0))))
  , vec4(zxlerp_8)), vec4(nylerp_7)) * alphaMask1);
  mediump vec4 tmpvar_38;
  tmpvar_38.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  mediump vec2 uv_39;
  mediump vec3 detailCoords_40;
  mediump float s_41;
  mediump float nylerp_42;
  mediump float zxlerp_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  highp float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, zxlerp_43);
  s_41 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, s_41, nylerp_42));
  s_41 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = -(s_41);
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = s_41;
  highp vec3 tmpvar_52;
  tmpvar_52 = mix ((tmpvar_50 * tmpvar_44.xzy), (tmpvar_51 * tmpvar_44.zxy), vec3(zxlerp_43));
  detailCoords_40 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53.xy = vec2(1.0, 1.0);
  tmpvar_53.z = s_41;
  highp vec3 tmpvar_54;
  tmpvar_54 = mix ((tmpvar_53 * tmpvar_44.yxz), detailCoords_40, vec3(nylerp_42));
  detailCoords_40 = tmpvar_54;
  uv_39 = (((
    (0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_55;
  uv_55 = uv_39;
  highp vec2 uvCont_56;
  highp vec2 tmpvar_57;
  tmpvar_57 = abs((uv_55 - (0.5 * _DetailScale)));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  highp vec4 tmpvar_58;
  tmpvar_58.xy = dFdx(uvCont_56);
  tmpvar_58.zw = dFdy(uvCont_56);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DGradEXT (_DetailTex, uv_39, tmpvar_58.xy, tmpvar_58.zw);
  mediump vec4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  highp vec3 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_61, tmpvar_61)
  )), 0.0, 1.0);
  tmpvar_62 = tmpvar_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = ((_Color * tmpvar_38) * mix (tmpvar_60, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_62)));
  color_2 = tmpvar_64;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_66;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
highp vec3 t2;
bool tb2;
highp float t4;
highp float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
lowp vec3 t10_11;
mediump vec2 t16_12;
highp vec3 t13;
highp vec3 t14;
bool tb14;
highp vec3 t17;
mediump vec3 t16_17;
bool tb17;
highp vec2 t26;
highp int ti26;
highp int ti29;
bool tb37;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t13.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t13.y);
    tb14 = abs(t13.z)>=abs(t13.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t2.x = t14.x * t2.x + t13.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t13.z), abs(t13.y));
    tb2 = t2.x>=abs(t13.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t13.x;
    ti26 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti26) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t13.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t13.zyx + (-t4.xyz);
    t4.xyz = t14.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t13.xyz + t4.xyz;
    t1.xyz = t13.xyz * t16_3.xxy;
    tb37 = t16_3.y>=0.0;
    t16_0.x = (tb37) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_12.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_12.xy = t16_12.xy / abs(t1.xx);
    t16_3.xy = t16_12.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_12.y), abs(t16_12.x));
    t1.y = min(abs(t16_12.y), abs(t16_12.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t14.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.w = t16_0.w * alphaMask1.w + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_8.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t14.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t14.y);
    tb17 = abs(t14.z)>=abs(t14.y);
    t17.x = tb17 ? 1.0 : float(0.0);
    t5.x = t17.x * t5.x + t14.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t14.z), abs(t14.y));
    tb5 = t5.x>=abs(t14.x);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t14.x;
    ti29 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti29) + ti2;
    t16_9.y = float(ti2);
    t16_8.y = (-t16_9.y);
    t7.xyz = t14.yzx * t16_8.xyz;
    t16_9.xz = vec2(1.0, -1.0);
    t10.xyz = t16_9.xyz * t14.zyx + (-t7.xyz);
    t17.xyz = t17.xxx * t10.xyz + t7.xyz;
    t17.xyz = (-t16_9.xxy) * t14.xyz + t17.xyz;
    t2.xyz = t14.xyz * t16_9.xxy;
    t2.xyz = t5.xxx * t17.xyz + t2.xyz;
    t16_8.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_8.xy = t16_8.xy / abs(t2.xx);
    t16_8.xy = t16_8.xy + vec2(0.5, 0.5);
    t2.xy = t16_8.xy * vec2(_DetailScale);
    t26.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t26.y), abs(t26.x));
    t26.x = min(abs(t26.y), abs(t26.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t26.x);
    t5.y = dFdy(t26.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_11.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_11.xyz = t10_11.xxx * t16_2.xyz;
    t10_11.xyz = clamp(t10_11.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_17.xyz = t10_11.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_17.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 288 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float3 tmpvar_2;
  tmpvar_2 = -(_mtl_i._glesVertex.xyz);
  float tmpvar_3;
  tmpvar_3 = sqrt(dot (tmpvar_2, tmpvar_2));
  float tmpvar_4;
  float4 tmpvar_5;
  tmpvar_5 = -(_mtl_u._SunDir);
  tmpvar_4 = dot (tmpvar_2, tmpvar_5.xyz);
  float tmpvar_6;
  float tmpvar_7;
  tmpvar_7 = sqrt((dot (tmpvar_2, tmpvar_2) - (tmpvar_4 * tmpvar_4)));
  tmpvar_6 = (tmpvar_7 * tmpvar_7);
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_2, tmpvar_2) - tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_6));
  planetPos_1 = (_mtl_u._MainRotation * (_mtl_i._glesVertex + (tmpvar_5 * 
    mix (mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 - tmpvar_9), float((tmpvar_4 >= 0.0))), mix ((tmpvar_9 - tmpvar_8), (tmpvar_4 + tmpvar_9), float((tmpvar_4 >= 0.0))), float((_mtl_u._Radius >= tmpvar_3)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_3)) * clamp ((
    dot (normalize(tmpvar_2), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
vec3 t2;
bool tb2;
float t4;
float t6;
bool tb6;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0.x = dot((-in_POSITION0.xyz), (-in_POSITION0.xyz));
    t2.x = inversesqrt(t0.x);
    t2.xyz = t2.xxx * (-in_POSITION0.xyz);
    t2.x = dot(t2.xyz, _SunDir.xyz);
    t2.x = t2.x * 100.0;
    t2.x = clamp(t2.x, 0.0, 1.0);
    t4 = sqrt(t0.x);
    tb6 = _Radius>=t4;
    vs_TEXCOORD2 = t4;
    t4 = tb6 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t2.x * t4;
    t1 = in_POSITION0.yyyy * _Object2World[1];
    t1 = _Object2World[0] * in_POSITION0.xxxx + t1;
    t1 = _Object2World[2] * in_POSITION0.zzzz + t1;
    vs_TEXCOORD3 = _Object2World[3] * in_POSITION0.wwww + t1;
    t2.x = dot((-in_POSITION0.xyz), (-_SunDir.xyz));
    t6 = (-t2.x) * t2.x + t0.x;
    t6 = sqrt(t6);
    t0.x = (-t6) * t6 + t0.x;
    t6 = t6 * t6;
    t0.w = _Radius * _Radius + (-t6);
    t0.xw = sqrt(t0.xw);
    t0.x = (-t0.x) + t0.w;
    t1.x = t0.w + t2.x;
    t6 = (-t0.w) + t2.x;
    tb2 = t2.x>=0.0;
    t2.x = tb2 ? 1.0 : float(0.0);
    t6 = (-t0.x) + t6;
    t6 = t2.x * t6 + t0.x;
    t1.x = (-t0.x) + t1.x;
    t0.x = t2.x * t1.x + t0.x;
    t0.x = (-t6) + t0.x;
    t0.x = t4 * t0.x + t6;
    t0 = (-_SunDir) * t0.xxxx + in_POSITION0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec2 t9;
vec3 t10;
int ti10;
vec3 t11;
int ti11;
vec2 t17;
float t24;
int ti24;
bool tb24;
float t25;
int ti25;
bool tb25;
float t26;
bool tb26;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0.xy = t0.xy * alphaMask1.xy;
    t0.x = t0.y + t0.x;
    t0.x = t0.z * alphaMask1.z + t0.x;
    t0.w = t0.w * alphaMask1.w + t0.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t25 = inversesqrt(t25);
    t2.xyz = vec3(t25) * vs_TEXCOORD5.yxz;
    t26 = vs_TEXCOORD5.z * t25 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t26 = t3.x * t26 + t2.y;
    t25 = (-vs_TEXCOORD5.y) * t25 + t26;
    t26 = max(abs(t2.z), abs(t2.y));
    tb26 = t26>=abs(t2.x);
    t26 = tb26 ? 1.0 : float(0.0);
    t25 = t26 * t25 + t2.x;
    ti11 = int((0.0<t25) ? 0xFFFFFFFFu : uint(0u));
    ti25 = int((t25<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti25 = (-ti11) + ti25;
    t4.y = float(ti25);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t11.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t11.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t26) * t1.xyz + t2.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec2 uv_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_12;
  tmpvar_12 = abs(tmpvar_11);
  float tmpvar_13;
  tmpvar_13 = float((tmpvar_12.z >= tmpvar_12.x));
  float tmpvar_14;
  tmpvar_14 = float((max (tmpvar_12.x, tmpvar_12.z) >= tmpvar_12.y));
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_11.y, mix (tmpvar_11.x, tmpvar_11.z, tmpvar_13), tmpvar_14));
  vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(tmpvar_15);
  vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = tmpvar_15;
  vec3 tmpvar_18;
  tmpvar_18.xy = vec2(1.0, 1.0);
  tmpvar_18.z = tmpvar_15;
  vec3 tmpvar_19;
  tmpvar_19 = mix ((tmpvar_18 * tmpvar_11.yxz), mix ((tmpvar_16 * tmpvar_11.xzy), (tmpvar_17 * tmpvar_11.zxy), vec3(tmpvar_13)), vec3(tmpvar_14));
  uv_10 = (((
    (0.5 * tmpvar_19.yz)
   / 
    abs(tmpvar_19.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_20;
  vec2 tmpvar_21;
  tmpvar_21 = abs((uv_10 - (0.5 * _DetailScale)));
  uvCont_20.x = max (tmpvar_21.x, tmpvar_21.y);
  uvCont_20.y = min (tmpvar_21.x, tmpvar_21.y);
  vec4 tmpvar_22;
  tmpvar_22.xy = dFdx(uvCont_20);
  tmpvar_22.zw = dFdy(uvCont_20);
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_24;
  tmpvar_24 = ((_Color * texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw)) * mix (texture2DGradARB (_DetailTex, uv_10, tmpvar_22.xy, tmpvar_22.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_23, tmpvar_23)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_24.w;
  color_1.xyz = clamp ((tmpvar_24.xyz * (1.0 - tmpvar_24.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_24.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 uv_15;
  mediump vec3 detailCoords_16;
  mediump float s_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_20);
  highp float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_19 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_18 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_20.x, tmpvar_20.z, zxlerp_19);
  s_17 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_20.y, s_17, nylerp_18));
  s_17 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, -1.0);
  tmpvar_26.y = -(s_17);
  mediump vec3 tmpvar_27;
  tmpvar_27.xz = vec2(1.0, -1.0);
  tmpvar_27.y = s_17;
  highp vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_26 * tmpvar_20.xzy), (tmpvar_27 * tmpvar_20.zxy), vec3(zxlerp_19));
  detailCoords_16 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29.xy = vec2(1.0, 1.0);
  tmpvar_29.z = s_17;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_29 * tmpvar_20.yxz), detailCoords_16, vec3(nylerp_18));
  detailCoords_16 = tmpvar_30;
  uv_15 = (((
    (0.5 * detailCoords_16.yz)
   / 
    abs(detailCoords_16.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_31;
  uv_31 = uv_15;
  highp vec2 uvCont_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = abs((uv_31 - (0.5 * _DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  highp vec4 tmpvar_34;
  tmpvar_34.xy = dFdx(uvCont_32);
  tmpvar_34.zw = dFdy(uvCont_32);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, uv_15, tmpvar_34.xy, tmpvar_34.zw);
  mediump vec4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  highp vec3 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_14) * mix (tmpvar_36, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_41;
  tmpvar_41 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp vec3 t10;
bool tb10;
highp float t11;
mediump vec3 t16_11;
highp float t16;
highp vec2 t17;
bool tb17;
highp int ti18;
highp float t24;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t24 = max(abs(t0.y), abs(t0.x));
    t24 = float(1.0) / t24;
    t1.x = min(abs(t0.y), abs(t0.x));
    t24 = t24 * t1.x;
    t1.x = t24 * t24;
    t9.x = t1.x * 0.0208350997 + -0.0851330012;
    t9.x = t1.x * t9.x + 0.180141002;
    t9.x = t1.x * t9.x + -0.330299497;
    t1.x = t1.x * t9.x + 0.999866009;
    t9.x = t24 * t1.x;
    t9.x = t9.x * -2.0 + 1.57079637;
    tb17 = abs(t0.y)<abs(t0.x);
    t9.x = tb17 ? t9.x : float(0.0);
    t24 = t24 * t1.x + t9.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t24 = t24 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t24) : t24;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t24 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t0.z) + -0.212114394;
    t24 = t24 * abs(t0.z) + 1.57072878;
    t16 = -abs(t0.z) + 1.0;
    t16 = sqrt(t16);
    t1.x = t16 * t24;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t16 = t24 * t16 + t1.x;
    t2.y = t16 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_0 = t10_0 * _Color;
    t16_4.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.z)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.z), abs(t9.y));
    tb2 = t2.x>=abs(t9.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.x;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t16_5.y = float(ti1);
    t16_4.y = (-t16_5.y);
    t3.xyz = t9.yzx * t16_4.xyz;
    t16_5.xz = vec2(1.0, -1.0);
    t6.xyz = t16_5.xyz * t9.zyx + (-t3.xyz);
    t10.xyz = t10.xxx * t6.xyz + t3.xyz;
    t10.xyz = (-t16_5.xxy) * t9.xyz + t10.xyz;
    t1.xyz = t9.xyz * t16_5.xxy;
    t1.xyz = t2.xxx * t10.xyz + t1.xyz;
    t16_4.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_4.xy = t16_4.xy / abs(t1.xx);
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t1.xy = t16_4.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_7.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_7.xyz = t10_7.xxx * t16_2.xyz;
    t10_7.xyz = clamp(t10_7.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_7.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t3.x = t11 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
bvec2 tb1;
vec3 t2;
mediump vec4 t16_2;
vec3 t3;
bool tb3;
vec3 t4;
vec2 t6;
vec3 t8;
int ti8;
float t10;
vec2 t11;
bool tb11;
float t15;
float t16;
int ti16;
float t17;
bool tb17;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t15 = max(abs(t0.y), abs(t0.x));
    t15 = float(1.0) / t15;
    t1.x = min(abs(t0.y), abs(t0.x));
    t15 = t15 * t1.x;
    t1.x = t15 * t15;
    t6.x = t1.x * 0.0208350997 + -0.0851330012;
    t6.x = t1.x * t6.x + 0.180141002;
    t6.x = t1.x * t6.x + -0.330299497;
    t1.x = t1.x * t6.x + 0.999866009;
    t6.x = t15 * t1.x;
    t6.x = t6.x * -2.0 + 1.57079637;
    tb11 = abs(t0.y)<abs(t0.x);
    t6.x = tb11 ? t6.x : float(0.0);
    t15 = t15 * t1.x + t6.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t15 = t15 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t15) : t15;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t15 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t15 = t15 * abs(t0.z) + -0.212114394;
    t15 = t15 * abs(t0.z) + 1.57072878;
    t10 = -abs(t0.z) + 1.0;
    t10 = sqrt(t10);
    t1.x = t10 * t15;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t10 = t15 * t10 + t1.x;
    t2.y = t10 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0 = t10_0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t16 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16 = inversesqrt(t16);
    t2.xyz = vec3(t16) * vs_TEXCOORD5.yxz;
    t17 = vs_TEXCOORD5.z * t16 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t17 = t3.x * t17 + t2.y;
    t16 = (-vs_TEXCOORD5.y) * t16 + t17;
    t17 = max(abs(t2.z), abs(t2.y));
    tb17 = t17>=abs(t2.x);
    t17 = tb17 ? 1.0 : float(0.0);
    t16 = t17 * t16 + t2.x;
    ti8 = int((0.0<t16) ? 0xFFFFFFFFu : uint(0u));
    ti16 = int((t16<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti16 = (-ti8) + ti16;
    t4.y = float(ti16);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t8.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t8.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t17) * t1.xyz + t2.xyz;
    t6.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t6.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t11.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t11.y), abs(t11.x));
    t11.x = min(abs(t11.y), abs(t11.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t11.x);
    t2.y = dFdy(t11.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  float shadowCheck_2;
  shadowCheck_2 = ((float(
    (xlv_TEXCOORD0.w >= 0.0)
  ) * xlv_TEXCOORD1) * clamp ((0.2 * 
    ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius)
  ), 0.0, 1.0));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD4);
  vec2 uv_4;
  float tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (min (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0) / max (abs(
    (tmpvar_3.x / tmpvar_3.z)
  ), 1.0));
  float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  tmpvar_7 = (((
    ((((
      ((((-0.01213232 * tmpvar_7) + 0.05368138) * tmpvar_7) - 0.1173503)
     * tmpvar_7) + 0.1938925) * tmpvar_7) - 0.3326756)
   * tmpvar_7) + 0.9999793) * tmpvar_6);
  tmpvar_7 = (tmpvar_7 + (float(
    (abs((tmpvar_3.x / tmpvar_3.z)) > 1.0)
  ) * (
    (tmpvar_7 * -2.0)
   + 1.570796)));
  tmpvar_5 = (tmpvar_7 * sign((tmpvar_3.x / tmpvar_3.z)));
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        tmpvar_5 += 3.141593;
      } else {
        tmpvar_5 = (tmpvar_5 - 3.141593);
      };
    };
  } else {
    tmpvar_5 = (sign(tmpvar_3.x) * 1.570796);
  };
  uv_4.x = (0.5 + (0.1591549 * tmpvar_5));
  uv_4.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_3.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_3.y)
    )) * (1.570796 + (
      abs(tmpvar_3.y)
     * 
      (-0.2146018 + (abs(tmpvar_3.y) * (0.08656672 + (
        abs(tmpvar_3.y)
       * -0.03102955))))
    ))))
  )));
  vec2 uvCont_8;
  uvCont_8.y = uv_4.y;
  uvCont_8.x = abs((uv_4.x - 0.5));
  vec4 tmpvar_9;
  tmpvar_9.xy = dFdx(uvCont_8);
  tmpvar_9.zw = dFdy(uvCont_8);
  vec4 v_10;
  v_10 = (texture2DGradARB (_MainTex, uv_4, tmpvar_9.xy, tmpvar_9.zw) * alphaMask1);
  vec4 tmpvar_11;
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = ((v_10.x + v_10.y) + (v_10.z + v_10.w));
  vec2 uv_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_13);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  float tmpvar_17;
  tmpvar_17 = sign(mix (tmpvar_13.y, mix (tmpvar_13.x, tmpvar_13.z, tmpvar_15), tmpvar_16));
  vec3 tmpvar_18;
  tmpvar_18.xz = vec2(1.0, -1.0);
  tmpvar_18.y = -(tmpvar_17);
  vec3 tmpvar_19;
  tmpvar_19.xz = vec2(1.0, -1.0);
  tmpvar_19.y = tmpvar_17;
  vec3 tmpvar_20;
  tmpvar_20.xy = vec2(1.0, 1.0);
  tmpvar_20.z = tmpvar_17;
  vec3 tmpvar_21;
  tmpvar_21 = mix ((tmpvar_20 * tmpvar_13.yxz), mix ((tmpvar_18 * tmpvar_13.xzy), (tmpvar_19 * tmpvar_13.zxy), vec3(tmpvar_15)), vec3(tmpvar_16));
  uv_12 = (((
    (0.5 * tmpvar_21.yz)
   / 
    abs(tmpvar_21.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_22;
  vec2 tmpvar_23;
  tmpvar_23 = abs((uv_12 - (0.5 * _DetailScale)));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  vec4 tmpvar_24;
  tmpvar_24.xy = dFdx(uvCont_22);
  tmpvar_24.zw = dFdy(uvCont_22);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * tmpvar_11) * mix (texture2DGradARB (_DetailTex, uv_12, tmpvar_24.xy, tmpvar_24.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_25, tmpvar_25)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_26.w;
  color_1.xyz = clamp ((tmpvar_26.xyz * (1.0 - tmpvar_26.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_26.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, shadowCheck_2));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  highp vec2 uv_7;
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  highp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  highp vec2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  highp vec4 tmpvar_12;
  tmpvar_12.xy = dFdx(uvCont_11);
  tmpvar_12.zw = dFdy(uvCont_11);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 v_15;
  v_15 = (tmpvar_14 * alphaMask1);
  mediump vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  mediump vec2 uv_17;
  mediump vec3 detailCoords_18;
  mediump float s_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_23;
  tmpvar_23 = abs(tmpvar_22);
  highp float tmpvar_24;
  tmpvar_24 = float((tmpvar_23.z >= tmpvar_23.x));
  zxlerp_21 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = float((max (tmpvar_23.x, tmpvar_23.z) >= tmpvar_23.y));
  nylerp_20 = tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_22.x, tmpvar_22.z, zxlerp_21);
  s_19 = tmpvar_26;
  highp float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, s_19, nylerp_20));
  s_19 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28.xz = vec2(1.0, -1.0);
  tmpvar_28.y = -(s_19);
  mediump vec3 tmpvar_29;
  tmpvar_29.xz = vec2(1.0, -1.0);
  tmpvar_29.y = s_19;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_28 * tmpvar_22.xzy), (tmpvar_29 * tmpvar_22.zxy), vec3(zxlerp_21));
  detailCoords_18 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31.xy = vec2(1.0, 1.0);
  tmpvar_31.z = s_19;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix ((tmpvar_31 * tmpvar_22.yxz), detailCoords_18, vec3(nylerp_20));
  detailCoords_18 = tmpvar_32;
  uv_17 = (((
    (0.5 * detailCoords_18.yz)
   / 
    abs(detailCoords_18.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_33;
  uv_33 = uv_17;
  highp vec2 uvCont_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = abs((uv_33 - (0.5 * _DetailScale)));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  highp vec4 tmpvar_36;
  tmpvar_36.xy = dFdx(uvCont_34);
  tmpvar_36.zw = dFdy(uvCont_34);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2DGradEXT (_DetailTex, uv_17, tmpvar_36.xy, tmpvar_36.zw);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  highp vec3 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_39, tmpvar_39)
  )), 0.0, 1.0);
  tmpvar_40 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tmpvar_16) * mix (tmpvar_38, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_40)));
  color_2 = tmpvar_42;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_44;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp int ti0;
bool tb0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
bvec2 tb1;
highp vec2 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp vec3 t10;
bool tb10;
highp float t11;
mediump vec3 t16_11;
highp float t16;
highp vec2 t17;
bool tb17;
highp int ti18;
highp float t24;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t24 = max(abs(t0.y), abs(t0.x));
    t24 = float(1.0) / t24;
    t1.x = min(abs(t0.y), abs(t0.x));
    t24 = t24 * t1.x;
    t1.x = t24 * t24;
    t9.x = t1.x * 0.0208350997 + -0.0851330012;
    t9.x = t1.x * t9.x + 0.180141002;
    t9.x = t1.x * t9.x + -0.330299497;
    t1.x = t1.x * t9.x + 0.999866009;
    t9.x = t24 * t1.x;
    t9.x = t9.x * -2.0 + 1.57079637;
    tb17 = abs(t0.y)<abs(t0.x);
    t9.x = tb17 ? t9.x : float(0.0);
    t24 = t24 * t1.x + t9.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t24 = t24 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t24) : t24;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t24 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t24 = t24 * abs(t0.z) + -0.212114394;
    t24 = t24 * abs(t0.z) + 1.57072878;
    t16 = -abs(t0.z) + 1.0;
    t16 = sqrt(t16);
    t1.x = t16 * t24;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t16 = t24 * t16 + t1.x;
    t2.y = t16 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t16_4.xy = t10_0.xy * alphaMask1.xy;
    t16_4.x = t16_4.y + t16_4.x;
    t16_4.x = t10_0.z * alphaMask1.z + t16_4.x;
    t16_0.w = t10_0.w * alphaMask1.w + t16_4.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_4.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t9.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t9.y);
    tb10 = abs(t9.z)>=abs(t9.y);
    t10.x = tb10 ? 1.0 : float(0.0);
    t2.x = t10.x * t2.x + t9.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t9.z), abs(t9.y));
    tb2 = t2.x>=abs(t9.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t9.x;
    ti18 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti18) + ti1;
    t16_5.y = float(ti1);
    t16_4.y = (-t16_5.y);
    t3.xyz = t9.yzx * t16_4.xyz;
    t16_5.xz = vec2(1.0, -1.0);
    t6.xyz = t16_5.xyz * t9.zyx + (-t3.xyz);
    t10.xyz = t10.xxx * t6.xyz + t3.xyz;
    t10.xyz = (-t16_5.xxy) * t9.xyz + t10.xyz;
    t1.xyz = t9.xyz * t16_5.xxy;
    t1.xyz = t2.xxx * t10.xyz + t1.xyz;
    t16_4.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_4.xy = t16_4.xy / abs(t1.xx);
    t16_4.xy = t16_4.xy + vec2(0.5, 0.5);
    t1.xy = t16_4.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t16_1 = t3.xxxx * t16_2 + t10_1;
    t10_7.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_7.xyz = t10_7.xxx * t16_2.xyz;
    t10_7.xyz = clamp(t10_7.xyz, 0.0, 1.0);
    t3.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_7.xyz + vec3(-1.0, -1.0, -1.0);
    t3.xyz = t3.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t3.xyz + vec3(-1.0, -1.0, -1.0);
    tb3 = vs_TEXCOORD0.w>=0.0;
    t3.x = tb3 ? 1.0 : float(0.0);
    t3.x = t3.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t3.x = t11 * t3.x;
    t16_0 = t3.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D _MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
int ti0;
bool tb0;
vec4 t1;
lowp vec4 t10_1;
bvec2 tb1;
vec3 t2;
mediump vec4 t16_2;
vec3 t3;
bool tb3;
vec3 t4;
vec2 t6;
vec3 t8;
int ti8;
float t10;
vec2 t11;
bool tb11;
float t15;
float t16;
int ti16;
float t17;
bool tb17;
void main()
{
    t0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t0.x = inversesqrt(t0.x);
    t0.xyz = t0.xxx * vs_TEXCOORD4.xzy;
    t15 = max(abs(t0.y), abs(t0.x));
    t15 = float(1.0) / t15;
    t1.x = min(abs(t0.y), abs(t0.x));
    t15 = t15 * t1.x;
    t1.x = t15 * t15;
    t6.x = t1.x * 0.0208350997 + -0.0851330012;
    t6.x = t1.x * t6.x + 0.180141002;
    t6.x = t1.x * t6.x + -0.330299497;
    t1.x = t1.x * t6.x + 0.999866009;
    t6.x = t15 * t1.x;
    t6.x = t6.x * -2.0 + 1.57079637;
    tb11 = abs(t0.y)<abs(t0.x);
    t6.x = tb11 ? t6.x : float(0.0);
    t15 = t15 * t1.x + t6.x;
    tb1.xy = lessThan(t0.yzyy, (-t0.yzyy)).xy;
    t1.x = tb1.x ? -3.14159274 : float(0.0);
    t15 = t15 + t1.x;
    t1.x = min(t0.y, t0.x);
    tb1.x = t1.x<(-t1.x);
    t0.x = max(t0.y, t0.x);
    tb0 = t0.x>=(-t0.x);
    ti0 = int(uint(tb0) * 0xffffffffu & uint(tb1.x) * 0xffffffffu);
    t0.x = (ti0 != 0) ? (-t15) : t15;
    t2.x = t0.x * 0.159154937 + 0.5;
    t0.x = t0.x * 0.159154937;
    t0.x = abs(t0.x);
    t3.x = dFdx(t0.x);
    t0.x = dFdy(t0.x);
    t15 = abs(t0.z) * -0.0187292993 + 0.0742610022;
    t15 = t15 * abs(t0.z) + -0.212114394;
    t15 = t15 * abs(t0.z) + 1.57072878;
    t10 = -abs(t0.z) + 1.0;
    t10 = sqrt(t10);
    t1.x = t10 * t15;
    t1.x = t1.x * -2.0 + 3.14159274;
    t1.x = tb1.y ? t1.x : float(0.0);
    t10 = t15 * t10 + t1.x;
    t2.y = t10 * 0.318309873;
    t3.y = dFdx(t2.y);
    t0.y = dFdy(t2.y);
    t10_0 = textureGrad(_MainTex, t2.xy, vec4(t3.xyxx).xy, vec4(t0.xyxx).xy);
    t0.xy = t10_0.xy * alphaMask1.xy;
    t0.x = t0.y + t0.x;
    t0.x = t10_0.z * alphaMask1.z + t0.x;
    t0.w = t10_0.w * alphaMask1.w + t0.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t16 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t16 = inversesqrt(t16);
    t2.xyz = vec3(t16) * vs_TEXCOORD5.yxz;
    t17 = vs_TEXCOORD5.z * t16 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t17 = t3.x * t17 + t2.y;
    t16 = (-vs_TEXCOORD5.y) * t16 + t17;
    t17 = max(abs(t2.z), abs(t2.y));
    tb17 = t17>=abs(t2.x);
    t17 = tb17 ? 1.0 : float(0.0);
    t16 = t17 * t16 + t2.x;
    ti8 = int((0.0<t16) ? 0xFFFFFFFFu : uint(0u));
    ti16 = int((t16<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti16 = (-ti8) + ti16;
    t4.y = float(ti16);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t8.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t8.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t17) * t1.xyz + t2.xyz;
    t6.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t6.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t11.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t11.y), abs(t11.x));
    t11.x = min(abs(t11.y), abs(t11.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t11.x);
    t2.y = dFdy(t11.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t16 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t16);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1.x = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1.x ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t6.x = vs_TEXCOORD2 + 5.0;
    t6.x = t6.x + (-_PlanetRadius);
    t6.x = t6.x * 0.200000003;
    t6.x = clamp(t6.x, 0.0, 1.0);
    t1.x = t6.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec2 uv_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_4;
  tmpvar_4 = abs(tmpvar_3);
  float tmpvar_5;
  tmpvar_5 = float((tmpvar_4.z >= tmpvar_4.x));
  float tmpvar_6;
  tmpvar_6 = float((max (tmpvar_4.x, tmpvar_4.z) >= tmpvar_4.y));
  float tmpvar_7;
  tmpvar_7 = sign(mix (tmpvar_3.y, mix (tmpvar_3.x, tmpvar_3.z, tmpvar_5), tmpvar_6));
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = -(tmpvar_7);
  vec3 tmpvar_9;
  tmpvar_9.xz = vec2(1.0, -1.0);
  tmpvar_9.y = tmpvar_7;
  vec3 tmpvar_10;
  tmpvar_10.xy = vec2(1.0, 1.0);
  tmpvar_10.z = tmpvar_7;
  vec3 tmpvar_11;
  tmpvar_11 = mix ((tmpvar_10 * tmpvar_3.yxz), mix ((tmpvar_8 * tmpvar_3.xzy), (tmpvar_9 * tmpvar_3.zxy), vec3(tmpvar_5)), vec3(tmpvar_6));
  uv_2 = (((
    (0.5 * tmpvar_11.yz)
   / 
    abs(tmpvar_11.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((uv_2 - (0.5 * _DetailScale)));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_16;
  tmpvar_16 = ((_Color * textureCube (cube_MainTex, normalize(xlv_TEXCOORD4))) * mix (texture2DGradARB (_DetailTex, uv_2, tmpvar_14.xy, tmpvar_14.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_15, tmpvar_15)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_16.w;
  color_1.xyz = clamp ((tmpvar_16.xyz * (1.0 - tmpvar_16.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_16.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec2 uv_9;
  mediump vec3 detailCoords_10;
  mediump float s_11;
  mediump float nylerp_12;
  mediump float zxlerp_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_14);
  highp float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_13 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_12 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_14.x, tmpvar_14.z, zxlerp_13);
  s_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_14.y, s_11, nylerp_12));
  s_11 = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20.xz = vec2(1.0, -1.0);
  tmpvar_20.y = -(s_11);
  mediump vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, -1.0);
  tmpvar_21.y = s_11;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix ((tmpvar_20 * tmpvar_14.xzy), (tmpvar_21 * tmpvar_14.zxy), vec3(zxlerp_13));
  detailCoords_10 = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = s_11;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_14.yxz), detailCoords_10, vec3(nylerp_12));
  detailCoords_10 = tmpvar_24;
  uv_9 = (((
    (0.5 * detailCoords_10.yz)
   / 
    abs(detailCoords_10.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_25;
  uv_25 = uv_9;
  highp vec2 uvCont_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = abs((uv_25 - (0.5 * _DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  highp vec4 tmpvar_28;
  tmpvar_28.xy = dFdx(uvCont_26);
  tmpvar_28.zw = dFdy(uvCont_26);
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DGradEXT (_DetailTex, uv_9, tmpvar_28.xy, tmpvar_28.zw);
  mediump vec4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  highp vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34 = ((_Color * tmpvar_8) * mix (tmpvar_30, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_35;
  tmpvar_35 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp vec3 t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_0.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_0.xy = t16_0.xy / abs(t1.xx);
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    t1.xy = t16_0.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_0 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t16_0 = t2.xxxx * t16_1 + t10_0;
    t2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t2.xyz);
    t16_1 = t10_1 * _Color;
    t10_6.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t3;
vec2 t4;
float t5;
vec3 t6;
int ti6;
vec2 t8;
float t12;
int ti12;
float t13;
bool tb13;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vs_TEXCOORD5.yxz;
    t13 = vs_TEXCOORD5.z * t12 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t13 = t2.x * t13 + t1.y;
    t12 = (-vs_TEXCOORD5.y) * t12 + t13;
    t13 = max(abs(t1.z), abs(t1.y));
    tb13 = t13>=abs(t1.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t12 = t13 * t12 + t1.x;
    ti6 = int((0.0<t12) ? 0xFFFFFFFFu : uint(0u));
    ti12 = int((t12<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti12 = (-ti6) + ti12;
    t3.y = float(ti12);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t6.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t6.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    t0.xyz = vec3(t13) * t0.xyz + t1.xyz;
    t4.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t4.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t8.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t8.y), abs(t8.x));
    t8.x = min(abs(t8.y), abs(t8.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t8.x);
    t1.y = dFdy(t8.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1 = t10_1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t13 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t13);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t5 = vs_TEXCOORD2 + 5.0;
    t5 = t5 + (-_PlanetRadius);
    t5 = t5 * 0.200000003;
    t5 = clamp(t5, 0.0, 1.0);
    t1.x = t5 * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform samplerCube cube_MainTex;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec4 v_2;
  v_2 = (textureCube (cube_MainTex, normalize(xlv_TEXCOORD4)) * alphaMask1);
  vec4 tmpvar_3;
  tmpvar_3.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_3.w = ((v_2.x + v_2.y) + (v_2.z + v_2.w));
  vec2 uv_4;
  vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_6;
  tmpvar_6 = abs(tmpvar_5);
  float tmpvar_7;
  tmpvar_7 = float((tmpvar_6.z >= tmpvar_6.x));
  float tmpvar_8;
  tmpvar_8 = float((max (tmpvar_6.x, tmpvar_6.z) >= tmpvar_6.y));
  float tmpvar_9;
  tmpvar_9 = sign(mix (tmpvar_5.y, mix (tmpvar_5.x, tmpvar_5.z, tmpvar_7), tmpvar_8));
  vec3 tmpvar_10;
  tmpvar_10.xz = vec2(1.0, -1.0);
  tmpvar_10.y = -(tmpvar_9);
  vec3 tmpvar_11;
  tmpvar_11.xz = vec2(1.0, -1.0);
  tmpvar_11.y = tmpvar_9;
  vec3 tmpvar_12;
  tmpvar_12.xy = vec2(1.0, 1.0);
  tmpvar_12.z = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = mix ((tmpvar_12 * tmpvar_5.yxz), mix ((tmpvar_10 * tmpvar_5.xzy), (tmpvar_11 * tmpvar_5.zxy), vec3(tmpvar_7)), vec3(tmpvar_8));
  uv_4 = (((
    (0.5 * tmpvar_13.yz)
   / 
    abs(tmpvar_13.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_14;
  vec2 tmpvar_15;
  tmpvar_15 = abs((uv_4 - (0.5 * _DetailScale)));
  uvCont_14.x = max (tmpvar_15.x, tmpvar_15.y);
  uvCont_14.y = min (tmpvar_15.x, tmpvar_15.y);
  vec4 tmpvar_16;
  tmpvar_16.xy = dFdx(uvCont_14);
  tmpvar_16.zw = dFdy(uvCont_14);
  vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_18;
  tmpvar_18 = ((_Color * tmpvar_3) * mix (texture2DGradARB (_DetailTex, uv_4, tmpvar_16.xy, tmpvar_16.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_17, tmpvar_17)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_18.w;
  color_1.xyz = clamp ((tmpvar_18.xyz * (1.0 - tmpvar_18.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_18.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform lowp samplerCube cube_MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD4);
  lowp vec4 tmpvar_7;
  tmpvar_7 = textureCube (cube_MainTex, tmpvar_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  mediump vec4 v_9;
  v_9 = (tmpvar_8 * alphaMask1);
  mediump vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  mediump vec2 uv_11;
  mediump vec3 detailCoords_12;
  mediump float s_13;
  mediump float nylerp_14;
  mediump float zxlerp_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_16);
  highp float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  zxlerp_15 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  nylerp_14 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = mix (tmpvar_16.x, tmpvar_16.z, zxlerp_15);
  s_13 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = sign(mix (tmpvar_16.y, s_13, nylerp_14));
  s_13 = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, -1.0);
  tmpvar_22.y = -(s_13);
  mediump vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, -1.0);
  tmpvar_23.y = s_13;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_22 * tmpvar_16.xzy), (tmpvar_23 * tmpvar_16.zxy), vec3(zxlerp_15));
  detailCoords_12 = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = s_13;
  highp vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_16.yxz), detailCoords_12, vec3(nylerp_14));
  detailCoords_12 = tmpvar_26;
  uv_11 = (((
    (0.5 * detailCoords_12.yz)
   / 
    abs(detailCoords_12.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_27;
  uv_27 = uv_11;
  highp vec2 uvCont_28;
  highp vec2 tmpvar_29;
  tmpvar_29 = abs((uv_27 - (0.5 * _DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  highp vec4 tmpvar_30;
  tmpvar_30.xy = dFdx(uvCont_28);
  tmpvar_30.zw = dFdy(uvCont_28);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_DetailTex, uv_11, tmpvar_30.xy, tmpvar_30.zw);
  mediump vec4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  highp vec3 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_33, tmpvar_33)
  )), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  mediump vec4 tmpvar_36;
  tmpvar_36 = ((_Color * tmpvar_10) * mix (tmpvar_32, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_34)));
  color_2 = tmpvar_36;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_37;
  tmpvar_37 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_38;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp samplerCube cube_MainTex;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
mediump vec3 t16_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp vec3 t9;
bool tb9;
highp float t11;
mediump vec3 t16_11;
highp vec2 t15;
highp int ti16;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t1.x = inversesqrt(t1.x);
    t8.xyz = t1.xxx * vs_TEXCOORD5.yxz;
    t2.x = vs_TEXCOORD5.z * t1.x + (-t8.y);
    tb9 = abs(t8.z)>=abs(t8.y);
    t9.x = tb9 ? 1.0 : float(0.0);
    t2.x = t9.x * t2.x + t8.y;
    t1.x = (-vs_TEXCOORD5.y) * t1.x + t2.x;
    t2.x = max(abs(t8.z), abs(t8.y));
    tb2 = t2.x>=abs(t8.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t8.x;
    ti16 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti16) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t8.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t8.zyx + (-t4.xyz);
    t9.xyz = t9.xxx * t5.xyz + t4.xyz;
    t9.xyz = (-t16_3.xxy) * t8.xyz + t9.xyz;
    t1.xyz = t8.xyz * t16_3.xxy;
    t1.xyz = t2.xxx * t9.xyz + t1.xyz;
    t16_0.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_0.xy = t16_0.xy / abs(t1.xx);
    t16_0.xy = t16_0.xy + vec2(0.5, 0.5);
    t1.xy = t16_0.xy * vec2(_DetailScale);
    t15.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t15.y), abs(t15.x));
    t15.x = min(abs(t15.y), abs(t15.x));
    t4.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t4.y = dFdx(t15.x);
    t2.y = dFdy(t15.x);
    t10_0 = textureGrad(_DetailTex, t1.xy, vec4(t4.xyxx).xy, vec4(t2.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t16_0 = t2.xxxx * t16_1 + t10_0;
    t2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t2.x = inversesqrt(t2.x);
    t2.xyz = t2.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t2.xyz);
    t16_3.xy = t10_1.xy * alphaMask1.xy;
    t16_3.x = t16_3.y + t16_3.x;
    t16_3.x = t10_1.z * alphaMask1.z + t16_3.x;
    t16_1.w = t10_1.w * alphaMask1.w + t16_3.x;
    t16_1.xyz = vec3(1.0, 1.0, 1.0);
    t16_1 = t16_1 * _Color;
    t10_6.x = (-t16_1.w) * t16_0.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_1.w * t16_0.w + -1.0;
    t10_6.xyz = t10_6.xxx * t16_2.xyz;
    t10_6.xyz = clamp(t10_6.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_11.xyz = t10_6.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_11.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t11 = vs_TEXCOORD2 + 5.0;
    t11 = t11 + (-_PlanetRadius);
    t11 = t11 * 0.200000003;
    t11 = clamp(t11, 0.0, 1.0);
    t4.x = t11 * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  samplerCube cube_MainTex;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
lowp vec4 t10_0;
vec4 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t3;
vec2 t4;
float t5;
vec3 t6;
int ti6;
vec2 t8;
float t12;
int ti12;
float t13;
bool tb13;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t12 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t12 = inversesqrt(t12);
    t1.xyz = vec3(t12) * vs_TEXCOORD5.yxz;
    t13 = vs_TEXCOORD5.z * t12 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t13 = t2.x * t13 + t1.y;
    t12 = (-vs_TEXCOORD5.y) * t12 + t13;
    t13 = max(abs(t1.z), abs(t1.y));
    tb13 = t13>=abs(t1.x);
    t13 = tb13 ? 1.0 : float(0.0);
    t12 = t13 * t12 + t1.x;
    ti6 = int((0.0<t12) ? 0xFFFFFFFFu : uint(0u));
    ti12 = int((t12<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti12 = (-ti6) + ti12;
    t3.y = float(ti12);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t6.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t6.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    t0.xyz = vec3(t13) * t0.xyz + t1.xyz;
    t4.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t4.xy / abs(t0.xx);
    t0.xy = t0.xy + vec2(0.5, 0.5);
    t0.xy = t0.xy * vec2(_DetailScale);
    t8.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t0.xy;
    t1.x = max(abs(t8.y), abs(t8.x));
    t8.x = min(abs(t8.y), abs(t8.x));
    t2.x = dFdx(t1.x);
    t1.x = dFdy(t1.x);
    t2.y = dFdx(t8.x);
    t1.y = dFdy(t8.x);
    t10_0 = textureGrad(_DetailTex, t0.xy, vec4(t2.xyxx).xy, vec4(t1.xyxx).xy);
    t16_1 = (-t10_0) + vec4(1.0, 1.0, 1.0, 1.0);
    t2.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t2.x = dot(t2.xyz, t2.xyz);
    t2.x = sqrt(t2.x);
    t2.x = dot(t2.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t2.x = clamp(t2.x, 0.0, 1.0);
    t0 = t2.xxxx * t16_1 + t10_0;
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t1.xyz = t1.xxx * vs_TEXCOORD4.xyz;
    t10_1 = texture(cube_MainTex, t1.xyz);
    t1.xy = t10_1.xy * alphaMask1.xy;
    t1.x = t1.y + t1.x;
    t1.x = t10_1.z * alphaMask1.z + t1.x;
    t1.w = t10_1.w * alphaMask1.w + t1.x;
    t1.xyz = vec3(1.0, 1.0, 1.0);
    t1 = t1 * _Color;
    t2.x = (-t1.w) * t0.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t13 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t13);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t5 = vs_TEXCOORD2 + 5.0;
    t5 = t5 + (-_PlanetRadius);
    t5 = t5 * 0.200000003;
    t5 = clamp(t5, 0.0, 1.0);
    t1.x = t5 * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec2 uv_17;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_18.y, mix (tmpvar_18.x, tmpvar_18.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, -1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = tmpvar_22;
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_18.yxz), mix ((tmpvar_23 * tmpvar_18.xzy), (tmpvar_24 * tmpvar_18.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_17 = (((
    (0.5 * tmpvar_26.yz)
   / 
    abs(tmpvar_26.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_27;
  vec2 tmpvar_28;
  tmpvar_28 = abs((uv_17 - (0.5 * _DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  vec4 tmpvar_29;
  tmpvar_29.xy = dFdx(uvCont_27);
  tmpvar_29.zw = dFdy(uvCont_27);
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_31;
  tmpvar_31 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, uv_17, tmpvar_29.xy, tmpvar_29.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_30, tmpvar_30)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_31.w;
  color_1.xyz = clamp ((tmpvar_31.xyz * (1.0 - tmpvar_31.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_31.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  highp vec2 uv_22;
  uv_22 = tmpvar_21;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_9), nylerp_8);
  mediump vec2 uv_32;
  mediump vec3 detailCoords_33;
  mediump float s_34;
  mediump float nylerp_35;
  mediump float zxlerp_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_35 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = mix (tmpvar_37.x, tmpvar_37.z, zxlerp_36);
  s_34 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_37.y, s_34, nylerp_35));
  s_34 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43.xz = vec2(1.0, -1.0);
  tmpvar_43.y = -(s_34);
  mediump vec3 tmpvar_44;
  tmpvar_44.xz = vec2(1.0, -1.0);
  tmpvar_44.y = s_34;
  highp vec3 tmpvar_45;
  tmpvar_45 = mix ((tmpvar_43 * tmpvar_37.xzy), (tmpvar_44 * tmpvar_37.zxy), vec3(zxlerp_36));
  detailCoords_33 = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46.xy = vec2(1.0, 1.0);
  tmpvar_46.z = s_34;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_46 * tmpvar_37.yxz), detailCoords_33, vec3(nylerp_35));
  detailCoords_33 = tmpvar_47;
  uv_32 = (((
    (0.5 * detailCoords_33.yz)
   / 
    abs(detailCoords_33.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_48;
  uv_48 = uv_32;
  highp vec2 uvCont_49;
  highp vec2 tmpvar_50;
  tmpvar_50 = abs((uv_48 - (0.5 * _DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  highp vec4 tmpvar_51;
  tmpvar_51.xy = dFdx(uvCont_49);
  tmpvar_51.zw = dFdy(uvCont_49);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2DGradEXT (_DetailTex, uv_32, tmpvar_51.xy, tmpvar_51.zw);
  mediump vec4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  highp vec3 tmpvar_54;
  tmpvar_54 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = ((_Color * tmpvar_31) * mix (tmpvar_53, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t8;
lowp vec3 t10_9;
mediump vec2 t16_10;
highp vec3 t11;
highp vec3 t12;
bool tb12;
highp vec3 t14;
mediump vec3 t16_14;
bool tb14;
mediump float t16_20;
highp vec2 t22;
highp int ti22;
highp int ti24;
bool tb31;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12.x = tb12 ? 1.0 : float(0.0);
    t2.x = t12.x * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2 = t2.x>=abs(t11.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = t12.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t1.xyz = t11.xyz * t16_3.xxy;
    tb31 = t16_3.y>=0.0;
    t16_0.x = (tb31) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_10.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t1.xx);
    t16_3.xy = t16_10.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_10.y), abs(t16_10.x));
    t1.y = min(abs(t16_10.y), abs(t16_10.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12.x * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_1.w = t2.x * t16_0.x + t16_0.y;
    t16_1.xyz = t16_0.www;
    t16_0 = t16_1 * _Color;
    t16_6.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t12.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t12.y);
    tb14 = abs(t12.z)>=abs(t12.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t4.x = t14.x * t4.x + t12.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t12.z), abs(t12.y));
    tb4 = t4.x>=abs(t12.x);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t12.x;
    ti24 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti24) + ti2;
    t16_7.y = float(ti2);
    t16_6.y = (-t16_7.y);
    t5.xyz = t12.yzx * t16_6.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t8.xyz = t16_7.xyz * t12.zyx + (-t5.xyz);
    t14.xyz = t14.xxx * t8.xyz + t5.xyz;
    t14.xyz = (-t16_7.xxy) * t12.xyz + t14.xyz;
    t2.xyz = t12.xyz * t16_7.xxy;
    t2.xyz = t4.xxx * t14.xyz + t2.xyz;
    t16_6.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_6.xy = t16_6.xy / abs(t2.xx);
    t16_6.xy = t16_6.xy + vec2(0.5, 0.5);
    t2.xy = t16_6.xy * vec2(_DetailScale);
    t22.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t22.y), abs(t22.x));
    t22.x = min(abs(t22.y), abs(t22.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t22.x);
    t4.y = dFdy(t22.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_9.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_9.xyz = t10_9.xxx * t16_2.xyz;
    t10_9.xyz = clamp(t10_9.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_14.xyz = t10_9.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_14.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t14.x = vs_TEXCOORD2 + 5.0;
    t14.x = t14.x + (-_PlanetRadius);
    t14.x = t14.x * 0.200000003;
    t14.x = clamp(t14.x, 0.0, 1.0);
    t4.x = t14.x * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
lowp vec4 t10_5;
vec2 t6;
vec2 t7;
vec3 t8;
int ti8;
vec3 t9;
int ti9;
float t12;
vec2 t13;
float t18;
int ti18;
bool tb18;
float t19;
int ti19;
bool tb19;
float t20;
bool tb20;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD4.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t1.w = t19 * t0.x + t0.y;
    t1.xyz = t0.www;
    t0 = t1 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t2.xyz = vec3(t19) * vs_TEXCOORD5.yxz;
    t20 = vs_TEXCOORD5.z * t19 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t20 = t3.x * t20 + t2.y;
    t19 = (-vs_TEXCOORD5.y) * t19 + t20;
    t20 = max(abs(t2.z), abs(t2.y));
    tb20 = t20>=abs(t2.x);
    t20 = tb20 ? 1.0 : float(0.0);
    t19 = t20 * t19 + t2.x;
    ti9 = int((0.0<t19) ? 0xFFFFFFFFu : uint(0u));
    ti19 = int((t19<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti19 = (-ti9) + ti19;
    t4.y = float(ti19);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t9.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t9.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t20) * t1.xyz + t2.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 93 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 tmpvar_15;
  tmpvar_15 = mix (texture2DGradARB (cube_MainTexNEG, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexPOS, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))));
  vec4 tmpvar_16;
  tmpvar_16.x = tmpvar_15.w;
  tmpvar_16.y = tmpvar_15.w;
  tmpvar_16.z = tmpvar_15.w;
  tmpvar_16.w = mix (tmpvar_15.y, mix (tmpvar_15.x, tmpvar_15.z, tmpvar_4), tmpvar_5);
  vec4 v_17;
  v_17 = (tmpvar_16 * alphaMask1);
  vec4 tmpvar_18;
  tmpvar_18.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_18.w = ((v_17.x + v_17.y) + (v_17.z + v_17.w));
  vec2 uv_19;
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_20.y, mix (tmpvar_20.x, tmpvar_20.z, tmpvar_22), tmpvar_23));
  vec3 tmpvar_25;
  tmpvar_25.xz = vec2(1.0, -1.0);
  tmpvar_25.y = -(tmpvar_24);
  vec3 tmpvar_26;
  tmpvar_26.xz = vec2(1.0, -1.0);
  tmpvar_26.y = tmpvar_24;
  vec3 tmpvar_27;
  tmpvar_27.xy = vec2(1.0, 1.0);
  tmpvar_27.z = tmpvar_24;
  vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_27 * tmpvar_20.yxz), mix ((tmpvar_25 * tmpvar_20.xzy), (tmpvar_26 * tmpvar_20.zxy), vec3(tmpvar_22)), vec3(tmpvar_23));
  uv_19 = (((
    (0.5 * tmpvar_28.yz)
   / 
    abs(tmpvar_28.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_29;
  vec2 tmpvar_30;
  tmpvar_30 = abs((uv_19 - (0.5 * _DetailScale)));
  uvCont_29.x = max (tmpvar_30.x, tmpvar_30.y);
  uvCont_29.y = min (tmpvar_30.x, tmpvar_30.y);
  vec4 tmpvar_31;
  tmpvar_31.xy = dFdx(uvCont_29);
  tmpvar_31.zw = dFdy(uvCont_29);
  vec3 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_33;
  tmpvar_33 = ((_Color * tmpvar_18) * mix (texture2DGradARB (_DetailTex, uv_19, tmpvar_31.xy, tmpvar_31.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_32, tmpvar_32)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_33.w;
  color_1.xyz = clamp ((tmpvar_33.xyz * (1.0 - tmpvar_33.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_33.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 93 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_MainTexPOS;
uniform sampler2D cube_MainTexNEG;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  highp vec2 uv_22;
  uv_22 = tmpvar_21;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexPOS, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexNEG, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  mediump vec4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, vec4(float((s_7 >= 0.0))));
  mediump vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_9), nylerp_8);
  mediump vec4 v_32;
  v_32 = (tmpvar_31 * alphaMask1);
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  mediump vec2 uv_34;
  mediump vec3 detailCoords_35;
  mediump float s_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  highp float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  zxlerp_38 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  nylerp_37 = tmpvar_42;
  highp float tmpvar_43;
  tmpvar_43 = mix (tmpvar_39.x, tmpvar_39.z, zxlerp_38);
  s_36 = tmpvar_43;
  highp float tmpvar_44;
  tmpvar_44 = sign(mix (tmpvar_39.y, s_36, nylerp_37));
  s_36 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45.xz = vec2(1.0, -1.0);
  tmpvar_45.y = -(s_36);
  mediump vec3 tmpvar_46;
  tmpvar_46.xz = vec2(1.0, -1.0);
  tmpvar_46.y = s_36;
  highp vec3 tmpvar_47;
  tmpvar_47 = mix ((tmpvar_45 * tmpvar_39.xzy), (tmpvar_46 * tmpvar_39.zxy), vec3(zxlerp_38));
  detailCoords_35 = tmpvar_47;
  mediump vec3 tmpvar_48;
  tmpvar_48.xy = vec2(1.0, 1.0);
  tmpvar_48.z = s_36;
  highp vec3 tmpvar_49;
  tmpvar_49 = mix ((tmpvar_48 * tmpvar_39.yxz), detailCoords_35, vec3(nylerp_37));
  detailCoords_35 = tmpvar_49;
  uv_34 = (((
    (0.5 * detailCoords_35.yz)
   / 
    abs(detailCoords_35.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_50;
  uv_50 = uv_34;
  highp vec2 uvCont_51;
  highp vec2 tmpvar_52;
  tmpvar_52 = abs((uv_50 - (0.5 * _DetailScale)));
  uvCont_51.x = max (tmpvar_52.x, tmpvar_52.y);
  uvCont_51.y = min (tmpvar_52.x, tmpvar_52.y);
  highp vec4 tmpvar_53;
  tmpvar_53.xy = dFdx(uvCont_51);
  tmpvar_53.zw = dFdy(uvCont_51);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_DetailTex, uv_34, tmpvar_53.xy, tmpvar_53.zw);
  mediump vec4 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  highp vec3 tmpvar_56;
  tmpvar_56 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_56, tmpvar_56)
  )), 0.0, 1.0);
  tmpvar_57 = tmpvar_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = ((_Color * tmpvar_33) * mix (tmpvar_55, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_57)));
  color_2 = tmpvar_59;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_61;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexPOS;
uniform lowp sampler2D cube_MainTexNEG;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
bool tb4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t8;
lowp vec3 t10_9;
mediump vec3 t16_10;
highp vec3 t11;
highp vec3 t12;
bool tb12;
highp vec3 t14;
mediump vec3 t16_14;
bool tb14;
mediump float t16_20;
highp vec2 t22;
highp int ti22;
highp int ti24;
bool tb31;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t11.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t11.y);
    tb12 = abs(t11.z)>=abs(t11.y);
    t12.x = tb12 ? 1.0 : float(0.0);
    t2.x = t12.x * t2.x + t11.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t11.z), abs(t11.y));
    tb2 = t2.x>=abs(t11.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t11.x;
    ti22 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti22) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t11.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t11.zyx + (-t4.xyz);
    t4.xyz = t12.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t11.xyz + t4.xyz;
    t1.xyz = t11.xyz * t16_3.xxy;
    tb31 = t16_3.y>=0.0;
    t16_0.x = (tb31) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_10.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_10.xy = t16_10.xy / abs(t1.xx);
    t16_3.xy = t16_10.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_10.y), abs(t16_10.x));
    t1.y = min(abs(t16_10.y), abs(t16_10.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexPOS, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_3);
    t16_0 = t16_0.xxxx * t16_1 + t10_3;
    t16_20 = (-t16_0.x) + t16_0.z;
    t16_0.x = t12.x * t16_20 + t16_0.x;
    t16_0.x = (-t16_0.y) + t16_0.x;
    t16_0.x = t2.x * t16_0.x + t16_0.y;
    t16_10.xyz = t16_0.www;
    t16_10.xy = t16_10.xy * alphaMask1.xy;
    t16_10.x = t16_10.y + t16_10.x;
    t16_10.x = t16_10.z * alphaMask1.z + t16_10.x;
    t16_0.w = t16_0.x * alphaMask1.w + t16_10.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_6.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t12.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t4.x = vs_TEXCOORD5.z * t2.x + (-t12.y);
    tb14 = abs(t12.z)>=abs(t12.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t4.x = t14.x * t4.x + t12.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t4.x;
    t4.x = max(abs(t12.z), abs(t12.y));
    tb4 = t4.x>=abs(t12.x);
    t4.x = tb4 ? 1.0 : float(0.0);
    t2.x = t4.x * t2.x + t12.x;
    ti24 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti24) + ti2;
    t16_7.y = float(ti2);
    t16_6.y = (-t16_7.y);
    t5.xyz = t12.yzx * t16_6.xyz;
    t16_7.xz = vec2(1.0, -1.0);
    t8.xyz = t16_7.xyz * t12.zyx + (-t5.xyz);
    t14.xyz = t14.xxx * t8.xyz + t5.xyz;
    t14.xyz = (-t16_7.xxy) * t12.xyz + t14.xyz;
    t2.xyz = t12.xyz * t16_7.xxy;
    t2.xyz = t4.xxx * t14.xyz + t2.xyz;
    t16_6.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_6.xy = t16_6.xy / abs(t2.xx);
    t16_6.xy = t16_6.xy + vec2(0.5, 0.5);
    t2.xy = t16_6.xy * vec2(_DetailScale);
    t22.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t4.x = max(abs(t22.y), abs(t22.x));
    t22.x = min(abs(t22.y), abs(t22.x));
    t5.x = dFdx(t4.x);
    t4.x = dFdy(t4.x);
    t5.y = dFdx(t22.x);
    t4.y = dFdy(t22.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t5.xyxx).xy, vec4(t4.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t4.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t4.x = dot(t4.xyz, t4.xyz);
    t4.x = sqrt(t4.x);
    t4.x = dot(t4.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t4.x = clamp(t4.x, 0.0, 1.0);
    t16_1 = t4.xxxx * t16_2 + t10_1;
    t10_9.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_9.xyz = t10_9.xxx * t16_2.xyz;
    t10_9.xyz = clamp(t10_9.xyz, 0.0, 1.0);
    t4.x = t16_2.w * _ShadowFactor;
    t16_14.xyz = t10_9.xyz + vec3(-1.0, -1.0, -1.0);
    t4.xyz = t4.xxx * t16_14.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t4.xyz + vec3(-1.0, -1.0, -1.0);
    tb4 = vs_TEXCOORD0.w>=0.0;
    t4.x = tb4 ? 1.0 : float(0.0);
    t4.x = t4.x * vs_TEXCOORD1;
    t14.x = vs_TEXCOORD2 + 5.0;
    t14.x = t14.x + (-_PlanetRadius);
    t14.x = t14.x * 0.200000003;
    t14.x = clamp(t14.x, 0.0, 1.0);
    t4.x = t14.x * t4.x;
    t16_0 = t4.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexPOS;
uniform  sampler2D cube_MainTexNEG;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec3 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
lowp vec4 t10_5;
vec3 t6;
vec2 t7;
vec3 t8;
int ti8;
vec3 t9;
int ti9;
float t12;
vec2 t13;
float t18;
int ti18;
bool tb18;
float t19;
int ti19;
bool tb19;
float t20;
bool tb20;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t18 = inversesqrt(t18);
    t1.xyz = vec3(t18) * vs_TEXCOORD4.yxz;
    t19 = vs_TEXCOORD4.z * t18 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t19 = t2.x * t19 + t1.y;
    t18 = (-vs_TEXCOORD4.y) * t18 + t19;
    t19 = max(abs(t1.z), abs(t1.y));
    tb19 = t19>=abs(t1.x);
    t19 = tb19 ? 1.0 : float(0.0);
    t18 = t19 * t18 + t1.x;
    ti8 = int((0.0<t18) ? 0xFFFFFFFFu : uint(0u));
    ti18 = int((t18<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti18 = (-ti8) + ti18;
    t3.y = float(ti18);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t8.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t8.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb18 = t3.y>=0.0;
    t18 = tb18 ? 1.0 : float(0.0);
    t0.xyz = vec3(t19) * t0.xyz + t1.xyz;
    t6.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t6.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexPOS, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexNEG, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t18) * t16_4 + t10_3;
    t12 = (-t0.x) + t0.z;
    t0.x = t2.x * t12 + t0.x;
    t0.x = (-t0.y) + t0.x;
    t0.x = t19 * t0.x + t0.y;
    t6.xyz = t0.www;
    t6.xy = t6.xy * alphaMask1.xy;
    t6.x = t6.y + t6.x;
    t6.x = t6.z * alphaMask1.z + t6.x;
    t0.w = t0.x * alphaMask1.w + t6.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t19 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t19 = inversesqrt(t19);
    t2.xyz = vec3(t19) * vs_TEXCOORD5.yxz;
    t20 = vs_TEXCOORD5.z * t19 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t20 = t3.x * t20 + t2.y;
    t19 = (-vs_TEXCOORD5.y) * t19 + t20;
    t20 = max(abs(t2.z), abs(t2.y));
    tb20 = t20>=abs(t2.x);
    t20 = tb20 ? 1.0 : float(0.0);
    t19 = t20 * t19 + t2.x;
    ti9 = int((0.0<t19) ? 0xFFFFFFFFu : uint(0u));
    ti19 = int((t19<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti19 = (-ti9) + ti19;
    t4.y = float(ti19);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t9.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t9.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t20) * t1.xyz + t2.xyz;
    t7.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t7.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t13.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t13.y), abs(t13.x));
    t13.x = min(abs(t13.y), abs(t13.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t13.x);
    t2.y = dFdy(t13.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t19 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t19);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t7.x = vs_TEXCOORD2 + 5.0;
    t7.x = t7.x + (-_PlanetRadius);
    t7.x = t7.x * 0.200000003;
    t7.x = clamp(t7.x, 0.0, 1.0);
    t1.x = t7.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec2 uv_15;
  vec3 tmpvar_16;
  tmpvar_16 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_16);
  float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_16.y, mix (tmpvar_16.x, tmpvar_16.z, tmpvar_18), tmpvar_19));
  vec3 tmpvar_21;
  tmpvar_21.xz = vec2(1.0, -1.0);
  tmpvar_21.y = -(tmpvar_20);
  vec3 tmpvar_22;
  tmpvar_22.xz = vec2(1.0, -1.0);
  tmpvar_22.y = tmpvar_20;
  vec3 tmpvar_23;
  tmpvar_23.xy = vec2(1.0, 1.0);
  tmpvar_23.z = tmpvar_20;
  vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_23 * tmpvar_16.yxz), mix ((tmpvar_21 * tmpvar_16.xzy), (tmpvar_22 * tmpvar_16.zxy), vec3(tmpvar_18)), vec3(tmpvar_19));
  uv_15 = (((
    (0.5 * tmpvar_24.yz)
   / 
    abs(tmpvar_24.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_25;
  vec2 tmpvar_26;
  tmpvar_26 = abs((uv_15 - (0.5 * _DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  vec4 tmpvar_27;
  tmpvar_27.xy = dFdx(uvCont_25);
  tmpvar_27.zw = dFdy(uvCont_25);
  vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_29;
  tmpvar_29 = ((_Color * mix (
    mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0)))), vec4(tmpvar_4))
  , vec4(tmpvar_5))) * mix (texture2DGradARB (_DetailTex, uv_15, tmpvar_27.xy, tmpvar_27.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_28, tmpvar_28)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_29.w;
  color_1.xyz = clamp ((tmpvar_29.xyz * (1.0 - tmpvar_29.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_29.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  highp vec2 uv_22;
  uv_22 = tmpvar_21;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec2 uv_38;
  mediump vec3 detailCoords_39;
  mediump float s_40;
  mediump float nylerp_41;
  mediump float zxlerp_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  highp float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_42 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = mix (tmpvar_43.x, tmpvar_43.z, zxlerp_42);
  s_40 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_43.y, s_40, nylerp_41));
  s_40 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49.xz = vec2(1.0, -1.0);
  tmpvar_49.y = -(s_40);
  mediump vec3 tmpvar_50;
  tmpvar_50.xz = vec2(1.0, -1.0);
  tmpvar_50.y = s_40;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix ((tmpvar_49 * tmpvar_43.xzy), (tmpvar_50 * tmpvar_43.zxy), vec3(zxlerp_42));
  detailCoords_39 = tmpvar_51;
  mediump vec3 tmpvar_52;
  tmpvar_52.xy = vec2(1.0, 1.0);
  tmpvar_52.z = s_40;
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_52 * tmpvar_43.yxz), detailCoords_39, vec3(nylerp_41));
  detailCoords_39 = tmpvar_53;
  uv_38 = (((
    (0.5 * detailCoords_39.yz)
   / 
    abs(detailCoords_39.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_54;
  uv_54 = uv_38;
  highp vec2 uvCont_55;
  highp vec2 tmpvar_56;
  tmpvar_56 = abs((uv_54 - (0.5 * _DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  highp vec4 tmpvar_57;
  tmpvar_57.xy = dFdx(uvCont_55);
  tmpvar_57.zw = dFdy(uvCont_55);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2DGradEXT (_DetailTex, uv_38, tmpvar_57.xy, tmpvar_57.zw);
  mediump vec4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp vec3 tmpvar_60;
  tmpvar_60 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = tmpvar_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = ((_Color * mix (
    mix (tmpvar_31, tmpvar_33, vec4(float((s_7 >= 0.0))))
  , 
    mix (mix (tmpvar_27, tmpvar_29, vec4(float((s_7 >= 0.0)))), mix (tmpvar_35, tmpvar_37, vec4(float((s_7 >= 0.0)))), vec4(zxlerp_9))
  , vec4(nylerp_8))) * mix (tmpvar_59, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
lowp vec3 t10_11;
mediump vec2 t16_12;
highp vec3 t13;
highp vec3 t14;
bool tb14;
highp vec3 t17;
mediump vec3 t16_17;
bool tb17;
highp vec2 t26;
highp int ti26;
highp int ti29;
bool tb37;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t13.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t13.y);
    tb14 = abs(t13.z)>=abs(t13.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t2.x = t14.x * t2.x + t13.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t13.z), abs(t13.y));
    tb2 = t2.x>=abs(t13.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t13.x;
    ti26 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti26) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t13.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t13.zyx + (-t4.xyz);
    t4.xyz = t14.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t13.xyz + t4.xyz;
    t1.xyz = t13.xyz * t16_3.xxy;
    tb37 = t16_3.y>=0.0;
    t16_0.x = (tb37) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_12.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_12.xy = t16_12.xy / abs(t1.xx);
    t16_3.xy = t16_12.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_12.y), abs(t16_12.x));
    t1.y = min(abs(t16_12.y), abs(t16_12.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t14.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0 = t16_0 * _Color;
    t16_8.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t14.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t14.y);
    tb17 = abs(t14.z)>=abs(t14.y);
    t17.x = tb17 ? 1.0 : float(0.0);
    t5.x = t17.x * t5.x + t14.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t14.z), abs(t14.y));
    tb5 = t5.x>=abs(t14.x);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t14.x;
    ti29 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti29) + ti2;
    t16_9.y = float(ti2);
    t16_8.y = (-t16_9.y);
    t7.xyz = t14.yzx * t16_8.xyz;
    t16_9.xz = vec2(1.0, -1.0);
    t10.xyz = t16_9.xyz * t14.zyx + (-t7.xyz);
    t17.xyz = t17.xxx * t10.xyz + t7.xyz;
    t17.xyz = (-t16_9.xxy) * t14.xyz + t17.xyz;
    t2.xyz = t14.xyz * t16_9.xxy;
    t2.xyz = t5.xxx * t17.xyz + t2.xyz;
    t16_8.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_8.xy = t16_8.xy / abs(t2.xx);
    t16_8.xy = t16_8.xy + vec2(0.5, 0.5);
    t2.xy = t16_8.xy * vec2(_DetailScale);
    t26.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t26.y), abs(t26.x));
    t26.x = min(abs(t26.y), abs(t26.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t26.x);
    t5.y = dFdy(t26.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_11.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_11.xyz = t10_11.xxx * t16_2.xyz;
    t10_11.xyz = clamp(t10_11.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_17.xyz = t10_11.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_17.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t17.x = vs_TEXCOORD2 + 5.0;
    t17.x = t17.x + (-_PlanetRadius);
    t17.x = t17.x * 0.200000003;
    t17.x = clamp(t17.x, 0.0, 1.0);
    t5.x = t17.x * t5.x;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec2 t9;
vec3 t10;
int ti10;
vec3 t11;
int ti11;
vec2 t17;
float t24;
int ti24;
bool tb24;
float t25;
int ti25;
bool tb25;
float t26;
bool tb26;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t25 = inversesqrt(t25);
    t2.xyz = vec3(t25) * vs_TEXCOORD5.yxz;
    t26 = vs_TEXCOORD5.z * t25 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t26 = t3.x * t26 + t2.y;
    t25 = (-vs_TEXCOORD5.y) * t25 + t26;
    t26 = max(abs(t2.z), abs(t2.y));
    tb26 = t26>=abs(t2.x);
    t26 = tb26 ? 1.0 : float(0.0);
    t25 = t26 * t25 + t2.x;
    ti11 = int((0.0<t25) ? 0xFFFFFFFFu : uint(0u));
    ti25 = int((t25<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti25 = (-ti11) + ti25;
    t4.y = float(ti25);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t11.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t11.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t26) * t1.xyz + t2.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t9.x = vs_TEXCOORD2 + 5.0;
    t9.x = t9.x + (-_PlanetRadius);
    t9.x = t9.x * 0.200000003;
    t9.x = clamp(t9.x, 0.0, 1.0);
    t1.x = t9.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
SubProgram "opengl " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL#version 120

#ifdef VERTEX

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec4 _SunDir;
uniform float _Radius;
uniform vec3 _PlanetOrigin;
uniform mat4 _Projector;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 planetPos_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Projector * gl_Vertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 alphaMask1;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _PlanetRadius;
uniform float _ShadowFactor;
varying vec4 xlv_TEXCOORD0;
varying float xlv_TEXCOORD1;
varying float xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD4);
  vec3 tmpvar_3;
  tmpvar_3 = abs(tmpvar_2);
  float tmpvar_4;
  tmpvar_4 = float((tmpvar_3.z >= tmpvar_3.x));
  float tmpvar_5;
  tmpvar_5 = float((max (tmpvar_3.x, tmpvar_3.z) >= tmpvar_3.y));
  float tmpvar_6;
  tmpvar_6 = sign(mix (tmpvar_2.y, mix (tmpvar_2.x, tmpvar_2.z, tmpvar_4), tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7.xz = vec2(1.0, -1.0);
  tmpvar_7.y = -(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8.xz = vec2(1.0, -1.0);
  tmpvar_8.y = tmpvar_6;
  vec3 tmpvar_9;
  tmpvar_9.xy = vec2(1.0, 1.0);
  tmpvar_9.z = tmpvar_6;
  vec3 tmpvar_10;
  tmpvar_10 = mix ((tmpvar_9 * tmpvar_2.yxz), mix ((tmpvar_7 * tmpvar_2.xzy), (tmpvar_8 * tmpvar_2.zxy), vec3(tmpvar_4)), vec3(tmpvar_5));
  vec2 tmpvar_11;
  tmpvar_11 = (((0.5 * tmpvar_10.yz) / abs(tmpvar_10.x)) + 0.5);
  vec2 uvCont_12;
  vec2 tmpvar_13;
  tmpvar_13 = abs((tmpvar_11 - 0.5));
  uvCont_12.x = max (tmpvar_13.x, tmpvar_13.y);
  uvCont_12.y = min (tmpvar_13.x, tmpvar_13.y);
  vec4 tmpvar_14;
  tmpvar_14.xy = dFdx(uvCont_12);
  tmpvar_14.zw = dFdy(uvCont_12);
  vec4 v_15;
  v_15 = (mix (mix (texture2DGradARB (cube_MainTexyn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexyp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(
    float((tmpvar_6 >= 0.0))
  )), mix (
    mix (texture2DGradARB (cube_MainTexxn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexxp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , 
    mix (texture2DGradARB (cube_MainTexzn, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), texture2DGradARB (cube_MainTexzp, tmpvar_11, tmpvar_14.xy, tmpvar_14.zw), vec4(float((tmpvar_6 >= 0.0))))
  , vec4(tmpvar_4)), vec4(tmpvar_5)) * alphaMask1);
  vec4 tmpvar_16;
  tmpvar_16.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  vec2 uv_17;
  vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_19;
  tmpvar_19 = abs(tmpvar_18);
  float tmpvar_20;
  tmpvar_20 = float((tmpvar_19.z >= tmpvar_19.x));
  float tmpvar_21;
  tmpvar_21 = float((max (tmpvar_19.x, tmpvar_19.z) >= tmpvar_19.y));
  float tmpvar_22;
  tmpvar_22 = sign(mix (tmpvar_18.y, mix (tmpvar_18.x, tmpvar_18.z, tmpvar_20), tmpvar_21));
  vec3 tmpvar_23;
  tmpvar_23.xz = vec2(1.0, -1.0);
  tmpvar_23.y = -(tmpvar_22);
  vec3 tmpvar_24;
  tmpvar_24.xz = vec2(1.0, -1.0);
  tmpvar_24.y = tmpvar_22;
  vec3 tmpvar_25;
  tmpvar_25.xy = vec2(1.0, 1.0);
  tmpvar_25.z = tmpvar_22;
  vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_25 * tmpvar_18.yxz), mix ((tmpvar_23 * tmpvar_18.xzy), (tmpvar_24 * tmpvar_18.zxy), vec3(tmpvar_20)), vec3(tmpvar_21));
  uv_17 = (((
    (0.5 * tmpvar_26.yz)
   / 
    abs(tmpvar_26.x)
  ) + 0.5) * _DetailScale);
  vec2 uvCont_27;
  vec2 tmpvar_28;
  tmpvar_28 = abs((uv_17 - (0.5 * _DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  vec4 tmpvar_29;
  tmpvar_29.xy = dFdx(uvCont_27);
  tmpvar_29.zw = dFdy(uvCont_27);
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_31;
  tmpvar_31 = ((_Color * tmpvar_16) * mix (texture2DGradARB (_DetailTex, uv_17, tmpvar_29.xy, tmpvar_29.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (tmpvar_30, tmpvar_30)))
  , 0.0, 1.0))));
  color_1.w = tmpvar_31.w;
  color_1.xyz = clamp ((tmpvar_31.xyz * (1.0 - tmpvar_31.w)), 0.0, 1.0);
  color_1.xyz = vec3(mix (1.0, color_1.x, (_ShadowFactor * tmpvar_31.w)));
  gl_FragData[0] = vec4(mix (1.0, color_1.x, ((
    float((xlv_TEXCOORD0.w >= 0.0))
   * xlv_TEXCOORD1) * clamp (
    (0.2 * ((xlv_TEXCOORD2 + 5.0) - _PlanetRadius))
  , 0.0, 1.0))));
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 53 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 16 [_DetailRotation] 3
Matrix 8 [_MainRotation]
Matrix 4 [_Object2World]
Matrix 12 [_Projector]
Matrix 0 [glstate_matrix_mvp]
Vector 21 [_PlanetOrigin]
Float 20 [_Radius]
Vector 19 [_SunDir]
"vs_3_0
def c22, 100, 0, 0, 0
dcl_position v0
dcl_position o0
dcl_texcoord o1
dcl_texcoord1 o2.x
dcl_texcoord2 o3.x
dcl_texcoord3 o4
dcl_texcoord4 o5.xyz
dcl_texcoord5 o6.xyz
dp4 o1.x, c12, v0
dp4 o1.y, c13, v0
dp4 o1.z, c14, v0
dp4 o1.w, c15, v0
dp4 o0.x, c0, v0
dp4 o0.y, c1, v0
dp4 o0.z, c2, v0
dp4 o0.w, c3, v0
dp4 r0.x, c4, v0
dp4 r0.y, c5, v0
dp4 r0.z, c6, v0
add r1.xyz, -r0, c21
dp3 r1.w, r1, r1
rsq r2.x, r1.w
mul r2.yzw, r1.xxyz, r2.x
rcp r2.x, r2.x
dp3 r1.x, r1, -c19
dp3 r1.y, r2.yzww, c19
mul_sat r1.y, r1.y, c22.x
sge r1.z, c20.x, r2.x
mov o3.x, r2.x
mul o2.x, r1.y, r1.z
mad r1.y, r1.x, -r1.x, r1.w
rsq r1.y, r1.y
rcp r1.y, r1.y
mad r1.w, r1.y, -r1.y, r1.w
mul r1.y, r1.y, r1.y
mad r1.y, c20.x, c20.x, -r1.y
rsq r1.y, r1.y
rcp r1.y, r1.y
rsq r1.w, r1.w
rcp r1.w, r1.w
add r1.w, -r1.w, r1.y
add r2.x, -r1.y, r1.x
add r1.y, r1.y, r1.x
sge r1.x, r1.x, c22.y
lrp r2.y, r1.x, r1.y, r1.w
lrp r3.x, r1.x, r2.x, r1.w
lrp r4.x, r1.z, r2.y, r3.x
dp4 r0.w, c7, v0
mad r1, -c19, r4.x, r0
mov o4, r0
dp4 r0.w, c11, r1
dp4 r0.x, c8, r1
dp4 r0.y, c9, r1
dp4 r0.z, c10, r1
dp4 o6.x, c16, r0
dp4 o6.y, c17, r0
dp4 o6.z, c18, r0
mov o5.xyz, r0

"
}
SubProgram "d3d11 " {
// Stats: 49 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
ConstBuffer "$Globals" 528
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Matrix 464 [_Projector]
Vector 416 [_SunDir]
Float 432 [_Radius]
Vector 448 [_PlanetOrigin] 3
ConstBuffer "UnityPerDraw" 352
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerDraw" 1
"vs_4_0
root12:aaacaaaa
eefiecedcdnhmdenpgjjadfnmeidflikpmimjjkmabaaaaaakmaiaaaaadaaaaaa
cmaaaaaahmaaaaaaemabaaaaejfdeheoeiaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaebaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaafaepfdejfeejepeoaaeoepfcenebemaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaabaoaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaacanaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcfiahaaaaeaaaabaangabaaaafjaaaaae
egiocaaaaaaaaaaacbaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadbccabaaaacaaaaaagfaaaaadcccabaaaacaaaaaagfaaaaad
pccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaboaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabnaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaaaaaaaabpaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaabaaaaaaegiocaaa
aaaaaaaacaaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaaaaaaaaabmaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaabaaaaaaagaabaaaacaaaaaa
baaaaaajbcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bkaaaaaabaaaaaaiccaabaaaabaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
bkaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaamiec
elaaaaafecaabaaaabaaaaaadkaabaaaabaaaaaabnaaaaaibcaabaaaacaaaaaa
akiacaaaaaaaaaaablaaaaaackaabaaaabaaaaaadgaaaaafcccabaaaacaaaaaa
ckaabaaaabaaaaaaabaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdiaaaaahbccabaaaacaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
dgaaaaafpccabaaaadaaaaaaegaobaaaaaaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaamicaabaaaabaaaaaa
akiacaaaaaaaaaaablaaaaaaakiacaaaaaaaaaaablaaaaaaakaabaiaebaaaaaa
acaaaaaaelaaaaafkcaabaaaabaaaaaafganbaaaabaaaaaaaaaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadkaabaaaabaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaalpcaabaaa
aaaaaaaaegiocaiaebaaaaaaaaaaaaaabkaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
akaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaaf
hccabaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaaoaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaanaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaapaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec4 _SunDir;
uniform highp float _Radius;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _Projector;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 planetPos_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_3;
  tmpvar_3 = (_PlanetOrigin - tmpvar_2.xyz);
  highp float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  highp float tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = -(_SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  highp float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  highp float tmpvar_10;
  tmpvar_10 = sqrt(((_Radius * _Radius) - tmpvar_7));
  planetPos_1 = (_MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_Radius >= tmpvar_4)))
  )));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Projector * _glesVertex);
  xlv_TEXCOORD1 = (float((_Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _SunDir.xyz)
   * 100.0), 0.0, 1.0));
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_2;
  xlv_TEXCOORD4 = planetPos_1.xyz;
  xlv_TEXCOORD5 = (_DetailRotation * planetPos_1).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 alphaMask1;
uniform sampler2D cube_MainTexxn;
uniform sampler2D cube_MainTexxp;
uniform sampler2D cube_MainTexyn;
uniform sampler2D cube_MainTexyp;
uniform sampler2D cube_MainTexzn;
uniform sampler2D cube_MainTexzp;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _PlanetRadius;
uniform highp float _ShadowFactor;
varying highp vec4 xlv_TEXCOORD0;
varying highp float xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 color_2;
  mediump float shadowCheck_3;
  highp float tmpvar_4;
  tmpvar_4 = (float((xlv_TEXCOORD0.w >= 0.0)) * xlv_TEXCOORD1);
  shadowCheck_3 = tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (xlv_TEXCOORD2 + 5.0)
   - _PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = (shadowCheck_3 * tmpvar_5);
  mediump vec3 detailCoords_6;
  mediump float s_7;
  mediump float nylerp_8;
  mediump float zxlerp_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD4);
  highp vec3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, zxlerp_9);
  s_7 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, s_7, nylerp_8));
  s_7 = tmpvar_15;
  mediump vec3 tmpvar_16;
  tmpvar_16.xz = vec2(1.0, -1.0);
  tmpvar_16.y = -(s_7);
  mediump vec3 tmpvar_17;
  tmpvar_17.xz = vec2(1.0, -1.0);
  tmpvar_17.y = s_7;
  highp vec3 tmpvar_18;
  tmpvar_18 = mix ((tmpvar_16 * tmpvar_10.xzy), (tmpvar_17 * tmpvar_10.zxy), vec3(zxlerp_9));
  detailCoords_6 = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19.xy = vec2(1.0, 1.0);
  tmpvar_19.z = s_7;
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((tmpvar_19 * tmpvar_10.yxz), detailCoords_6, vec3(nylerp_8));
  detailCoords_6 = tmpvar_20;
  mediump vec2 tmpvar_21;
  tmpvar_21 = (((0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + 0.5);
  highp vec2 uv_22;
  uv_22 = tmpvar_21;
  highp vec2 uvCont_23;
  highp vec2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  highp vec4 tmpvar_25;
  tmpvar_25.xy = dFdx(uvCont_23);
  tmpvar_25.zw = dFdy(uvCont_23);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2DGradEXT (cube_MainTexxn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (cube_MainTexxp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (cube_MainTexyn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (cube_MainTexyp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (cube_MainTexzn, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (cube_MainTexzp, tmpvar_21, tmpvar_25.xy, tmpvar_25.zw);
  mediump vec4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  mediump vec4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, vec4(
    float((s_7 >= 0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, vec4(float((s_7 >= 0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, vec4(float((s_7 >= 0.0))))
  , vec4(zxlerp_9)), vec4(nylerp_8)) * alphaMask1);
  mediump vec4 tmpvar_39;
  tmpvar_39.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  mediump vec2 uv_40;
  mediump vec3 detailCoords_41;
  mediump float s_42;
  mediump float nylerp_43;
  mediump float zxlerp_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = abs(tmpvar_45);
  highp float tmpvar_47;
  tmpvar_47 = float((tmpvar_46.z >= tmpvar_46.x));
  zxlerp_44 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = float((max (tmpvar_46.x, tmpvar_46.z) >= tmpvar_46.y));
  nylerp_43 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = mix (tmpvar_45.x, tmpvar_45.z, zxlerp_44);
  s_42 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_45.y, s_42, nylerp_43));
  s_42 = tmpvar_50;
  mediump vec3 tmpvar_51;
  tmpvar_51.xz = vec2(1.0, -1.0);
  tmpvar_51.y = -(s_42);
  mediump vec3 tmpvar_52;
  tmpvar_52.xz = vec2(1.0, -1.0);
  tmpvar_52.y = s_42;
  highp vec3 tmpvar_53;
  tmpvar_53 = mix ((tmpvar_51 * tmpvar_45.xzy), (tmpvar_52 * tmpvar_45.zxy), vec3(zxlerp_44));
  detailCoords_41 = tmpvar_53;
  mediump vec3 tmpvar_54;
  tmpvar_54.xy = vec2(1.0, 1.0);
  tmpvar_54.z = s_42;
  highp vec3 tmpvar_55;
  tmpvar_55 = mix ((tmpvar_54 * tmpvar_45.yxz), detailCoords_41, vec3(nylerp_43));
  detailCoords_41 = tmpvar_55;
  uv_40 = (((
    (0.5 * detailCoords_41.yz)
   / 
    abs(detailCoords_41.x)
  ) + 0.5) * _DetailScale);
  highp vec2 uv_56;
  uv_56 = uv_40;
  highp vec2 uvCont_57;
  highp vec2 tmpvar_58;
  tmpvar_58 = abs((uv_56 - (0.5 * _DetailScale)));
  uvCont_57.x = max (tmpvar_58.x, tmpvar_58.y);
  uvCont_57.y = min (tmpvar_58.x, tmpvar_58.y);
  highp vec4 tmpvar_59;
  tmpvar_59.xy = dFdx(uvCont_57);
  tmpvar_59.zw = dFdy(uvCont_57);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2DGradEXT (_DetailTex, uv_40, tmpvar_59.xy, tmpvar_59.zw);
  mediump vec4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD3.xyz - _WorldSpaceCameraPos);
  mediump float tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (tmpvar_62, tmpvar_62)
  )), 0.0, 1.0);
  tmpvar_63 = tmpvar_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = ((_Color * tmpvar_39) * mix (tmpvar_61, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_63)));
  color_2 = tmpvar_65;
  color_2.xyz = clamp ((color_2.xyz * (1.0 - color_2.w)), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = vec3(mix (1.0, color_2.x, (_ShadowFactor * color_2.w)));
  color_2.xyz = tmpvar_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = vec4(mix (1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_67;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD0;
out highp float vs_TEXCOORD1;
out highp float vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t4;
highp float t7;
highp float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	mediump vec4 alphaMask1;
uniform 	lowp vec4 _Color;
uniform 	lowp vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform lowp sampler2D cube_MainTexxn;
uniform lowp sampler2D cube_MainTexxp;
uniform lowp sampler2D cube_MainTexyn;
uniform lowp sampler2D cube_MainTexyp;
uniform lowp sampler2D cube_MainTexzn;
uniform lowp sampler2D cube_MainTexzp;
uniform lowp sampler2D _DetailTex;
in highp vec4 vs_TEXCOORD0;
in highp float vs_TEXCOORD1;
in highp float vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump vec4 t16_1;
lowp vec4 t10_1;
highp int ti1;
highp vec3 t2;
mediump vec4 t16_2;
highp int ti2;
bool tb2;
mediump vec3 t16_3;
lowp vec4 t10_3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
bool tb5;
mediump vec4 t16_6;
lowp vec4 t10_6;
highp vec3 t7;
lowp vec4 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t10;
lowp vec3 t10_11;
mediump vec2 t16_12;
highp vec3 t13;
highp vec3 t14;
bool tb14;
highp vec3 t17;
mediump vec3 t16_17;
bool tb17;
highp vec2 t26;
highp int ti26;
highp int ti29;
bool tb37;
void main()
{
    t16_0.xz = vec2(1.0, -1.0);
    t1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t1.x = inversesqrt(t1.x);
    t13.xyz = t1.xxx * vs_TEXCOORD4.yxz;
    t2.x = vs_TEXCOORD4.z * t1.x + (-t13.y);
    tb14 = abs(t13.z)>=abs(t13.y);
    t14.x = tb14 ? 1.0 : float(0.0);
    t2.x = t14.x * t2.x + t13.y;
    t1.x = (-vs_TEXCOORD4.y) * t1.x + t2.x;
    t2.x = max(abs(t13.z), abs(t13.y));
    tb2 = t2.x>=abs(t13.x);
    t2.x = tb2 ? 1.0 : float(0.0);
    t1.x = t2.x * t1.x + t13.x;
    ti26 = int((0.0<t1.x) ? 0xFFFFFFFFu : uint(0u));
    ti1 = int((t1.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti1 = (-ti26) + ti1;
    t16_3.y = float(ti1);
    t16_0.y = (-t16_3.y);
    t4.xyz = t16_0.xyz * t13.yzx;
    t16_3.xz = vec2(1.0, -1.0);
    t5.xyz = t16_3.xyz * t13.zyx + (-t4.xyz);
    t4.xyz = t14.xxx * t5.xyz + t4.xyz;
    t4.xyz = (-t16_3.xxy) * t13.xyz + t4.xyz;
    t1.xyz = t13.xyz * t16_3.xxy;
    tb37 = t16_3.y>=0.0;
    t16_0.x = (tb37) ? 1.0 : 0.0;
    t1.xyz = t2.xxx * t4.xyz + t1.xyz;
    t16_12.xy = vec2(t1.y * float(0.5), t1.z * float(0.5));
    t16_12.xy = t16_12.xy / abs(t1.xx);
    t16_3.xy = t16_12.xy + vec2(0.5, 0.5);
    t1.x = max(abs(t16_12.y), abs(t16_12.x));
    t1.y = min(abs(t16_12.y), abs(t16_12.x));
    t4.xy = dFdx(t1.xy);
    t5.xy = dFdy(t1.xy);
    t10_1 = textureGrad(cube_MainTexzp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_1 = t10_1 + (-t10_6);
    t16_1 = t16_0.xxxx * t16_1 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t16_6 = t16_0.xxxx * t16_6 + t10_7;
    t16_1 = t16_1 + (-t16_6);
    t16_1 = t14.xxxx * t16_1 + t16_6;
    t10_6 = textureGrad(cube_MainTexyp, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t16_3.xy, vec4(t4.xyxx).xy, vec4(t5.xyxx).xy);
    t16_4 = (-t10_3) + t10_6;
    t16_0 = t16_0.xxxx * t16_4 + t10_3;
    t16_1 = (-t16_0) + t16_1;
    t16_0 = t2.xxxx * t16_1 + t16_0;
    t16_0.xy = t16_0.xy * alphaMask1.xy;
    t16_0.x = t16_0.y + t16_0.x;
    t16_0.x = t16_0.z * alphaMask1.z + t16_0.x;
    t16_0.w = t16_0.w * alphaMask1.w + t16_0.x;
    t16_0.xyz = vec3(1.0, 1.0, 1.0);
    t16_0 = t16_0 * _Color;
    t16_8.xz = vec2(1.0, -1.0);
    t2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t2.x = inversesqrt(t2.x);
    t14.xyz = t2.xxx * vs_TEXCOORD5.yxz;
    t5.x = vs_TEXCOORD5.z * t2.x + (-t14.y);
    tb17 = abs(t14.z)>=abs(t14.y);
    t17.x = tb17 ? 1.0 : float(0.0);
    t5.x = t17.x * t5.x + t14.y;
    t2.x = (-vs_TEXCOORD5.y) * t2.x + t5.x;
    t5.x = max(abs(t14.z), abs(t14.y));
    tb5 = t5.x>=abs(t14.x);
    t5.x = tb5 ? 1.0 : float(0.0);
    t2.x = t5.x * t2.x + t14.x;
    ti29 = int((0.0<t2.x) ? 0xFFFFFFFFu : uint(0u));
    ti2 = int((t2.x<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti2 = (-ti29) + ti2;
    t16_9.y = float(ti2);
    t16_8.y = (-t16_9.y);
    t7.xyz = t14.yzx * t16_8.xyz;
    t16_9.xz = vec2(1.0, -1.0);
    t10.xyz = t16_9.xyz * t14.zyx + (-t7.xyz);
    t17.xyz = t17.xxx * t10.xyz + t7.xyz;
    t17.xyz = (-t16_9.xxy) * t14.xyz + t17.xyz;
    t2.xyz = t14.xyz * t16_9.xxy;
    t2.xyz = t5.xxx * t17.xyz + t2.xyz;
    t16_8.xy = vec2(t2.y * float(0.5), t2.z * float(0.5));
    t16_8.xy = t16_8.xy / abs(t2.xx);
    t16_8.xy = t16_8.xy + vec2(0.5, 0.5);
    t2.xy = t16_8.xy * vec2(_DetailScale);
    t26.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t2.xy;
    t5.x = max(abs(t26.y), abs(t26.x));
    t26.x = min(abs(t26.y), abs(t26.x));
    t7.x = dFdx(t5.x);
    t5.x = dFdy(t5.x);
    t7.y = dFdx(t26.x);
    t5.y = dFdy(t26.x);
    t10_1 = textureGrad(_DetailTex, t2.xy, vec4(t7.xyxx).xy, vec4(t5.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t5.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t5.x = dot(t5.xyz, t5.xyz);
    t5.x = sqrt(t5.x);
    t5.x = dot(t5.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t5.x = clamp(t5.x, 0.0, 1.0);
    t16_1 = t5.xxxx * t16_2 + t10_1;
    t10_11.x = (-t16_0.w) * t16_1.w + 1.0;
    t16_2 = t16_0 * t16_1;
    t16_0.w = t16_0.w * t16_1.w + -1.0;
    t10_11.xyz = t10_11.xxx * t16_2.xyz;
    t10_11.xyz = clamp(t10_11.xyz, 0.0, 1.0);
    t5.x = t16_2.w * _ShadowFactor;
    t16_17.xyz = t10_11.xyz + vec3(-1.0, -1.0, -1.0);
    t5.xyz = t5.xxx * t16_17.xyz + vec3(1.0, 1.0, 1.0);
    t16_0.xyz = t5.xyz + vec3(-1.0, -1.0, -1.0);
    tb5 = vs_TEXCOORD0.w>=0.0;
    t5.x = tb5 ? 1.0 : float(0.0);
    t5.x = t5.x * vs_TEXCOORD1;
    t17.x = vs_TEXCOORD2 + 5.0;
    t17.x = t17.x + (-_PlanetRadius);
    t17.x = t17.x * 0.200000003;
    t17.x = clamp(t17.x, 0.0, 1.0);
    t5.x = t17.x * t5.x;
    t16_0 = t5.xxxx * t16_0 + vec4(1.0, 1.0, 1.0, 1.0);
    SV_Target0 = t16_0;
    return;
}

#endif
"
}
SubProgram "metal " {
// Stats: 43 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [_Object2World]
Matrix 128 [_MainRotation]
Matrix 192 [_DetailRotation]
Matrix 304 [_Projector]
Vector 256 [_SunDir]
Float 272 [_Radius]
Vector 288 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float4 _SunDir;
  float _Radius;
  float3 _PlanetOrigin;
  float4x4 _Projector;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 planetPos_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_3;
  tmpvar_3 = (_mtl_u._PlanetOrigin - tmpvar_2.xyz);
  float tmpvar_4;
  tmpvar_4 = sqrt(dot (tmpvar_3, tmpvar_3));
  float tmpvar_5;
  float4 tmpvar_6;
  tmpvar_6 = -(_mtl_u._SunDir);
  tmpvar_5 = dot (tmpvar_3, tmpvar_6.xyz);
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = sqrt((dot (tmpvar_3, tmpvar_3) - (tmpvar_5 * tmpvar_5)));
  tmpvar_7 = (tmpvar_8 * tmpvar_8);
  float tmpvar_9;
  tmpvar_9 = sqrt((dot (tmpvar_3, tmpvar_3) - tmpvar_7));
  float tmpvar_10;
  tmpvar_10 = sqrt(((_mtl_u._Radius * _mtl_u._Radius) - tmpvar_7));
  planetPos_1 = (_mtl_u._MainRotation * (tmpvar_2 + (tmpvar_6 * 
    mix (mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 - tmpvar_10), float((tmpvar_5 >= 0.0))), mix ((tmpvar_10 - tmpvar_9), (tmpvar_5 + tmpvar_10), float((tmpvar_5 >= 0.0))), float((_mtl_u._Radius >= tmpvar_4)))
  )));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = (_mtl_u._Projector * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD1 = (float((_mtl_u._Radius >= tmpvar_4)) * clamp ((
    dot (normalize(tmpvar_3), _mtl_u._SunDir.xyz)
   * 100.0), 0.0, 1.0));
  _mtl_o.xlv_TEXCOORD2 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD3 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD4 = planetPos_1.xyz;
  _mtl_o.xlv_TEXCOORD5 = (_mtl_u._DetailRotation * planetPos_1).xyz;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x
#ifdef VERTEX
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
in  vec4 in_POSITION0;
out vec4 vs_TEXCOORD0;
out float vs_TEXCOORD1;
out float vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 t0;
vec4 t1;
bool tb1;
vec3 t2;
bool tb2;
vec3 t4;
float t7;
float t10;
void main()
{
    t0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
    t0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + t0;
    t0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + t0;
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Projector[1];
    t0 = _Projector[0] * in_POSITION0.xxxx + t0;
    t0 = _Projector[2] * in_POSITION0.zzzz + t0;
    vs_TEXCOORD0 = _Projector[3] * in_POSITION0.wwww + t0;
    t0 = in_POSITION0.yyyy * _Object2World[1];
    t0 = _Object2World[0] * in_POSITION0.xxxx + t0;
    t0 = _Object2World[2] * in_POSITION0.zzzz + t0;
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    t1.xyz = (-t0.xyz) + _PlanetOrigin.xyzx.xyz;
    t10 = dot(t1.xyz, t1.xyz);
    t2.x = inversesqrt(t10);
    t2.xyz = t1.xyz * t2.xxx;
    t1.x = dot(t1.xyz, (-_SunDir.xyz));
    t4.x = dot(t2.xyz, _SunDir.xyz);
    t4.x = t4.x * 100.0;
    t4.x = clamp(t4.x, 0.0, 1.0);
    t7 = sqrt(t10);
    tb2 = _Radius>=t7;
    vs_TEXCOORD2 = t7;
    t7 = tb2 ? 1.0 : float(0.0);
    vs_TEXCOORD1 = t4.x * t7;
    vs_TEXCOORD3 = t0;
    t4.x = (-t1.x) * t1.x + t10;
    t4.x = sqrt(t4.x);
    t2.x = t4.x * t4.x;
    t4.x = (-t4.x) * t4.x + t10;
    t4.z = _Radius * _Radius + (-t2.x);
    t4.xz = sqrt(t4.xz);
    t2.x = t4.z + t1.x;
    t4.x = (-t4.x) + t4.z;
    t10 = (-t4.z) + t1.x;
    tb1 = t1.x>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t10 = (-t4.x) + t10;
    t10 = t1.x * t10 + t4.x;
    t2.x = (-t4.x) + t2.x;
    t1.x = t1.x * t2.x + t4.x;
    t1.x = (-t10) + t1.x;
    t1.x = t7 * t1.x + t10;
    t0 = (-_SunDir) * t1.xxxx + t0;
    t1 = t0.yyyy * _MainRotation[1];
    t1 = _MainRotation[0] * t0.xxxx + t1;
    t1 = _MainRotation[2] * t0.zzzz + t1;
    t0 = _MainRotation[3] * t0.wwww + t1;
    vs_TEXCOORD4.xyz = t0.xyz;
    t1.xyz = t0.yyy * _DetailRotation[1].xyz;
    t1.xyz = _DetailRotation[0].xyz * t0.xxx + t1.xyz;
    t0.xyz = _DetailRotation[2].xyz * t0.zzz + t1.xyz;
    vs_TEXCOORD5.xyz = _DetailRotation[3].xyz * t0.www + t0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec3 unity_LightColor0;
uniform 	vec3 unity_LightColor1;
uniform 	vec3 unity_LightColor2;
uniform 	vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	vec4 unity_WorldTransformParams;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	vec4 unity_AmbientSky;
uniform 	vec4 unity_AmbientEquator;
uniform 	vec4 unity_AmbientGround;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ColorSpaceGrey;
uniform 	vec4 unity_ColorSpaceDouble;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 unity_Lightmap_HDR;
uniform 	vec4 unity_DynamicLightmap_HDR;
uniform 	vec4 _LightColor0;
uniform 	vec4 _SpecColor;
uniform 	vec4 unity_LightGammaCorrectionConsts;
uniform 	mat4 _MainRotation;
uniform 	mat4 _DetailRotation;
uniform 	mat4 _ShadowBodies;
uniform 	float _SunRadius;
uniform 	vec3 _SunPos;
uniform 	vec4 alphaMask1;
uniform 	vec4 _Color;
uniform 	vec4 _DetailOffset;
uniform 	float _DetailScale;
uniform 	float _DetailDist;
uniform 	vec4 _SunDir;
uniform 	float _Radius;
uniform 	float _PlanetRadius;
uniform 	float _ShadowFactor;
uniform 	vec3 _PlanetOrigin;
uniform 	mat4 _Projector;
uniform  sampler2D cube_MainTexxn;
uniform  sampler2D cube_MainTexxp;
uniform  sampler2D cube_MainTexyn;
uniform  sampler2D cube_MainTexyp;
uniform  sampler2D cube_MainTexzn;
uniform  sampler2D cube_MainTexzp;
uniform  sampler2D _DetailTex;
in  vec4 vs_TEXCOORD0;
in  float vs_TEXCOORD1;
in  float vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec3 vs_TEXCOORD4;
in  vec3 vs_TEXCOORD5;
out vec4 SV_Target0;
vec4 t0;
vec4 t1;
lowp vec4 t10_1;
bool tb1;
vec4 t2;
mediump vec4 t16_2;
bool tb2;
vec3 t3;
lowp vec4 t10_3;
bool tb3;
vec3 t4;
mediump vec4 t16_4;
vec4 t5;
mediump vec4 t16_5;
lowp vec4 t10_5;
vec4 t6;
mediump vec4 t16_6;
lowp vec4 t10_6;
lowp vec4 t10_7;
vec2 t8;
vec2 t9;
vec3 t10;
int ti10;
vec3 t11;
int ti11;
vec2 t17;
float t24;
int ti24;
bool tb24;
float t25;
int ti25;
bool tb25;
float t26;
bool tb26;
void main()
{
    t0.xz = vec2(1.0, -1.0);
    t24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    t24 = inversesqrt(t24);
    t1.xyz = vec3(t24) * vs_TEXCOORD4.yxz;
    t25 = vs_TEXCOORD4.z * t24 + (-t1.y);
    tb2 = abs(t1.z)>=abs(t1.y);
    t2.x = tb2 ? 1.0 : float(0.0);
    t25 = t2.x * t25 + t1.y;
    t24 = (-vs_TEXCOORD4.y) * t24 + t25;
    t25 = max(abs(t1.z), abs(t1.y));
    tb25 = t25>=abs(t1.x);
    t25 = tb25 ? 1.0 : float(0.0);
    t24 = t25 * t24 + t1.x;
    ti10 = int((0.0<t24) ? 0xFFFFFFFFu : uint(0u));
    ti24 = int((t24<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti24 = (-ti10) + ti24;
    t3.y = float(ti24);
    t0.y = (-t3.y);
    t0.xyz = t0.xyz * t1.yzx;
    t3.xz = vec2(1.0, -1.0);
    t10.xyz = t3.xyz * t1.zyx + (-t0.xyz);
    t0.xyz = t2.xxx * t10.xyz + t0.xyz;
    t0.xyz = (-t3.xxy) * t1.xyz + t0.xyz;
    t1.xyz = t1.xyz * t3.xxy;
    tb24 = t3.y>=0.0;
    t24 = tb24 ? 1.0 : float(0.0);
    t0.xyz = vec3(t25) * t0.xyz + t1.xyz;
    t8.xy = t0.yz * vec2(0.5, 0.5);
    t0.xy = t8.xy / abs(t0.xx);
    t1.xy = t0.xy + vec2(0.5, 0.5);
    t0.z = max(abs(t0.y), abs(t0.x));
    t0.x = min(abs(t0.y), abs(t0.x));
    t3.xy = dFdx(t0.zx);
    t4.xy = dFdy(t0.zx);
    t10_5 = textureGrad(cube_MainTexzp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_6 = textureGrad(cube_MainTexzn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_5 = t10_5 + (-t10_6);
    t5 = vec4(t24) * t16_5 + t10_6;
    t10_6 = textureGrad(cube_MainTexxp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_7 = textureGrad(cube_MainTexxn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_6 = t10_6 + (-t10_7);
    t6 = vec4(t24) * t16_6 + t10_7;
    t5 = t5 + (-t6);
    t2 = t2.xxxx * t5 + t6;
    t10_5 = textureGrad(cube_MainTexyp, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t10_3 = textureGrad(cube_MainTexyn, t1.xy, vec4(t3.xyxx).xy, vec4(t4.xyxx).xy);
    t16_4 = (-t10_3) + t10_5;
    t0 = vec4(t24) * t16_4 + t10_3;
    t2 = (-t0) + t2;
    t0 = vec4(t25) * t2 + t0;
    t0.xy = t0.xy * alphaMask1.xy;
    t0.x = t0.y + t0.x;
    t0.x = t0.z * alphaMask1.z + t0.x;
    t0.w = t0.w * alphaMask1.w + t0.x;
    t0.xyz = vec3(1.0, 1.0, 1.0);
    t0 = t0 * _Color;
    t1.xz = vec2(1.0, -1.0);
    t25 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
    t25 = inversesqrt(t25);
    t2.xyz = vec3(t25) * vs_TEXCOORD5.yxz;
    t26 = vs_TEXCOORD5.z * t25 + (-t2.y);
    tb3 = abs(t2.z)>=abs(t2.y);
    t3.x = tb3 ? 1.0 : float(0.0);
    t26 = t3.x * t26 + t2.y;
    t25 = (-vs_TEXCOORD5.y) * t25 + t26;
    t26 = max(abs(t2.z), abs(t2.y));
    tb26 = t26>=abs(t2.x);
    t26 = tb26 ? 1.0 : float(0.0);
    t25 = t26 * t25 + t2.x;
    ti11 = int((0.0<t25) ? 0xFFFFFFFFu : uint(0u));
    ti25 = int((t25<0.0) ? 0xFFFFFFFFu : uint(0u));
    ti25 = (-ti11) + ti25;
    t4.y = float(ti25);
    t1.y = (-t4.y);
    t1.xyz = t1.xyz * t2.yzx;
    t4.xz = vec2(1.0, -1.0);
    t11.xyz = t4.xyz * t2.zyx + (-t1.xyz);
    t1.xyz = t3.xxx * t11.xyz + t1.xyz;
    t1.xyz = (-t4.xxy) * t2.xyz + t1.xyz;
    t2.xyz = t2.xyz * t4.xxy;
    t1.xyz = vec3(t26) * t1.xyz + t2.xyz;
    t9.xy = t1.yz * vec2(0.5, 0.5);
    t1.xy = t9.xy / abs(t1.xx);
    t1.xy = t1.xy + vec2(0.5, 0.5);
    t1.xy = t1.xy * vec2(_DetailScale);
    t17.xy = (-vec2(_DetailScale)) * vec2(0.5, 0.5) + t1.xy;
    t2.x = max(abs(t17.y), abs(t17.x));
    t17.x = min(abs(t17.y), abs(t17.x));
    t3.x = dFdx(t2.x);
    t2.x = dFdy(t2.x);
    t3.y = dFdx(t17.x);
    t2.y = dFdy(t17.x);
    t10_1 = textureGrad(_DetailTex, t1.xy, vec4(t3.xyxx).xy, vec4(t2.xyxx).xy);
    t16_2 = (-t10_1) + vec4(1.0, 1.0, 1.0, 1.0);
    t3.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyzx.xyz);
    t3.x = dot(t3.xyz, t3.xyz);
    t3.x = sqrt(t3.x);
    t3.x = dot(t3.xx, vec2(vec2(_DetailDist, _DetailDist)));
    t3.x = clamp(t3.x, 0.0, 1.0);
    t1 = t3.xxxx * t16_2 + t10_1;
    t2.x = (-t0.w) * t1.w + 1.0;
    t0 = t0 * t1;
    t1.xyz = t2.xxx * t0.xyz;
    t1.xyz = clamp(t1.xyz, 0.0, 1.0);
    t1.xyz = t1.xyz + vec3(-1.0, -1.0, -1.0);
    t25 = t0.w * _ShadowFactor;
    t0.xyz = t1.xyz * vec3(t25);
    t0 = t0 + vec4(0.0, 0.0, 0.0, -1.0);
    tb1 = vs_TEXCOORD0.w>=0.0;
    t1.x = tb1 ? 1.0 : float(0.0);
    t1.x = t1.x * vs_TEXCOORD1;
    t9.x = vs_TEXCOORD2 + 5.0;
    t9.x = t9.x + (-_PlanetRadius);
    t9.x = t9.x * 0.200000003;
    t9.x = clamp(t9.x, 0.0, 1.0);
    t1.x = t9.x * t1.x;
    SV_Target0 = t1.xxxx * t0 + vec4(1.0, 1.0, 1.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 95 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 0.0208350997, -0.0851330012, 0.180141002
def c6, -0.330299497, 0.999866009, 0, 1
def c7, -2, 1.57079637, 0.159154937, 0.5
def c8, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c9, -2, 3.14159274, 0.318309873, 0
def c10, -0, 0, -3.14159274, 1
def c11, 1, -1, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c6.xwzw, c6.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c5.y, c5.z
mad r1.w, r0.z, r1.w, c5.w
mad r1.w, r0.z, r1.w, c6.x
mad r0.z, r0.z, r1.w, c6.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c7.x, c7.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c10.xxyw, c10.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c5.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c7.z, c7.w
mul r0.x, r0.x, c7.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c8.x, c8.y
mad r1.z, r1.z, r0_abs.w, c8.z
mad r1.z, r1.z, r0_abs.w, c8.w
add r0.w, -r0_abs.w, c6.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c9.x, c9.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c9.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0, r0, c1
mov r1.xz, c11.xyyw
dp3 r1.w, v4, v4
rsq r1.w, r1.w
mul r2.xyz, r1.w, v4.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c11.xyyw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c7.w
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c7.w
mul_pp r1.xy, r1, c2.x
mov r1.w, c7.w
mad r1.zw, c2.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r4.w, c6.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c10.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedlfppipmbpaiefkmipmpcpkheelcpgiimabaaaaaaemaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbeanaaaaeaaaaaaaefadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaa
ckbabaaaafaaaaaadkaabaaaabaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaaj
bcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaa
dkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaa
dkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaa
abaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaa
abaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaa
kgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaia
ibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
acaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaa
agaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaa
aaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 114 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half2 uv_14;
  half3 detailCoords_15;
  half s_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_20;
  tmpvar_20 = abs(tmpvar_19);
  float tmpvar_21;
  tmpvar_21 = float((tmpvar_20.z >= tmpvar_20.x));
  zxlerp_18 = half(tmpvar_21);
  float tmpvar_22;
  tmpvar_22 = float((max (tmpvar_20.x, tmpvar_20.z) >= tmpvar_20.y));
  nylerp_17 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = mix (tmpvar_19.x, tmpvar_19.z, (float)zxlerp_18);
  s_16 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = sign(mix (tmpvar_19.y, (float)s_16, (float)nylerp_17));
  s_16 = half(tmpvar_24);
  half3 tmpvar_25;
  tmpvar_25.xz = half2(float2(1.0, -1.0));
  tmpvar_25.y = -(s_16);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, -1.0));
  tmpvar_26.y = s_16;
  float3 tmpvar_27;
  tmpvar_27 = mix (((float3)tmpvar_25 * tmpvar_19.xzy), ((float3)tmpvar_26 * tmpvar_19.zxy), (float3)half3(zxlerp_18));
  detailCoords_15 = half3(tmpvar_27);
  half3 tmpvar_28;
  tmpvar_28.xy = half2(float2(1.0, 1.0));
  tmpvar_28.z = s_16;
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_28 * tmpvar_19.yxz), (float3)detailCoords_15, (float3)half3(nylerp_17));
  detailCoords_15 = half3(tmpvar_29);
  uv_14 = half2(((float2)((
    ((half)0.5 * detailCoords_15.yz)
   / 
    abs(detailCoords_15.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_30;
  uv_30 = float2(uv_14);
  float2 uvCont_31;
  float2 tmpvar_32;
  tmpvar_32 = abs((uv_30 - (0.5 * _mtl_u._DetailScale)));
  uvCont_31.x = max (tmpvar_32.x, tmpvar_32.y);
  uvCont_31.y = min (tmpvar_32.x, tmpvar_32.y);
  float4 tmpvar_33;
  tmpvar_33.xy = dfdx(uvCont_31);
  tmpvar_33.zw = dfdy(uvCont_31);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_14), gradient2d((float2)(tmpvar_33.xy), (float2)(tmpvar_33.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  float3 tmpvar_36;
  tmpvar_36 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_36, tmpvar_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_35, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_2 = tmpvar_39;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_40;
  tmpvar_40 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_41;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 100 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, -2, 1.57079637, 0.159154937, 0.5
def c7, 0, 0.0208350997, -0.0851330012, 0.180141002
def c8, -0.330299497, 0.999866009, 0, 1
def c9, -0.0187292993, 0.0742610022, -0.212114394, 1.57072878
def c10, -2, 3.14159274, 0.318309873, 0
def c11, -0, 0, -3.14159274, 1
def c12, 1, -1, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r0.yzw, r0.x, v3.xzxy
mad r0.x, v3.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xwzw, c8.xzww
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.y, c7.z
mad r1.w, r0.z, r1.w, c7.w
mad r1.w, r0.z, r1.w, c8.x
mad r0.z, r0.z, r1.w, c8.y
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c6.x, c6.y
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c11.xxyw, c11.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c7.x, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c6.z, c6.w
mul r0.x, r0.x, c6.z
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.x, c9.y
mad r1.z, r1.z, r0_abs.w, c9.z
mad r1.z, r1.z, r0_abs.w, c9.w
add r0.w, -r0_abs.w, c8.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.x, c10.y
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c10.z
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c8.w
mul_pp r0, r0, c2
mov r1.xz, c12.xyyw
dp3 r1.w, v4, v4
rsq r1.w, r1.w
mul r2.xyz, r1.w, v4.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c8.z, c8.w
cmp r3.x, r3.x, -c8.z, -c8.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c12.xyyw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c6.w
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c6.w
mul_pp r1.xy, r1, c3.x
mov r1.w, c6.w
mad r1.zw, c3.x, -r1.w, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c7.x
dp2add_sat_pp r2.x, r2.x, c4.x, r3.x
lrp_pp r4, r2.x, c8.w, r1
mad_pp r1.x, r0.w, -r4.w, c8.w
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c11.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c8.w

"
}
SubProgram "d3d11 " {
// Stats: 96 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedejfchbokgodmnhoopjnhbgabokigeohdabaaaaaapiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaanaaaaeaaaaaaahaadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaa
aaaaaaaabgaaaaaaaaaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaackiacaaaaaaaaaaa
bgaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaa
dcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaaabaaaaaabkaabaia
ebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
dkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaa
adaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaia
ebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaa
abaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
adaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
agabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_6;
  float tmpvar_7;
  float tmpvar_8;
  tmpvar_8 = (min (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0) / max (abs(
    (tmpvar_5.x / tmpvar_5.z)
  ), 1.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  tmpvar_9 = (((
    ((((
      ((((-0.01213232 * tmpvar_9) + 0.05368138) * tmpvar_9) - 0.1173503)
     * tmpvar_9) + 0.1938925) * tmpvar_9) - 0.3326756)
   * tmpvar_9) + 0.9999793) * tmpvar_8);
  tmpvar_9 = (tmpvar_9 + (float(
    (abs((tmpvar_5.x / tmpvar_5.z)) > 1.0)
  ) * (
    (tmpvar_9 * -2.0)
   + 1.570796)));
  tmpvar_7 = (tmpvar_9 * sign((tmpvar_5.x / tmpvar_5.z)));
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.141593;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.141593);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.570796);
  };
  uv_6.x = (0.5 + (0.1591549 * tmpvar_7));
  uv_6.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_5.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.570796 + (
      abs(tmpvar_5.y)
     * 
      (-0.2146018 + (abs(tmpvar_5.y) * (0.08656672 + (
        abs(tmpvar_5.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_10;
  uvCont_10.y = uv_6.y;
  uvCont_10.x = abs((uv_6.x - 0.5));
  float4 tmpvar_11;
  tmpvar_11.xy = dfdx(uvCont_10);
  tmpvar_11.zw = dfdy(uvCont_10);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 v_14;
  v_14 = (tmpvar_13 * _mtl_u.alphaMask1);
  half4 tmpvar_15;
  tmpvar_15.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_15.w = ((v_14.x + v_14.y) + (v_14.z + v_14.w));
  half2 uv_16;
  half3 detailCoords_17;
  half s_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_21);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  zxlerp_20 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = float((max (tmpvar_22.x, tmpvar_22.z) >= tmpvar_22.y));
  nylerp_19 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = mix (tmpvar_21.x, tmpvar_21.z, (float)zxlerp_20);
  s_18 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = sign(mix (tmpvar_21.y, (float)s_18, (float)nylerp_19));
  s_18 = half(tmpvar_26);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, -1.0));
  tmpvar_27.y = -(s_18);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, -1.0));
  tmpvar_28.y = s_18;
  float3 tmpvar_29;
  tmpvar_29 = mix (((float3)tmpvar_27 * tmpvar_21.xzy), ((float3)tmpvar_28 * tmpvar_21.zxy), (float3)half3(zxlerp_20));
  detailCoords_17 = half3(tmpvar_29);
  half3 tmpvar_30;
  tmpvar_30.xy = half2(float2(1.0, 1.0));
  tmpvar_30.z = s_18;
  float3 tmpvar_31;
  tmpvar_31 = mix (((float3)tmpvar_30 * tmpvar_21.yxz), (float3)detailCoords_17, (float3)half3(nylerp_19));
  detailCoords_17 = half3(tmpvar_31);
  uv_16 = half2(((float2)((
    ((half)0.5 * detailCoords_17.yz)
   / 
    abs(detailCoords_17.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_32;
  uv_32 = float2(uv_16);
  float2 uvCont_33;
  float2 tmpvar_34;
  tmpvar_34 = abs((uv_32 - (0.5 * _mtl_u._DetailScale)));
  uvCont_33.x = max (tmpvar_34.x, tmpvar_34.y);
  uvCont_33.y = min (tmpvar_34.x, tmpvar_34.y);
  float4 tmpvar_35;
  tmpvar_35.xy = dfdx(uvCont_33);
  tmpvar_35.zw = dfdy(uvCont_33);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_16), gradient2d((float2)(tmpvar_35.xy), (float2)(tmpvar_35.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  float3 tmpvar_38;
  tmpvar_38 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_39;
  float tmpvar_40;
  tmpvar_40 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_38, tmpvar_38)
  )), 0.0, 1.0);
  tmpvar_39 = half(tmpvar_40);
  half4 tmpvar_41;
  tmpvar_41 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_37, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_39)));
  color_2 = tmpvar_41;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_42;
  tmpvar_42 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_42);
  half4 tmpvar_43;
  tmpvar_43 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_43;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 54 math, 4 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
mov r0.xz, c5.yyww
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 54 math, 1 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedjmbalockofkaioafgnpbefgjjikmpiglabaaaaaafmajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcceaiaaaaeaaaaaaaajacaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaafaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaia
ibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaaabaaaaaa
egaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaaacaaaaaa
agaabaaaacaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaaaaaaaaa
agaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaa
aaaaaaaabhaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaa
egacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaa
aaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
abaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaa
dkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 50 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half2 uv_8;
  half3 detailCoords_9;
  half s_10;
  half nylerp_11;
  half zxlerp_12;
  float3 tmpvar_13;
  tmpvar_13 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_14;
  tmpvar_14 = abs(tmpvar_13);
  float tmpvar_15;
  tmpvar_15 = float((tmpvar_14.z >= tmpvar_14.x));
  zxlerp_12 = half(tmpvar_15);
  float tmpvar_16;
  tmpvar_16 = float((max (tmpvar_14.x, tmpvar_14.z) >= tmpvar_14.y));
  nylerp_11 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = mix (tmpvar_13.x, tmpvar_13.z, (float)zxlerp_12);
  s_10 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = sign(mix (tmpvar_13.y, (float)s_10, (float)nylerp_11));
  s_10 = half(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xz = half2(float2(1.0, -1.0));
  tmpvar_19.y = -(s_10);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, -1.0));
  tmpvar_20.y = s_10;
  float3 tmpvar_21;
  tmpvar_21 = mix (((float3)tmpvar_19 * tmpvar_13.xzy), ((float3)tmpvar_20 * tmpvar_13.zxy), (float3)half3(zxlerp_12));
  detailCoords_9 = half3(tmpvar_21);
  half3 tmpvar_22;
  tmpvar_22.xy = half2(float2(1.0, 1.0));
  tmpvar_22.z = s_10;
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_22 * tmpvar_13.yxz), (float3)detailCoords_9, (float3)half3(nylerp_11));
  detailCoords_9 = half3(tmpvar_23);
  uv_8 = half2(((float2)((
    ((half)0.5 * detailCoords_9.yz)
   / 
    abs(detailCoords_9.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_24;
  uv_24 = float2(uv_8);
  float2 uvCont_25;
  float2 tmpvar_26;
  tmpvar_26 = abs((uv_24 - (0.5 * _mtl_u._DetailScale)));
  uvCont_25.x = max (tmpvar_26.x, tmpvar_26.y);
  uvCont_25.y = min (tmpvar_26.x, tmpvar_26.y);
  float4 tmpvar_27;
  tmpvar_27.xy = dfdx(uvCont_25);
  tmpvar_27.zw = dfdy(uvCont_25);
  half4 tmpvar_28;
  tmpvar_28 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_8), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  float3 tmpvar_30;
  tmpvar_30 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_31;
  float tmpvar_32;
  tmpvar_32 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_30, tmpvar_30)
  )), 0.0, 1.0);
  tmpvar_31 = half(tmpvar_32);
  half4 tmpvar_33;
  tmpvar_33 = ((_mtl_u._Color * tmpvar_7) * mix (tmpvar_29, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_31)));
  color_2 = tmpvar_33;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_34;
  tmpvar_34 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_35;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 59 math, 4 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 0, 1, -0, -1
def c7, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_cube s0
dcl_2d s1
mov r0.xz, c6.yyww
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.x, c6.y
cmp r2.x, r2.x, c6.z, c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c6.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.x
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c7.x
mul_pp r0.xy, r0, c3.x
mov r1.x, c7.x
mad r0.zw, c3.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c6.x
dp2add_sat_pp r1.x, r1.x, c4.x, r2.x
lrp_pp r3, r1.x, c6.y, r0
nrm r0.xyz, v3
texld_pp r0, r0, s0
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c6.y
mul_pp r0, r0, c2
mad_pp r1.x, r0.w, -r3.w, c6.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c6.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c6.y

"
}
SubProgram "d3d11 " {
// Stats: 58 math, 1 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedkellibjfjddnidkgenjmamombjobihnbabaaaaaaaiakaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnaaiaaaaeaaaaaaadeacaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaeaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaabaaaaaa
ckbabaaaafaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaaj
bcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaa
abaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
dkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
aaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaa
aaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaa
kgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
agaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaia
ibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaaaaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaaaaaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaafbcaabaaaacaaaaaaakaabaaa
abaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaaabaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaaaaaaaaalpcaabaaaabaaaaaa
egaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaapcaaaaibcaabaaaacaaaaaa
agaabaaaacaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaaaaaaaaa
agaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaegiacaaa
aaaaaaaabgaaaaaaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaackaabaaaabaaaaaackiacaaaaaaaaaaa
bgaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
dkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaadgaaaaaihcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaabaaaaaa
egaobaaaabaaaaaaegiocaaaaaaaaaaabhaaaaaadcaaaaakbcaabaaaacaaaaaa
dkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaa
abaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
icaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialp
bnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_6;
  tmpvar_6 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_5));
  half4 tmpvar_7;
  tmpvar_7 = tmpvar_6;
  half4 v_8;
  v_8 = (tmpvar_7 * _mtl_u.alphaMask1);
  half4 tmpvar_9;
  tmpvar_9.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_9.w = ((v_8.x + v_8.y) + (v_8.z + v_8.w));
  half2 uv_10;
  half3 detailCoords_11;
  half s_12;
  half nylerp_13;
  half zxlerp_14;
  float3 tmpvar_15;
  tmpvar_15 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_16;
  tmpvar_16 = abs(tmpvar_15);
  float tmpvar_17;
  tmpvar_17 = float((tmpvar_16.z >= tmpvar_16.x));
  zxlerp_14 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = float((max (tmpvar_16.x, tmpvar_16.z) >= tmpvar_16.y));
  nylerp_13 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = mix (tmpvar_15.x, tmpvar_15.z, (float)zxlerp_14);
  s_12 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = sign(mix (tmpvar_15.y, (float)s_12, (float)nylerp_13));
  s_12 = half(tmpvar_20);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, -1.0));
  tmpvar_21.y = -(s_12);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, -1.0));
  tmpvar_22.y = s_12;
  float3 tmpvar_23;
  tmpvar_23 = mix (((float3)tmpvar_21 * tmpvar_15.xzy), ((float3)tmpvar_22 * tmpvar_15.zxy), (float3)half3(zxlerp_14));
  detailCoords_11 = half3(tmpvar_23);
  half3 tmpvar_24;
  tmpvar_24.xy = half2(float2(1.0, 1.0));
  tmpvar_24.z = s_12;
  float3 tmpvar_25;
  tmpvar_25 = mix (((float3)tmpvar_24 * tmpvar_15.yxz), (float3)detailCoords_11, (float3)half3(nylerp_13));
  detailCoords_11 = half3(tmpvar_25);
  uv_10 = half2(((float2)((
    ((half)0.5 * detailCoords_11.yz)
   / 
    abs(detailCoords_11.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_26;
  uv_26 = float2(uv_10);
  float2 uvCont_27;
  float2 tmpvar_28;
  tmpvar_28 = abs((uv_26 - (0.5 * _mtl_u._DetailScale)));
  uvCont_27.x = max (tmpvar_28.x, tmpvar_28.y);
  uvCont_27.y = min (tmpvar_28.x, tmpvar_28.y);
  float4 tmpvar_29;
  tmpvar_29.xy = dfdx(uvCont_27);
  tmpvar_29.zw = dfdy(uvCont_27);
  half4 tmpvar_30;
  tmpvar_30 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_10), gradient2d((float2)(tmpvar_29.xy), (float2)(tmpvar_29.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  float3 tmpvar_32;
  tmpvar_32 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_33;
  float tmpvar_34;
  tmpvar_34 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_32, tmpvar_32)
  )), 0.0, 1.0);
  tmpvar_33 = half(tmpvar_34);
  half4 tmpvar_35;
  tmpvar_35 = ((_mtl_u._Color * tmpvar_9) * mix (tmpvar_31, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_33)));
  color_2 = tmpvar_35;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_36;
  tmpvar_36 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_37;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 84 math, 9 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
mov r0.xz, c5.yyww
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0, c2.x
mov r1.x, c6.x
mad r0.zw, c2.x, -r1.x, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v2
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r2.x, c5.x
dp2add_sat_pp r1.x, r1.x, c3.x, r2.x
lrp_pp r3, r1.x, c5.y, r0
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.y, r1.w, r1.z, r1.y
cmp r2.y, r0.w, r2.y, r1.x
cmp r2.z, -r2.y, c5.x, c5.y
cmp r2.y, r2.y, c5.z, c5.w
add_pp r4.y, r2.y, r2.z
mov_pp r0.y, -r4.y
mul_pp r0.xyz, r0, r1.yzxw
mov r4.xz, c5.yyww
mul_pp r2.yzw, r1.xzyx, r4.xxyz
mul_pp r1.xyz, r1, r4.xxyw
cmp_pp r0.xyz, r1.w, r2.yzww, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mad_pp r1.xy, r0.yzzw, r0.x, c6.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r2.yz, r0.xxyw
dsy r0.xy, r0
texldd_pp r5, r1, s0, r2.yzzw, r0
texldd_pp r6, r1, s1, r2.yzzw, r0
cmp_pp r4, r4.y, r5, r6
cmp_pp r0.x, r1.w, r4.z, r4.x
cmp_pp r0.w, r0.w, r0.x, r4.y
mov_pp r0.xyz, r4.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r3.w, c5.y
mul_pp r0, r3, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r2.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 88 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedfcabdjgpjacjimmlnklokgaianeidcbgabaaaaaaiaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceianaaaaeaaaaaaafcadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaak
icaabaaaaaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaia
ibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaa
aaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
boaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
claaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaa
bkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaa
abaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaa
acaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaa
aaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaa
abaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaak
dcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaa
amaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaai
pcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaaj
pcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaa
aaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadgaaaaafhcaabaaaabaaaaaapgapbaaaaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaai
fcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaa
abaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaa
adaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaaj
icaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaa
abaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaa
aeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaa
aeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaa
dgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
dcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaa
adaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaa
aeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaa
fgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaa
bjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaaj
bcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
ddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaa
aaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab
"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 83 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  half3 detailCoords_5;
  half s_6;
  half nylerp_7;
  half zxlerp_8;
  float3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = half(tmpvar_11);
  float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, (float)zxlerp_8);
  s_6 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, (float)s_6, (float)nylerp_7));
  s_6 = half(tmpvar_14);
  half3 tmpvar_15;
  tmpvar_15.xz = half2(float2(1.0, -1.0));
  tmpvar_15.y = -(s_6);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = s_6;
  float3 tmpvar_17;
  tmpvar_17 = mix (((float3)tmpvar_15 * tmpvar_9.xzy), ((float3)tmpvar_16 * tmpvar_9.zxy), (float3)half3(zxlerp_8));
  detailCoords_5 = half3(tmpvar_17);
  half3 tmpvar_18;
  tmpvar_18.xy = half2(float2(1.0, 1.0));
  tmpvar_18.z = s_6;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_18 * tmpvar_9.yxz), (float3)detailCoords_5, (float3)half3(nylerp_7));
  detailCoords_5 = half3(tmpvar_19);
  half2 tmpvar_20;
  tmpvar_20 = ((((half)0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + (half)0.5);
  float2 uv_21;
  uv_21 = float2(tmpvar_20);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_6 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_8), nylerp_7);
  half2 uv_31;
  half3 detailCoords_32;
  half s_33;
  half nylerp_34;
  half zxlerp_35;
  float3 tmpvar_36;
  tmpvar_36 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_37;
  tmpvar_37 = abs(tmpvar_36);
  float tmpvar_38;
  tmpvar_38 = float((tmpvar_37.z >= tmpvar_37.x));
  zxlerp_35 = half(tmpvar_38);
  float tmpvar_39;
  tmpvar_39 = float((max (tmpvar_37.x, tmpvar_37.z) >= tmpvar_37.y));
  nylerp_34 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = mix (tmpvar_36.x, tmpvar_36.z, (float)zxlerp_35);
  s_33 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = sign(mix (tmpvar_36.y, (float)s_33, (float)nylerp_34));
  s_33 = half(tmpvar_41);
  half3 tmpvar_42;
  tmpvar_42.xz = half2(float2(1.0, -1.0));
  tmpvar_42.y = -(s_33);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, -1.0));
  tmpvar_43.y = s_33;
  float3 tmpvar_44;
  tmpvar_44 = mix (((float3)tmpvar_42 * tmpvar_36.xzy), ((float3)tmpvar_43 * tmpvar_36.zxy), (float3)half3(zxlerp_35));
  detailCoords_32 = half3(tmpvar_44);
  half3 tmpvar_45;
  tmpvar_45.xy = half2(float2(1.0, 1.0));
  tmpvar_45.z = s_33;
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_45 * tmpvar_36.yxz), (float3)detailCoords_32, (float3)half3(nylerp_34));
  detailCoords_32 = half3(tmpvar_46);
  uv_31 = half2(((float2)((
    ((half)0.5 * detailCoords_32.yz)
   / 
    abs(detailCoords_32.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_47;
  uv_47 = float2(uv_31);
  float2 uvCont_48;
  float2 tmpvar_49;
  tmpvar_49 = abs((uv_47 - (0.5 * _mtl_u._DetailScale)));
  uvCont_48.x = max (tmpvar_49.x, tmpvar_49.y);
  uvCont_48.y = min (tmpvar_49.x, tmpvar_49.y);
  float4 tmpvar_50;
  tmpvar_50.xy = dfdx(uvCont_48);
  tmpvar_50.zw = dfdy(uvCont_48);
  half4 tmpvar_51;
  tmpvar_51 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_31), gradient2d((float2)(tmpvar_50.xy), (float2)(tmpvar_50.zw)));
  half4 tmpvar_52;
  tmpvar_52 = tmpvar_51;
  float3 tmpvar_53;
  tmpvar_53 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_54;
  float tmpvar_55;
  tmpvar_55 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_53, tmpvar_53)
  )), 0.0, 1.0);
  tmpvar_54 = half(tmpvar_55);
  half4 tmpvar_56;
  tmpvar_56 = ((_mtl_u._Color * tmpvar_30) * mix (tmpvar_52, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_54)));
  color_2 = tmpvar_56;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_57;
  tmpvar_57 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_58;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 89 math, 9 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 0, 1, -0, -1
def c7, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
mov r0.xz, c6.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.x, c6.y
cmp r2.x, r2.x, c6.z, c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c6.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.x
rcp r0.x, r0_abs.x
mad_pp r1.xy, r0.yzzw, r0.x, c7.x
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r2.xz, r0.xyyw
dsy r0.xy, r0
texldd_pp r3, r1, s0, r2.xzzw, r0
texldd_pp r4, r1, s1, r2.xzzw, r0
cmp_pp r2, r2.y, r3, r4
cmp_pp r0.x, r1.w, r2.z, r2.x
cmp_pp r0.x, r0.w, r0.x, r2.y
mov_pp r0.yzw, r2.w
mul_pp r0.yz, r0, c1.xxyw
add_pp r0.y, r0.z, r0.y
mad_pp r0.y, r0.w, c1.z, r0.y
mad_pp r0.w, r0.x, c1.w, r0.y
mov r0.xyz, c6.y
mul_pp r0, r0, c2
mov r1.xz, c6.yyww
dp3 r1.w, v4, v4
rsq r1.w, r1.w
mul r2.xyz, r1.w, v4.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c6.x, c6.y
cmp r3.x, r3.x, c6.z, c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c6.yyww
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c7.x
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c7.x
mul_pp r1.xy, r1, c3.x
mov r2.x, c7.x
mad r1.zw, c3.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s2, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c6.x
dp2add_sat_pp r2.x, r2.x, c4.x, r3.x
lrp_pp r4, r2.x, c6.y, r1
mad_pp r1.x, r0.w, -r4.w, c6.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c6.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.y

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedmmfflkbdilaoefogiphmkopmckgjdbjeabaaaaaacmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpeanaaaaeaaaaaaahnadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
agaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaa
aeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaa
acaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaa
abaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaak
icaabaaaaaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadeaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaia
ibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaa
aaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaa
boaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaa
claaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaa
bkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaa
abaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaa
acaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaa
aaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaa
abaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaak
dcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaa
amaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaai
pcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaaj
pcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaa
aaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaaabaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadgaaaaafocaabaaaaaaaaaaapgapbaaaaaaaaaaadiaaaaai
gcaabaaaaaaaaaaafgagbaaaaaaaaaaaagibcaaaaaaaaaaabgaaaaaaaaaaaaah
ccaabaaaaaaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakccaabaaa
aaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaabgaaaaaabkaabaaaaaaaaaaa
dcaaaaakicaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaa
bkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaa
ckbabaaaafaaaaaadkaabaaaabaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaaj
bcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaa
dkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaa
dkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaa
abaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaa
abaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaa
kgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaia
ibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
acaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaa
agaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaadcaaaaampccabaaa
aaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  half3 detailCoords_5;
  half s_6;
  half nylerp_7;
  half zxlerp_8;
  float3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = half(tmpvar_11);
  float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, (float)zxlerp_8);
  s_6 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, (float)s_6, (float)nylerp_7));
  s_6 = half(tmpvar_14);
  half3 tmpvar_15;
  tmpvar_15.xz = half2(float2(1.0, -1.0));
  tmpvar_15.y = -(s_6);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = s_6;
  float3 tmpvar_17;
  tmpvar_17 = mix (((float3)tmpvar_15 * tmpvar_9.xzy), ((float3)tmpvar_16 * tmpvar_9.zxy), (float3)half3(zxlerp_8));
  detailCoords_5 = half3(tmpvar_17);
  half3 tmpvar_18;
  tmpvar_18.xy = half2(float2(1.0, 1.0));
  tmpvar_18.z = s_6;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_18 * tmpvar_9.yxz), (float3)detailCoords_5, (float3)half3(nylerp_7));
  detailCoords_5 = half3(tmpvar_19);
  half2 tmpvar_20;
  tmpvar_20 = ((((half)0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + (half)0.5);
  float2 uv_21;
  uv_21 = float2(tmpvar_20);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = mix (tmpvar_28, tmpvar_26, half4(half((s_6 >= (half)0.0))));
  half4 tmpvar_30;
  tmpvar_30.x = tmpvar_29.w;
  tmpvar_30.y = tmpvar_29.w;
  tmpvar_30.z = tmpvar_29.w;
  tmpvar_30.w = mix (tmpvar_29.y, mix (tmpvar_29.x, tmpvar_29.z, zxlerp_8), nylerp_7);
  half4 v_31;
  v_31 = (tmpvar_30 * _mtl_u.alphaMask1);
  half4 tmpvar_32;
  tmpvar_32.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_32.w = ((v_31.x + v_31.y) + (v_31.z + v_31.w));
  half2 uv_33;
  half3 detailCoords_34;
  half s_35;
  half nylerp_36;
  half zxlerp_37;
  float3 tmpvar_38;
  tmpvar_38 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_39;
  tmpvar_39 = abs(tmpvar_38);
  float tmpvar_40;
  tmpvar_40 = float((tmpvar_39.z >= tmpvar_39.x));
  zxlerp_37 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = float((max (tmpvar_39.x, tmpvar_39.z) >= tmpvar_39.y));
  nylerp_36 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_37);
  s_35 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = sign(mix (tmpvar_38.y, (float)s_35, (float)nylerp_36));
  s_35 = half(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, -1.0));
  tmpvar_44.y = -(s_35);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, -1.0));
  tmpvar_45.y = s_35;
  float3 tmpvar_46;
  tmpvar_46 = mix (((float3)tmpvar_44 * tmpvar_38.xzy), ((float3)tmpvar_45 * tmpvar_38.zxy), (float3)half3(zxlerp_37));
  detailCoords_34 = half3(tmpvar_46);
  half3 tmpvar_47;
  tmpvar_47.xy = half2(float2(1.0, 1.0));
  tmpvar_47.z = s_35;
  float3 tmpvar_48;
  tmpvar_48 = mix (((float3)tmpvar_47 * tmpvar_38.yxz), (float3)detailCoords_34, (float3)half3(nylerp_36));
  detailCoords_34 = half3(tmpvar_48);
  uv_33 = half2(((float2)((
    ((half)0.5 * detailCoords_34.yz)
   / 
    abs(detailCoords_34.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_49;
  uv_49 = float2(uv_33);
  float2 uvCont_50;
  float2 tmpvar_51;
  tmpvar_51 = abs((uv_49 - (0.5 * _mtl_u._DetailScale)));
  uvCont_50.x = max (tmpvar_51.x, tmpvar_51.y);
  uvCont_50.y = min (tmpvar_51.x, tmpvar_51.y);
  float4 tmpvar_52;
  tmpvar_52.xy = dfdx(uvCont_50);
  tmpvar_52.zw = dfdy(uvCont_50);
  half4 tmpvar_53;
  tmpvar_53 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_33), gradient2d((float2)(tmpvar_52.xy), (float2)(tmpvar_52.zw)));
  half4 tmpvar_54;
  tmpvar_54 = tmpvar_53;
  float3 tmpvar_55;
  tmpvar_55 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_55, tmpvar_55)
  )), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half4 tmpvar_58;
  tmpvar_58 = ((_mtl_u._Color * tmpvar_32) * mix (tmpvar_54, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_56)));
  color_2 = tmpvar_58;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_59);
  half4 tmpvar_60;
  tmpvar_60 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_60;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 85 math, 21 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c5, 0, 1, -0, -1
def c6, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c5.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c5.x, c5.y
cmp r2.x, r2.x, c5.z, c5.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c5.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c6.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad_pp r0.xy, r0.yzzw, r0.x, c6.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0, r0, c1
mov r1.xz, c5.yyww
dp3 r1.w, v4, v4
rsq r1.w, r1.w
mul r2.xyz, r1.w, v4.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c5.x, c5.y
cmp r3.x, r3.x, c5.z, c5.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c5.yyww
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c6.x
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c6.x
mul_pp r1.xy, r1, c2.x
mov r2.x, c6.x
mad r1.zw, c2.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c5.x
dp2add_sat_pp r2.x, r2.x, c3.x, r3.x
lrp_pp r4, r2.x, c5.y, r1
mad_pp r1.x, r0.w, -r4.w, c5.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c5.w
mul r1.w, r0.w, c4.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c5.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c5.y

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedpoajbmlkdkmpaonejjmppbdnohmalkdeabaaaaaadebaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmaoaaaaeaaaaaaalpadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaaafaaaaaapgapbaaaaaaaaaaa
egaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
agaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaaahaaaaaadcaaaaajpcaabaaa
agaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaaj
pcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaa
aeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaadcaaaaak
icaabaaaacaaaaaackbabaaaafaaaaaadkaabaaaabaaaaaabkaabaiaebaaaaaa
acaaaaaabnaaaaajbcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaaacaaaaaa
bkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaa
dkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaackaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaadkaabaaa
acaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaaadaaaaaa
abeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaa
adaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaaabaaaaaa
dgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaaaeaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaadcaaaaaj
hcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaagabbaaa
aeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaa
abaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaa
abaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaia
ibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaa
adaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaa
ckaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
agaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaal
pcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaai
bcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaaj
pcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
dcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 89 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 36
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  half3 detailCoords_5;
  half s_6;
  half nylerp_7;
  half zxlerp_8;
  float3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = half(tmpvar_11);
  float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, (float)zxlerp_8);
  s_6 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, (float)s_6, (float)nylerp_7));
  s_6 = half(tmpvar_14);
  half3 tmpvar_15;
  tmpvar_15.xz = half2(float2(1.0, -1.0));
  tmpvar_15.y = -(s_6);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = s_6;
  float3 tmpvar_17;
  tmpvar_17 = mix (((float3)tmpvar_15 * tmpvar_9.xzy), ((float3)tmpvar_16 * tmpvar_9.zxy), (float3)half3(zxlerp_8));
  detailCoords_5 = half3(tmpvar_17);
  half3 tmpvar_18;
  tmpvar_18.xy = half2(float2(1.0, 1.0));
  tmpvar_18.z = s_6;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_18 * tmpvar_9.yxz), (float3)detailCoords_5, (float3)half3(nylerp_7));
  detailCoords_5 = half3(tmpvar_19);
  half2 tmpvar_20;
  tmpvar_20 = ((((half)0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + (half)0.5);
  float2 uv_21;
  uv_21 = float2(tmpvar_20);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half2 uv_37;
  half3 detailCoords_38;
  half s_39;
  half nylerp_40;
  half zxlerp_41;
  float3 tmpvar_42;
  tmpvar_42 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_43;
  tmpvar_43 = abs(tmpvar_42);
  float tmpvar_44;
  tmpvar_44 = float((tmpvar_43.z >= tmpvar_43.x));
  zxlerp_41 = half(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = float((max (tmpvar_43.x, tmpvar_43.z) >= tmpvar_43.y));
  nylerp_40 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = mix (tmpvar_42.x, tmpvar_42.z, (float)zxlerp_41);
  s_39 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = sign(mix (tmpvar_42.y, (float)s_39, (float)nylerp_40));
  s_39 = half(tmpvar_47);
  half3 tmpvar_48;
  tmpvar_48.xz = half2(float2(1.0, -1.0));
  tmpvar_48.y = -(s_39);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, -1.0));
  tmpvar_49.y = s_39;
  float3 tmpvar_50;
  tmpvar_50 = mix (((float3)tmpvar_48 * tmpvar_42.xzy), ((float3)tmpvar_49 * tmpvar_42.zxy), (float3)half3(zxlerp_41));
  detailCoords_38 = half3(tmpvar_50);
  half3 tmpvar_51;
  tmpvar_51.xy = half2(float2(1.0, 1.0));
  tmpvar_51.z = s_39;
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_51 * tmpvar_42.yxz), (float3)detailCoords_38, (float3)half3(nylerp_40));
  detailCoords_38 = half3(tmpvar_52);
  uv_37 = half2(((float2)((
    ((half)0.5 * detailCoords_38.yz)
   / 
    abs(detailCoords_38.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_53;
  uv_53 = float2(uv_37);
  float2 uvCont_54;
  float2 tmpvar_55;
  tmpvar_55 = abs((uv_53 - (0.5 * _mtl_u._DetailScale)));
  uvCont_54.x = max (tmpvar_55.x, tmpvar_55.y);
  uvCont_54.y = min (tmpvar_55.x, tmpvar_55.y);
  float4 tmpvar_56;
  tmpvar_56.xy = dfdx(uvCont_54);
  tmpvar_56.zw = dfdy(uvCont_54);
  half4 tmpvar_57;
  tmpvar_57 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_37), gradient2d((float2)(tmpvar_56.xy), (float2)(tmpvar_56.zw)));
  half4 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  float3 tmpvar_59;
  tmpvar_59 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_60;
  float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_59, tmpvar_59)
  )), 0.0, 1.0);
  tmpvar_60 = half(tmpvar_61);
  half4 tmpvar_62;
  tmpvar_62 = ((_mtl_u._Color * mix (
    mix (tmpvar_30, tmpvar_32, half4(half((s_6 >= (half)0.0))))
  , 
    mix (mix (tmpvar_26, tmpvar_28, half4(half((s_6 >= (half)0.0)))), mix (tmpvar_34, tmpvar_36, half4(half((s_6 >= (half)0.0)))), half4(zxlerp_8))
  , half4(nylerp_7))) * mix (tmpvar_58, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_60)));
  color_2 = tmpvar_62;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_63;
  tmpvar_63 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_64;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 90 math, 21 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 0, 1, -0, -1
def c7, 0.5, 0, 0, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c6.yyww
dp3 r0.w, v3, v3
rsq r0.w, r0.w
mul r1.xyz, r0.w, v3.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.x, c6.y
cmp r2.x, r2.x, c6.z, c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c6.yyww
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.x
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad_pp r0.xy, r0.yzzw, r0.x, c7.x
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c6.y
mul_pp r0, r0, c2
mov r1.xz, c6.yyww
dp3 r1.w, v4, v4
rsq r1.w, r1.w
mul r2.xyz, r1.w, v4.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c6.x, c6.y
cmp r3.x, r3.x, c6.z, c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c6.yyww
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c7.x
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c7.x
mul_pp r1.xy, r1, c3.x
mov r2.x, c7.x
mad r1.zw, c3.x, -r2.x, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v2
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r3.x, c6.x
dp2add_sat_pp r2.x, r2.x, c4.x, r3.x
lrp_pp r4, r2.x, c6.y, r1
mad_pp r1.x, r0.w, -r4.w, c6.y
mul_pp r0, r0, r4
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c6.xxxw
mov r1.w, v0.w
cmp_pp r1.x, r1.w, v1.x, r3.x
mad_pp oC0, r1.x, r0, c6.y

"
}
SubProgram "d3d11 " {
// Stats: 96 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedpmdfjifjnjajoaepgbadigihlhgbdlblabaaaaaaoabaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacaaaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckiapaaaaeaaaaaaaokadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
aeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaaf
dcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
agaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaaafaaaaaapgapbaaaaaaaaaaa
egaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
agaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaaahaaaaaadcaaaaajpcaabaaa
agaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaaj
pcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaa
aeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaa
ckiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaadgaaaaai
hcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaai
fcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaa
abaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaa
adaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaaj
icaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaa
abaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaa
aeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaa
aeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaa
dgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
dcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaa
adaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaa
aeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaa
fgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaa
bjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaaj
bcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
ddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaa
egaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaa
aaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab
"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  half3 detailCoords_5;
  half s_6;
  half nylerp_7;
  half zxlerp_8;
  float3 tmpvar_9;
  tmpvar_9 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_10;
  tmpvar_10 = abs(tmpvar_9);
  float tmpvar_11;
  tmpvar_11 = float((tmpvar_10.z >= tmpvar_10.x));
  zxlerp_8 = half(tmpvar_11);
  float tmpvar_12;
  tmpvar_12 = float((max (tmpvar_10.x, tmpvar_10.z) >= tmpvar_10.y));
  nylerp_7 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = mix (tmpvar_9.x, tmpvar_9.z, (float)zxlerp_8);
  s_6 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = sign(mix (tmpvar_9.y, (float)s_6, (float)nylerp_7));
  s_6 = half(tmpvar_14);
  half3 tmpvar_15;
  tmpvar_15.xz = half2(float2(1.0, -1.0));
  tmpvar_15.y = -(s_6);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = s_6;
  float3 tmpvar_17;
  tmpvar_17 = mix (((float3)tmpvar_15 * tmpvar_9.xzy), ((float3)tmpvar_16 * tmpvar_9.zxy), (float3)half3(zxlerp_8));
  detailCoords_5 = half3(tmpvar_17);
  half3 tmpvar_18;
  tmpvar_18.xy = half2(float2(1.0, 1.0));
  tmpvar_18.z = s_6;
  float3 tmpvar_19;
  tmpvar_19 = mix (((float3)tmpvar_18 * tmpvar_9.yxz), (float3)detailCoords_5, (float3)half3(nylerp_7));
  detailCoords_5 = half3(tmpvar_19);
  half2 tmpvar_20;
  tmpvar_20 = ((((half)0.5 * detailCoords_5.yz) / abs(detailCoords_5.x)) + (half)0.5);
  float2 uv_21;
  uv_21 = float2(tmpvar_20);
  float2 uvCont_22;
  float2 tmpvar_23;
  tmpvar_23 = abs((uv_21 - 0.5));
  uvCont_22.x = max (tmpvar_23.x, tmpvar_23.y);
  uvCont_22.y = min (tmpvar_23.x, tmpvar_23.y);
  float4 tmpvar_24;
  tmpvar_24.xy = dfdx(uvCont_22);
  tmpvar_24.zw = dfdy(uvCont_22);
  half4 tmpvar_25;
  tmpvar_25 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  half4 tmpvar_27;
  tmpvar_27 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_28;
  tmpvar_28 = tmpvar_27;
  half4 tmpvar_29;
  tmpvar_29 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  half4 tmpvar_31;
  tmpvar_31 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  half4 tmpvar_33;
  tmpvar_33 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  half4 tmpvar_35;
  tmpvar_35 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(tmpvar_20), gradient2d((float2)(tmpvar_24.xy), (float2)(tmpvar_24.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  half4 v_37;
  v_37 = (mix (mix (tmpvar_30, tmpvar_32, half4(
    half((s_6 >= (half)0.0))
  )), mix (
    mix (tmpvar_26, tmpvar_28, half4(half((s_6 >= (half)0.0))))
  , 
    mix (tmpvar_34, tmpvar_36, half4(half((s_6 >= (half)0.0))))
  , half4(zxlerp_8)), half4(nylerp_7)) * _mtl_u.alphaMask1);
  half4 tmpvar_38;
  tmpvar_38.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_38.w = ((v_37.x + v_37.y) + (v_37.z + v_37.w));
  half2 uv_39;
  half3 detailCoords_40;
  half s_41;
  half nylerp_42;
  half zxlerp_43;
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  float tmpvar_46;
  tmpvar_46 = float((tmpvar_45.z >= tmpvar_45.x));
  zxlerp_43 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = float((max (tmpvar_45.x, tmpvar_45.z) >= tmpvar_45.y));
  nylerp_42 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = mix (tmpvar_44.x, tmpvar_44.z, (float)zxlerp_43);
  s_41 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = sign(mix (tmpvar_44.y, (float)s_41, (float)nylerp_42));
  s_41 = half(tmpvar_49);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, -1.0));
  tmpvar_50.y = -(s_41);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, -1.0));
  tmpvar_51.y = s_41;
  float3 tmpvar_52;
  tmpvar_52 = mix (((float3)tmpvar_50 * tmpvar_44.xzy), ((float3)tmpvar_51 * tmpvar_44.zxy), (float3)half3(zxlerp_43));
  detailCoords_40 = half3(tmpvar_52);
  half3 tmpvar_53;
  tmpvar_53.xy = half2(float2(1.0, 1.0));
  tmpvar_53.z = s_41;
  float3 tmpvar_54;
  tmpvar_54 = mix (((float3)tmpvar_53 * tmpvar_44.yxz), (float3)detailCoords_40, (float3)half3(nylerp_42));
  detailCoords_40 = half3(tmpvar_54);
  uv_39 = half2(((float2)((
    ((half)0.5 * detailCoords_40.yz)
   / 
    abs(detailCoords_40.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_55;
  uv_55 = float2(uv_39);
  float2 uvCont_56;
  float2 tmpvar_57;
  tmpvar_57 = abs((uv_55 - (0.5 * _mtl_u._DetailScale)));
  uvCont_56.x = max (tmpvar_57.x, tmpvar_57.y);
  uvCont_56.y = min (tmpvar_57.x, tmpvar_57.y);
  float4 tmpvar_58;
  tmpvar_58.xy = dfdx(uvCont_56);
  tmpvar_58.zw = dfdy(uvCont_56);
  half4 tmpvar_59;
  tmpvar_59 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_39), gradient2d((float2)(tmpvar_58.xy), (float2)(tmpvar_58.zw)));
  half4 tmpvar_60;
  tmpvar_60 = tmpvar_59;
  float3 tmpvar_61;
  tmpvar_61 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_62;
  float tmpvar_63;
  tmpvar_63 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_61, tmpvar_61)
  )), 0.0, 1.0);
  tmpvar_62 = half(tmpvar_63);
  half4 tmpvar_64;
  tmpvar_64 = ((_mtl_u._Color * tmpvar_38) * mix (tmpvar_60, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_62)));
  color_2 = tmpvar_64;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_65;
  tmpvar_65 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_65);
  half4 tmpvar_66;
  tmpvar_66 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_66;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_OFF" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 98 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 0.180141002
def c7, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c8, 0, 1, -2, 1.57079637
def c9, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c10, -0.212114394, 1.57072878, -2, 3.14159274
def c11, 0.318309873, 1, -1, 0
def c12, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c8.xyxw, c8.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c7.x, c7.y
mad r1.w, r0.z, r1.w, c6.w
mad r1.w, r0.z, r1.w, c7.z
mad r0.z, r0.z, r1.w, c7.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c8.z, c8.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c12.xxyw, c12.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c6.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c9.x, c9.y
mul r0.x, r0.x, c9.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c9.z, c9.w
mad r1.z, r1.z, r0_abs.w, c10.x
mad r1.z, r1.z, r0_abs.w, c10.y
add r0.w, -r0_abs.w, c8.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c10.z, c10.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c11.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0, r0, c1
mov r1.xz, c11.yyzw
dp3 r1.w, v5, v5
rsq r1.w, r1.w
mul r2.xyz, r1.w, v5.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c8.x, c8.y
cmp r3.x, r3.x, -c8.x, -c8.y
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c11.yyzw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c9.y
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c9.y
mul_pp r1.xy, r1, c2.x
mov r2.y, c9.y
mad r1.zw, c2.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c8.y, r1
mad_pp r1.x, r0.w, -r3.w, c8.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c8.y
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c12.xxxw
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c8.y

"
}
SubProgram "d3d11 " {
// Stats: 96 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedalopdmnflhkbkbdchephponmeacepjkmabaaaaaanaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjianaaaaeaaaaaaaggadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaa
dcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaaabaaaaaabkaabaia
ebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
dkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaa
adaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaia
ebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaa
abaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
adaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
agabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaea
aaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
blaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdo
diaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 119 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half2 uv_15;
  half3 detailCoords_16;
  half s_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_20);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  zxlerp_19 = half(tmpvar_22);
  float tmpvar_23;
  tmpvar_23 = float((max (tmpvar_21.x, tmpvar_21.z) >= tmpvar_21.y));
  nylerp_18 = half(tmpvar_23);
  float tmpvar_24;
  tmpvar_24 = mix (tmpvar_20.x, tmpvar_20.z, (float)zxlerp_19);
  s_17 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = sign(mix (tmpvar_20.y, (float)s_17, (float)nylerp_18));
  s_17 = half(tmpvar_25);
  half3 tmpvar_26;
  tmpvar_26.xz = half2(float2(1.0, -1.0));
  tmpvar_26.y = -(s_17);
  half3 tmpvar_27;
  tmpvar_27.xz = half2(float2(1.0, -1.0));
  tmpvar_27.y = s_17;
  float3 tmpvar_28;
  tmpvar_28 = mix (((float3)tmpvar_26 * tmpvar_20.xzy), ((float3)tmpvar_27 * tmpvar_20.zxy), (float3)half3(zxlerp_19));
  detailCoords_16 = half3(tmpvar_28);
  half3 tmpvar_29;
  tmpvar_29.xy = half2(float2(1.0, 1.0));
  tmpvar_29.z = s_17;
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_29 * tmpvar_20.yxz), (float3)detailCoords_16, (float3)half3(nylerp_18));
  detailCoords_16 = half3(tmpvar_30);
  uv_15 = half2(((float2)((
    ((half)0.5 * detailCoords_16.yz)
   / 
    abs(detailCoords_16.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_31;
  uv_31 = float2(uv_15);
  float2 uvCont_32;
  float2 tmpvar_33;
  tmpvar_33 = abs((uv_31 - (0.5 * _mtl_u._DetailScale)));
  uvCont_32.x = max (tmpvar_33.x, tmpvar_33.y);
  uvCont_32.y = min (tmpvar_33.x, tmpvar_33.y);
  float4 tmpvar_34;
  tmpvar_34.xy = dfdx(uvCont_32);
  tmpvar_34.zw = dfdy(uvCont_32);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_15), gradient2d((float2)(tmpvar_34.xy), (float2)(tmpvar_34.zw)));
  half4 tmpvar_36;
  tmpvar_36 = tmpvar_35;
  float3 tmpvar_37;
  tmpvar_37 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_37, tmpvar_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_36, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_2 = tmpvar_40;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_41;
  tmpvar_41 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_42;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_N_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 103 math, 6 textures
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_PlanetRadius]
Float 6 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c7, 5, 0.200000003, 0, 0.180141002
def c8, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
def c9, 0, 1, -2, 1.57079637
def c10, 0.159154937, 0.5, -0.0187292993, 0.0742610022
def c11, -0.212114394, 1.57072878, -2, 3.14159274
def c12, 0.318309873, 1, -1, 0
def c13, -0, 0, -3.14159274, 1
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r0.yzw, r0.x, v4.xzxy
mad r0.x, v4.x, r0.x, -r0.y
cmp r1.xy, r0.x, r0.yzzw, r0.zyzw
add r1.zw, -r0_abs.xyyz, r0_abs.xyzy
cmp r0.xz, r1.z, r0_abs.yyzw, r0_abs.zyyw
cmp r1.yz, r1.xyww, c9.xyxw, c9.xxyw
rcp r0.z, r0.z
mul r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r1.w, r0.z, c8.x, c8.y
mad r1.w, r0.z, r1.w, c7.w
mad r1.w, r0.z, r1.w, c8.z
mad r0.z, r0.z, r1.w, c8.w
mul r0.x, r0.z, r0.x
mad r0.z, r0.x, c9.z, c9.w
mad r0.x, r0.z, r1.z, r0.x
cmp r0.yz, r0.xyww, c13.xxyw, c13.xzww
add r0.x, r0.y, r0.x
add r0.y, r0.x, r0.x
cmp r1.x, r1.x, c7.z, r1.y
mad r0.x, r1.x, -r0.y, r0.x
mad r1.x, r0.x, c10.x, c10.y
mul r0.x, r0.x, c10.x
abs r0.x, r0.x
dsx r2.x, r0.x
dsy r0.x, r0.x
mad r1.z, r0_abs.w, c10.z, c10.w
mad r1.z, r1.z, r0_abs.w, c11.x
mad r1.z, r1.z, r0_abs.w, c11.y
add r0.w, -r0_abs.w, c9.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r0.w, r0.w, r1.z
mad r1.z, r0.w, c11.z, c11.w
mad r0.z, r1.z, r0.z, r0.w
mul r1.y, r0.z, c12.x
dsx r2.y, r1.y
dsy r0.y, r1.y
texldd_pp r0, r1, s0, r2, r0
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c9.y
mul_pp r0, r0, c2
mov r1.xz, c12.yyzw
dp3 r1.w, v5, v5
rsq r1.w, r1.w
mul r2.xyz, r1.w, v5.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c9.x, c9.y
cmp r3.x, r3.x, -c9.x, -c9.y
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c12.yyzw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c10.y
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c10.y
mul_pp r1.xy, r1, c3.x
mov r2.y, c10.y
mad r1.zw, c3.x, -r2.y, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s1, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c7.z
dp2add_sat_pp r2.x, r2.x, c4.x, r2.z
lrp_pp r3, r2.x, c9.y, r1
mad_pp r1.x, r0.w, -r3.w, c9.y
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c9.y
mul r1.w, r0.w, c6.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, -c13.xxxw
add r1.x, c7.x, v2.x
add r1.x, r1.x, -c5.x
mul_sat r1.x, r1.x, c7.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c7.z
mad_pp oC0, r1.x, r0, c9.y

"
}
SubProgram "d3d11 " {
// Stats: 100 math
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedpjkjfhchklikegoefjeooedpmbeimkmnabaaaaaahmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceeaoaaaaeaaaaaaajbadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodgaaaaagbcaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaaaaaaaaaamaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaaaaaaaaabkaabaaaacaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaackiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaadcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaa
dgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaa
dgaaaaaifcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaa
dkaabaaaabaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaa
akaabaaaadaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaa
abaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaa
deaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaadbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaa
dbaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaabaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaaf
ccaabaaaaeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaaabaaaaaabkaabaia
ebaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaa
acaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaa
agajbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaa
jgahbaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaia
ebaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaaegacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaa
aaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadp
aaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaa
aaaaaaaabjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaa
bjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaa
deaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaia
ibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaa
fgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaa
agaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaa
abaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaa
abaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaah
bcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaa
acaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaablaaaaaadicaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 124 math, 2 textures, 3 branches
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_PlanetRadius]
Float 44 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  float2 uv_7;
  float tmpvar_8;
  float tmpvar_9;
  tmpvar_9 = (min (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0) / max (abs(
    (tmpvar_6.x / tmpvar_6.z)
  ), 1.0));
  float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  tmpvar_10 = (((
    ((((
      ((((-0.01213232 * tmpvar_10) + 0.05368138) * tmpvar_10) - 0.1173503)
     * tmpvar_10) + 0.1938925) * tmpvar_10) - 0.3326756)
   * tmpvar_10) + 0.9999793) * tmpvar_9);
  tmpvar_10 = (tmpvar_10 + (float(
    (abs((tmpvar_6.x / tmpvar_6.z)) > 1.0)
  ) * (
    (tmpvar_10 * -2.0)
   + 1.570796)));
  tmpvar_8 = (tmpvar_10 * sign((tmpvar_6.x / tmpvar_6.z)));
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.141593;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.141593);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.570796);
  };
  uv_7.x = (0.5 + (0.1591549 * tmpvar_8));
  uv_7.y = (0.3183099 * (1.570796 - (
    sign(tmpvar_6.y)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.570796 + (
      abs(tmpvar_6.y)
     * 
      (-0.2146018 + (abs(tmpvar_6.y) * (0.08656672 + (
        abs(tmpvar_6.y)
       * -0.03102955))))
    ))))
  )));
  float2 uvCont_11;
  uvCont_11.y = uv_7.y;
  uvCont_11.x = abs((uv_7.x - 0.5));
  float4 tmpvar_12;
  tmpvar_12.xy = dfdx(uvCont_11);
  tmpvar_12.zw = dfdy(uvCont_11);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 v_15;
  v_15 = (tmpvar_14 * _mtl_u.alphaMask1);
  half4 tmpvar_16;
  tmpvar_16.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_16.w = ((v_15.x + v_15.y) + (v_15.z + v_15.w));
  half2 uv_17;
  half3 detailCoords_18;
  half s_19;
  half nylerp_20;
  half zxlerp_21;
  float3 tmpvar_22;
  tmpvar_22 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_23;
  tmpvar_23 = abs(tmpvar_22);
  float tmpvar_24;
  tmpvar_24 = float((tmpvar_23.z >= tmpvar_23.x));
  zxlerp_21 = half(tmpvar_24);
  float tmpvar_25;
  tmpvar_25 = float((max (tmpvar_23.x, tmpvar_23.z) >= tmpvar_23.y));
  nylerp_20 = half(tmpvar_25);
  float tmpvar_26;
  tmpvar_26 = mix (tmpvar_22.x, tmpvar_22.z, (float)zxlerp_21);
  s_19 = half(tmpvar_26);
  float tmpvar_27;
  tmpvar_27 = sign(mix (tmpvar_22.y, (float)s_19, (float)nylerp_20));
  s_19 = half(tmpvar_27);
  half3 tmpvar_28;
  tmpvar_28.xz = half2(float2(1.0, -1.0));
  tmpvar_28.y = -(s_19);
  half3 tmpvar_29;
  tmpvar_29.xz = half2(float2(1.0, -1.0));
  tmpvar_29.y = s_19;
  float3 tmpvar_30;
  tmpvar_30 = mix (((float3)tmpvar_28 * tmpvar_22.xzy), ((float3)tmpvar_29 * tmpvar_22.zxy), (float3)half3(zxlerp_21));
  detailCoords_18 = half3(tmpvar_30);
  half3 tmpvar_31;
  tmpvar_31.xy = half2(float2(1.0, 1.0));
  tmpvar_31.z = s_19;
  float3 tmpvar_32;
  tmpvar_32 = mix (((float3)tmpvar_31 * tmpvar_22.yxz), (float3)detailCoords_18, (float3)half3(nylerp_20));
  detailCoords_18 = half3(tmpvar_32);
  uv_17 = half2(((float2)((
    ((half)0.5 * detailCoords_18.yz)
   / 
    abs(detailCoords_18.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_33;
  uv_33 = float2(uv_17);
  float2 uvCont_34;
  float2 tmpvar_35;
  tmpvar_35 = abs((uv_33 - (0.5 * _mtl_u._DetailScale)));
  uvCont_34.x = max (tmpvar_35.x, tmpvar_35.y);
  uvCont_34.y = min (tmpvar_35.x, tmpvar_35.y);
  float4 tmpvar_36;
  tmpvar_36.xy = dfdx(uvCont_34);
  tmpvar_36.zw = dfdy(uvCont_34);
  half4 tmpvar_37;
  tmpvar_37 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_17), gradient2d((float2)(tmpvar_36.xy), (float2)(tmpvar_36.zw)));
  half4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_40;
  float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_39, tmpvar_39)
  )), 0.0, 1.0);
  tmpvar_40 = half(tmpvar_41);
  half4 tmpvar_42;
  tmpvar_42 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_38, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_40)));
  color_2 = tmpvar_42;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_43;
  tmpvar_43 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_43);
  half4 tmpvar_44;
  tmpvar_44 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_44;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "MAP_TYPE_1" "ALPHAMAP_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 57 math, 4 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
mov r0.xz, c7.xyyw
dp3 r0.w, v5, v5
rsq r0.w, r0.w
mul r1.xyz, r0.w, v5.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 58 math, 1 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecediicjgjpkgjkjhppplimcagceglicokffabaaaaaaoaajaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckiaiaaaaeaaaaaaackacaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaafaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaafaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaa
jgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaao
mcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaa
aaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaa
abaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaa
aaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
apcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabjaaaaaa
dcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
agaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
egaobaaaabaaaaaaegiocaaaaaaaaaaabhaaaaaadcaaaaakbcaabaaaacaaaaaa
dkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaa
abaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
icaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialp
bnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaa
bkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaablaaaaaadicaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab
"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 55 math, 2 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half2 uv_9;
  half3 detailCoords_10;
  half s_11;
  half nylerp_12;
  half zxlerp_13;
  float3 tmpvar_14;
  tmpvar_14 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_15;
  tmpvar_15 = abs(tmpvar_14);
  float tmpvar_16;
  tmpvar_16 = float((tmpvar_15.z >= tmpvar_15.x));
  zxlerp_13 = half(tmpvar_16);
  float tmpvar_17;
  tmpvar_17 = float((max (tmpvar_15.x, tmpvar_15.z) >= tmpvar_15.y));
  nylerp_12 = half(tmpvar_17);
  float tmpvar_18;
  tmpvar_18 = mix (tmpvar_14.x, tmpvar_14.z, (float)zxlerp_13);
  s_11 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = sign(mix (tmpvar_14.y, (float)s_11, (float)nylerp_12));
  s_11 = half(tmpvar_19);
  half3 tmpvar_20;
  tmpvar_20.xz = half2(float2(1.0, -1.0));
  tmpvar_20.y = -(s_11);
  half3 tmpvar_21;
  tmpvar_21.xz = half2(float2(1.0, -1.0));
  tmpvar_21.y = s_11;
  float3 tmpvar_22;
  tmpvar_22 = mix (((float3)tmpvar_20 * tmpvar_14.xzy), ((float3)tmpvar_21 * tmpvar_14.zxy), (float3)half3(zxlerp_13));
  detailCoords_10 = half3(tmpvar_22);
  half3 tmpvar_23;
  tmpvar_23.xy = half2(float2(1.0, 1.0));
  tmpvar_23.z = s_11;
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_23 * tmpvar_14.yxz), (float3)detailCoords_10, (float3)half3(nylerp_12));
  detailCoords_10 = half3(tmpvar_24);
  uv_9 = half2(((float2)((
    ((half)0.5 * detailCoords_10.yz)
   / 
    abs(detailCoords_10.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_25;
  uv_25 = float2(uv_9);
  float2 uvCont_26;
  float2 tmpvar_27;
  tmpvar_27 = abs((uv_25 - (0.5 * _mtl_u._DetailScale)));
  uvCont_26.x = max (tmpvar_27.x, tmpvar_27.y);
  uvCont_26.y = min (tmpvar_27.x, tmpvar_27.y);
  float4 tmpvar_28;
  tmpvar_28.xy = dfdx(uvCont_26);
  tmpvar_28.zw = dfdy(uvCont_26);
  half4 tmpvar_29;
  tmpvar_29 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_9), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  half4 tmpvar_30;
  tmpvar_30 = tmpvar_29;
  float3 tmpvar_31;
  tmpvar_31 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_32;
  float tmpvar_33;
  tmpvar_33 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_31, tmpvar_31)
  )), 0.0, 1.0);
  tmpvar_32 = half(tmpvar_33);
  half4 tmpvar_34;
  tmpvar_34 = ((_mtl_u._Color * tmpvar_8) * mix (tmpvar_30, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_32)));
  color_2 = tmpvar_34;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_35;
  tmpvar_35 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_36;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 62 math, 4 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_PlanetRadius]
Float 6 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
def c7, 5, 0.200000003, 0, 1
def c8, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_cube s0
dcl_2d s1
mov r0.xz, c8.xyyw
dp3 r0.w, v5, v5
rsq r0.w, r0.w
mul r1.xyz, r0.w, v5.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c7.z, c7.w
cmp r2.x, r2.x, -c7.z, -c7.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c8.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c8.z
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c8.z
mul_pp r0.xy, r0, c3.x
mov r0.z, c8.z
mad r0.zw, c3.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s1, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c7.z
dp2add_sat_pp r1.x, r1.x, c4.x, r1.z
lrp_pp r2, r1.x, c7.w, r0
nrm r0.xyz, v4
texld_pp r0, r0, s0
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c7.w
mul_pp r0, r0, c2
mad_pp r1.x, r0.w, -r2.w, c7.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c7.w
mul r1.w, r0.w, c6.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c8.wwwy
add r1.x, c7.x, v2.x
add r1.x, r1.x, -c5.x
mul_sat r1.x, r1.x, c7.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c7.z
mad_pp oC0, r1.x, r0, c7.w

"
}
SubProgram "d3d11 " {
// Stats: 62 math, 1 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:acacacaa
eefiecedefmceofeahlbpfpbcbbeeidelpmhcgjfabaaaaaaimakaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfeajaaaaeaaaaaaaffacaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafidaaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadicbabaaa
abaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacaeaaaaaadgaaaaaifcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaafaaaaaa
dcaaaaakicaabaaaabaaaaaackbabaaaafaaaaaadkaabaaaaaaaaaaabkaabaia
ebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaa
bkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaa
afaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaa
dkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaia
ebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaa
aaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaa
adaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
acaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaa
dcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
agabbaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaa
jgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaao
mcaabaaaaaaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaaaaaaaaadeaaaaajbcaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaddaaaaajecaabaaa
aaaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaalaaaaaf
bcaabaaaacaaaaaaakaabaaaabaaaaaaamaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaaaaaaaaaamaaaaafccaabaaa
abaaaaaackaabaaaaaaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaabaaaaaa
aaaaaaalpcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaacaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
apcaaaaibcaabaaaacaaaaaaagaabaaaacaaaaaafgifcaaaaaaaaaaabjaaaaaa
dcaaaaajpcaabaaaaaaaaaaaagaabaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
agaabaaaabaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaa
egaabaaaabaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaackaabaaa
abaaaaaackiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaadkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaa
dgaaaaaihcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
diaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaaaaaaaaabhaaaaaa
dcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaa
aaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaa
aaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaa
abaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaa
abeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaa
aaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaablaaaaaa
dicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaa
aaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 60 math, 2 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTex] CUBE 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_PlanetRadius]
Float 44 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> cube_MainTex [[texture(0)]], sampler _mtlsmp_cube_MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD4);
  half4 tmpvar_7;
  tmpvar_7 = cube_MainTex.sample(_mtlsmp_cube_MainTex, (float3)(tmpvar_6));
  half4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  half4 v_9;
  v_9 = (tmpvar_8 * _mtl_u.alphaMask1);
  half4 tmpvar_10;
  tmpvar_10.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_10.w = ((v_9.x + v_9.y) + (v_9.z + v_9.w));
  half2 uv_11;
  half3 detailCoords_12;
  half s_13;
  half nylerp_14;
  half zxlerp_15;
  float3 tmpvar_16;
  tmpvar_16 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_17;
  tmpvar_17 = abs(tmpvar_16);
  float tmpvar_18;
  tmpvar_18 = float((tmpvar_17.z >= tmpvar_17.x));
  zxlerp_15 = half(tmpvar_18);
  float tmpvar_19;
  tmpvar_19 = float((max (tmpvar_17.x, tmpvar_17.z) >= tmpvar_17.y));
  nylerp_14 = half(tmpvar_19);
  float tmpvar_20;
  tmpvar_20 = mix (tmpvar_16.x, tmpvar_16.z, (float)zxlerp_15);
  s_13 = half(tmpvar_20);
  float tmpvar_21;
  tmpvar_21 = sign(mix (tmpvar_16.y, (float)s_13, (float)nylerp_14));
  s_13 = half(tmpvar_21);
  half3 tmpvar_22;
  tmpvar_22.xz = half2(float2(1.0, -1.0));
  tmpvar_22.y = -(s_13);
  half3 tmpvar_23;
  tmpvar_23.xz = half2(float2(1.0, -1.0));
  tmpvar_23.y = s_13;
  float3 tmpvar_24;
  tmpvar_24 = mix (((float3)tmpvar_22 * tmpvar_16.xzy), ((float3)tmpvar_23 * tmpvar_16.zxy), (float3)half3(zxlerp_15));
  detailCoords_12 = half3(tmpvar_24);
  half3 tmpvar_25;
  tmpvar_25.xy = half2(float2(1.0, 1.0));
  tmpvar_25.z = s_13;
  float3 tmpvar_26;
  tmpvar_26 = mix (((float3)tmpvar_25 * tmpvar_16.yxz), (float3)detailCoords_12, (float3)half3(nylerp_14));
  detailCoords_12 = half3(tmpvar_26);
  uv_11 = half2(((float2)((
    ((half)0.5 * detailCoords_12.yz)
   / 
    abs(detailCoords_12.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_27;
  uv_27 = float2(uv_11);
  float2 uvCont_28;
  float2 tmpvar_29;
  tmpvar_29 = abs((uv_27 - (0.5 * _mtl_u._DetailScale)));
  uvCont_28.x = max (tmpvar_29.x, tmpvar_29.y);
  uvCont_28.y = min (tmpvar_29.x, tmpvar_29.y);
  float4 tmpvar_30;
  tmpvar_30.xy = dfdx(uvCont_28);
  tmpvar_30.zw = dfdy(uvCont_28);
  half4 tmpvar_31;
  tmpvar_31 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_11), gradient2d((float2)(tmpvar_30.xy), (float2)(tmpvar_30.zw)));
  half4 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  float3 tmpvar_33;
  tmpvar_33 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_34;
  float tmpvar_35;
  tmpvar_35 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_33, tmpvar_33)
  )), 0.0, 1.0);
  tmpvar_34 = half(tmpvar_35);
  half4 tmpvar_36;
  tmpvar_36 = ((_mtl_u._Color * tmpvar_10) * mix (tmpvar_32, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_34)));
  color_2 = tmpvar_36;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_37;
  tmpvar_37 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_38;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 87 math, 9 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
mov_pp r0.xz, c7.xyyw
dp3 r0.w, v5, v5
rsq r0.w, r0.w
mul r1.xyz, r0.w, v5.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad_pp r0.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0, c2.x
mov r0.z, c7.z
mad r0.zw, c2.x, -r0.z, r0.xyxy
add r1.x, -r0_abs.w, r0_abs.z
cmp r0.zw, r1.x, r0_abs, r0_abs.xywz
dsx r1.xy, r0.zwzw
dsy r0.zw, r0
texldd_pp r0, r0, s2, r1, r0.zwzw
add r1.xyz, -c0, v3
dp3 r1.x, r1, r1
rsq r1.x, r1.x
rcp r1.x, r1.x
mov r1.z, c6.z
dp2add_sat_pp r1.x, r1.x, c3.x, r1.z
lrp_pp r2, r1.x, c6.w, r0
mov_pp r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r3.x, r1.w, r1.z, r1.y
cmp r3.x, r0.w, r3.x, r1.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r0.y, -r3.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r3.xz, c7.xyyw
mul_pp r4.xyz, r1.zyxw, r3
mul_pp r1.xyz, r1, r3.xxyw
cmp_pp r0.xyz, r1.w, r4, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mad_pp r1.xy, r0.yzzw, r0.x, c7.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r3.xz, r0.xyyw
dsy r0.xy, r0
texldd_pp r4, r1, s0, r3.xzzw, r0
texldd_pp r5, r1, s1, r3.xzzw, r0
cmp_pp r3, r3.y, r4, r5
cmp_pp r0.x, r1.w, r3.z, r3.x
cmp_pp r0.w, r0.w, r0.x, r3.y
mov_pp r0.xyz, r3.w
mul_pp r0, r0, c1
mad_pp r1.x, r0.w, -r2.w, c6.w
mul_pp r0, r2, r0
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 92 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedhdmmpfakldmnjpkdaidejodhdeakjmnaabaaaaaaaeapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmmanaaaaeaaaaaaahdadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaaeaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaa
abeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaa
acaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaa
dgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaa
agajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaa
adaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaaj
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaia
ibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaa
adaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaa
aeaaaaaaegaobaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaa
ckaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaafhcaabaaaabaaaaaa
pgapbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
aaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaa
ckbabaaaafaaaaaadkaabaaaabaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaaj
bcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaa
dkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaa
dkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaa
abaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaa
abaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaa
kgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaia
ibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
acaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaa
agaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaa
abaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaablaaaaaadicaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 88 math, 3 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  float2 uv_22;
  uv_22 = float2(tmpvar_21);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_9), nylerp_8);
  half2 uv_32;
  half3 detailCoords_33;
  half s_34;
  half nylerp_35;
  half zxlerp_36;
  float3 tmpvar_37;
  tmpvar_37 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_37);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_36 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((max (tmpvar_38.x, tmpvar_38.z) >= tmpvar_38.y));
  nylerp_35 = half(tmpvar_40);
  float tmpvar_41;
  tmpvar_41 = mix (tmpvar_37.x, tmpvar_37.z, (float)zxlerp_36);
  s_34 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = sign(mix (tmpvar_37.y, (float)s_34, (float)nylerp_35));
  s_34 = half(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43.xz = half2(float2(1.0, -1.0));
  tmpvar_43.y = -(s_34);
  half3 tmpvar_44;
  tmpvar_44.xz = half2(float2(1.0, -1.0));
  tmpvar_44.y = s_34;
  float3 tmpvar_45;
  tmpvar_45 = mix (((float3)tmpvar_43 * tmpvar_37.xzy), ((float3)tmpvar_44 * tmpvar_37.zxy), (float3)half3(zxlerp_36));
  detailCoords_33 = half3(tmpvar_45);
  half3 tmpvar_46;
  tmpvar_46.xy = half2(float2(1.0, 1.0));
  tmpvar_46.z = s_34;
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_46 * tmpvar_37.yxz), (float3)detailCoords_33, (float3)half3(nylerp_35));
  detailCoords_33 = half3(tmpvar_47);
  uv_32 = half2(((float2)((
    ((half)0.5 * detailCoords_33.yz)
   / 
    abs(detailCoords_33.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_48;
  uv_48 = float2(uv_32);
  float2 uvCont_49;
  float2 tmpvar_50;
  tmpvar_50 = abs((uv_48 - (0.5 * _mtl_u._DetailScale)));
  uvCont_49.x = max (tmpvar_50.x, tmpvar_50.y);
  uvCont_49.y = min (tmpvar_50.x, tmpvar_50.y);
  float4 tmpvar_51;
  tmpvar_51.xy = dfdx(uvCont_49);
  tmpvar_51.zw = dfdy(uvCont_49);
  half4 tmpvar_52;
  tmpvar_52 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_32), gradient2d((float2)(tmpvar_51.xy), (float2)(tmpvar_51.zw)));
  half4 tmpvar_53;
  tmpvar_53 = tmpvar_52;
  float3 tmpvar_54;
  tmpvar_54 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_54, tmpvar_54)
  )), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half4 tmpvar_57;
  tmpvar_57 = ((_mtl_u._Color * tmpvar_31) * mix (tmpvar_53, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_55)));
  color_2 = tmpvar_57;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_59;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 92 math, 9 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_PlanetRadius]
Float 6 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
"ps_3_0
def c7, 5, 0.200000003, 0, 1
def c8, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
mov_pp r0.xz, c8.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c7.z, c7.w
cmp r2.x, r2.x, -c7.z, -c7.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r2.xz, c8.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c8.z
rcp r0.x, r0_abs.x
mad_pp r1.xy, r0.yzzw, r0.x, c8.z
mul_pp r0.xy, r0.x, r0.yzzw
add r0.z, -r0_abs.y, r0_abs.x
cmp r0.xy, r0.z, r0_abs, r0_abs.yxzw
dsx r2.xz, r0.xyyw
dsy r0.xy, r0
texldd_pp r3, r1, s0, r2.xzzw, r0
texldd_pp r4, r1, s1, r2.xzzw, r0
cmp_pp r2, r2.y, r3, r4
cmp_pp r0.x, r1.w, r2.z, r2.x
cmp_pp r0.x, r0.w, r0.x, r2.y
mov_pp r0.yzw, r2.w
mul_pp r0.yz, r0, c1.xxyw
add_pp r0.y, r0.z, r0.y
mad_pp r0.y, r0.w, c1.z, r0.y
mad_pp r0.w, r0.x, c1.w, r0.y
mov_pp r0.xyz, c7.w
mul_pp r0, r0, c2
mov_pp r1.xz, c8.xyyw
dp3 r1.w, v5, v5
rsq r1.w, r1.w
mul r2.xyz, r1.w, v5.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c7.z, c7.w
cmp r3.x, r3.x, -c7.z, -c7.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov_pp r3.xz, c8.xyyw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c8.z
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c8.z
mul_pp r1.xy, r1, c3.x
mov r1.z, c8.z
mad r1.zw, c3.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s2, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c7.z
dp2add_sat_pp r2.x, r2.x, c4.x, r2.z
lrp_pp r3, r2.x, c7.w, r1
mad_pp r1.x, r0.w, -r3.w, c7.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c7.w
mul r1.w, r0.w, c6.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c8.wwwy
add r1.x, c7.x, v2.x
add r1.x, r1.x, -c5.x
mul_sat r1.x, r1.x, c7.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c7.z
mad_pp oC0, r1.x, r0, c7.w

"
}
SubProgram "d3d11 " {
// Stats: 96 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:adacadaa
eefiecedpaeeakjcnbhodfgmhnkbopeafmgmpocnabaaaaaalaapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchiaoaaaaeaaaaaaajoadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadbcbabaaaacaaaaaagcbaaaadccbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadgaaaaaifcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaabgbgbaaaaeaaaaaadcaaaaak
icaabaaaabaaaaaackbabaaaaeaaaaaadkaabaaaaaaaaaaabkaabaiaebaaaaaa
abaaaaaabnaaaaajbcaabaaaacaaaaaackaabaiaibaaaaaaabaaaaaabkaabaia
ibaaaaaaabaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaiadpdcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaakicaabaaaaaaaaaaabkbabaiaebaaaaaaaeaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadeaaaaajicaabaaaabaaaaaackaabaia
ibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaiaibaaaaaaabaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaa
abeaaaaaaaaaaaaadkaabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaaaaaaaaabkaabaiaebaaaaaa
acaaaaaadkaabaaaaaaaaaaaclaaaaafccaabaaaadaaaaaadkaabaaaaaaaaaaa
dgaaaaagccaabaaaaaaaaaaabkaabaiaebaaaaaaadaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgaebaaaabaaaaaadgaaaaaifcaabaaaadaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaacaaaaaa
agajbaaaadaaaaaakgabbaaaabaaaaaaagajbaiaebaaaaaaaaaaaaaadcaaaaaj
hcaabaaaaaaaaaaaagaabaaaacaaaaaajgahbaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagabbaiaebaaaaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaaagabbaaa
adaaaaaabnaaaaahicaabaaaaaaaaaaabkaabaaaadaaaaaaabeaaaaaaaaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaaj
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaia
ibaaaaaaaaaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadeaaaaajecaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaddaaaaajbcaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaalaaaaafdcaabaaa
adaaaaaacgakbaaaaaaaaaaaamaaaaafdcaabaaaaeaaaaaacgakbaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaadaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaaaaaaaaegaobaaa
aeaaaaaaegaobaaaadaaaaaaaaaaaaaiecaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaacaaaaaa
ckaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaadkaabaaa
abaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaafocaabaaaaaaaaaaa
pgapbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaafgagbaaaaaaaaaaaagibcaaa
aaaaaaaabgaaaaaaaaaaaaahccaabaaaaaaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakccaabaaaaaaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaa
bgaaaaaabkaabaaaaaaaaaaadcaaaaakicaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkiacaaaaaaaaaaabgaaaaaabkaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaa
dcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaaabaaaaaabkaabaia
ebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaa
acaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaa
afaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
dkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaa
adaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaia
ebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaa
abaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaa
aeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaa
adaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaa
dcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
agabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaai
dcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaao
mcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaa
dkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaa
abaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaaf
bcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
apcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaa
dcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaa
aaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaa
ckiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaa
abaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaa
acaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaea
aaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
blaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdo
diaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaam
pccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 93 math, 3 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexPOS] 2D 0
SetTexture 1 [cube_MainTexNEG] 2D 1
SetTexture 2 [_DetailTex] 2D 2
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_PlanetRadius]
Float 44 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexPOS [[texture(0)]], sampler _mtlsmp_cube_MainTexPOS [[sampler(0)]]
  ,   texture2d<half> cube_MainTexNEG [[texture(1)]], sampler _mtlsmp_cube_MainTexNEG [[sampler(1)]]
  ,   texture2d<half> _DetailTex [[texture(2)]], sampler _mtlsmp__DetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  float2 uv_22;
  uv_22 = float2(tmpvar_21);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexPOS.sample(_mtlsmp_cube_MainTexPOS, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexNEG.sample(_mtlsmp_cube_MainTexNEG, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, tmpvar_27, half4(half((s_7 >= (half)0.0))));
  half4 tmpvar_31;
  tmpvar_31.x = tmpvar_30.w;
  tmpvar_31.y = tmpvar_30.w;
  tmpvar_31.z = tmpvar_30.w;
  tmpvar_31.w = mix (tmpvar_30.y, mix (tmpvar_30.x, tmpvar_30.z, zxlerp_9), nylerp_8);
  half4 v_32;
  v_32 = (tmpvar_31 * _mtl_u.alphaMask1);
  half4 tmpvar_33;
  tmpvar_33.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_33.w = ((v_32.x + v_32.y) + (v_32.z + v_32.w));
  half2 uv_34;
  half3 detailCoords_35;
  half s_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_39);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  zxlerp_38 = half(tmpvar_41);
  float tmpvar_42;
  tmpvar_42 = float((max (tmpvar_40.x, tmpvar_40.z) >= tmpvar_40.y));
  nylerp_37 = half(tmpvar_42);
  float tmpvar_43;
  tmpvar_43 = mix (tmpvar_39.x, tmpvar_39.z, (float)zxlerp_38);
  s_36 = half(tmpvar_43);
  float tmpvar_44;
  tmpvar_44 = sign(mix (tmpvar_39.y, (float)s_36, (float)nylerp_37));
  s_36 = half(tmpvar_44);
  half3 tmpvar_45;
  tmpvar_45.xz = half2(float2(1.0, -1.0));
  tmpvar_45.y = -(s_36);
  half3 tmpvar_46;
  tmpvar_46.xz = half2(float2(1.0, -1.0));
  tmpvar_46.y = s_36;
  float3 tmpvar_47;
  tmpvar_47 = mix (((float3)tmpvar_45 * tmpvar_39.xzy), ((float3)tmpvar_46 * tmpvar_39.zxy), (float3)half3(zxlerp_38));
  detailCoords_35 = half3(tmpvar_47);
  half3 tmpvar_48;
  tmpvar_48.xy = half2(float2(1.0, 1.0));
  tmpvar_48.z = s_36;
  float3 tmpvar_49;
  tmpvar_49 = mix (((float3)tmpvar_48 * tmpvar_39.yxz), (float3)detailCoords_35, (float3)half3(nylerp_37));
  detailCoords_35 = half3(tmpvar_49);
  uv_34 = half2(((float2)((
    ((half)0.5 * detailCoords_35.yz)
   / 
    abs(detailCoords_35.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_50;
  uv_50 = float2(uv_34);
  float2 uvCont_51;
  float2 tmpvar_52;
  tmpvar_52 = abs((uv_50 - (0.5 * _mtl_u._DetailScale)));
  uvCont_51.x = max (tmpvar_52.x, tmpvar_52.y);
  uvCont_51.y = min (tmpvar_52.x, tmpvar_52.y);
  float4 tmpvar_53;
  tmpvar_53.xy = dfdx(uvCont_51);
  tmpvar_53.zw = dfdy(uvCont_51);
  half4 tmpvar_54;
  tmpvar_54 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_34), gradient2d((float2)(tmpvar_53.xy), (float2)(tmpvar_53.zw)));
  half4 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  float3 tmpvar_56;
  tmpvar_56 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_57;
  float tmpvar_58;
  tmpvar_58 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_56, tmpvar_56)
  )), 0.0, 1.0);
  tmpvar_57 = half(tmpvar_58);
  half4 tmpvar_59;
  tmpvar_59 = ((_mtl_u._Color * tmpvar_33) * mix (tmpvar_55, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_57)));
  color_2 = tmpvar_59;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_60;
  tmpvar_60 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_60);
  half4 tmpvar_61;
  tmpvar_61 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_61;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE2_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 88 math, 21 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 1 [_Color]
Float 3 [_DetailDist]
Float 2 [_DetailScale]
Float 4 [_PlanetRadius]
Float 5 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c6, 5, 0.200000003, 0, 1
def c7, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov_pp r0.xz, c7.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c6.z, c6.w
cmp r2.x, r2.x, -c6.z, -c6.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov_pp r2.xz, c7.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c7.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad_pp r0.xy, r0.yzzw, r0.x, c7.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0, r0, c1
mov_pp r1.xz, c7.xyyw
dp3 r1.w, v5, v5
rsq r1.w, r1.w
mul r2.xyz, r1.w, v5.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c6.z, c6.w
cmp r3.x, r3.x, -c6.z, -c6.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov_pp r3.xz, c7.xyyw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c7.z
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c7.z
mul_pp r1.xy, r1, c2.x
mov r1.z, c7.z
mad r1.zw, c2.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c6.z
dp2add_sat_pp r2.x, r2.x, c3.x, r2.z
lrp_pp r3, r2.x, c6.w, r1
mad_pp r1.x, r0.w, -r3.w, c6.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c6.w
mul r1.w, r0.w, c5.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c7.wwwy
add r1.x, c6.x, v2.x
add r1.x, r1.x, -c4.x
mul_sat r1.x, r1.x, c6.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c6.z
mad_pp oC0, r1.x, r0, c6.w

"
}
SubProgram "d3d11 " {
// Stats: 96 math
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 528
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecednbpfabbcldnkmpdogbljibbaijckilboabaaaaaalibaaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciaapaaaaeaaaaaaaoaadaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaa
afaaaaaapgapbaaaaaaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaan
pcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaipcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaa
ahaaaaaadcaaaaajpcaabaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaa
egaobaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaia
ebaaaaaaagaaaaaadcaaaaajpcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaa
aaaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabhaaaaaadgaaaaai
fcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaackbabaaaafaaaaaadkaabaaa
abaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaajbcaabaaaadaaaaaackaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaacaaaaaaakaabaaa
adaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
bkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadeaaaaaj
icaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
dbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaadkaabaaaabaaaaaadbaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaa
abaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaaabaaaaaaclaaaaafccaabaaa
aeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaaabaaaaaabkaabaiaebaaaaaa
aeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaajgaebaaaacaaaaaa
dgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
dcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaakgabbaaaacaaaaaaagajbaia
ebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaaagaabaaaadaaaaaajgahbaaa
adaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaagabbaiaebaaaaaa
aeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
acaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaadiaaaaakgcaabaaaabaaaaaa
fgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaai
dcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaiaibaaaaaaabaaaaaaaaaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaaagiacaaaaaaaaaaa
bjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaiaebaaaaaaaaaaaaaabjaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpagaebaaaabaaaaaadeaaaaaj
bcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaaabaaaaaa
ddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaaabaaaaaackaabaiaibaaaaaa
abaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaaacaaaaaaamaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaaagaaaaaaegaabaaaadaaaaaa
egaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaaagaabaaaadaaaaaafgifcaaa
aaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaaagaabaaaadaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaaacaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaahhcaabaaaabaaaaaaagaabaaa
acaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaialpbnaaaaahbcaabaaa
abaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaaabaaaaaabkbabaaaacaaaaaa
abeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaia
ebaaaaaaaaaaaaaablaaaaaadicaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 94 math, 7 textures
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 40
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_Color] 4
Float 24 [_DetailScale]
Float 28 [_DetailDist]
Float 32 [_PlanetRadius]
Float 36 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  float2 uv_22;
  uv_22 = float2(tmpvar_21);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half2 uv_38;
  half3 detailCoords_39;
  half s_40;
  half nylerp_41;
  half zxlerp_42;
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  float tmpvar_45;
  tmpvar_45 = float((tmpvar_44.z >= tmpvar_44.x));
  zxlerp_42 = half(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = float((max (tmpvar_44.x, tmpvar_44.z) >= tmpvar_44.y));
  nylerp_41 = half(tmpvar_46);
  float tmpvar_47;
  tmpvar_47 = mix (tmpvar_43.x, tmpvar_43.z, (float)zxlerp_42);
  s_40 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = sign(mix (tmpvar_43.y, (float)s_40, (float)nylerp_41));
  s_40 = half(tmpvar_48);
  half3 tmpvar_49;
  tmpvar_49.xz = half2(float2(1.0, -1.0));
  tmpvar_49.y = -(s_40);
  half3 tmpvar_50;
  tmpvar_50.xz = half2(float2(1.0, -1.0));
  tmpvar_50.y = s_40;
  float3 tmpvar_51;
  tmpvar_51 = mix (((float3)tmpvar_49 * tmpvar_43.xzy), ((float3)tmpvar_50 * tmpvar_43.zxy), (float3)half3(zxlerp_42));
  detailCoords_39 = half3(tmpvar_51);
  half3 tmpvar_52;
  tmpvar_52.xy = half2(float2(1.0, 1.0));
  tmpvar_52.z = s_40;
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_52 * tmpvar_43.yxz), (float3)detailCoords_39, (float3)half3(nylerp_41));
  detailCoords_39 = half3(tmpvar_53);
  uv_38 = half2(((float2)((
    ((half)0.5 * detailCoords_39.yz)
   / 
    abs(detailCoords_39.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_54;
  uv_54 = float2(uv_38);
  float2 uvCont_55;
  float2 tmpvar_56;
  tmpvar_56 = abs((uv_54 - (0.5 * _mtl_u._DetailScale)));
  uvCont_55.x = max (tmpvar_56.x, tmpvar_56.y);
  uvCont_55.y = min (tmpvar_56.x, tmpvar_56.y);
  float4 tmpvar_57;
  tmpvar_57.xy = dfdx(uvCont_55);
  tmpvar_57.zw = dfdy(uvCont_55);
  half4 tmpvar_58;
  tmpvar_58 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_38), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  half4 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float3 tmpvar_60;
  tmpvar_60 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_60, tmpvar_60)
  )), 0.0, 1.0);
  tmpvar_61 = half(tmpvar_62);
  half4 tmpvar_63;
  tmpvar_63 = ((_mtl_u._Color * mix (
    mix (tmpvar_31, tmpvar_33, half4(half((s_7 >= (half)0.0))))
  , 
    mix (mix (tmpvar_27, tmpvar_29, half4(half((s_7 >= (half)0.0)))), mix (tmpvar_35, tmpvar_37, half4(half((s_7 >= (half)0.0)))), half4(zxlerp_9))
  , half4(nylerp_8))) * mix (tmpvar_59, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_61)));
  color_2 = tmpvar_63;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_64;
  tmpvar_64 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_65;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_N_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
SubProgram "opengl " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 93 math, 21 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
Vector 2 [_Color]
Float 4 [_DetailDist]
Float 3 [_DetailScale]
Float 5 [_PlanetRadius]
Float 6 [_ShadowFactor]
Vector 0 [_WorldSpaceCameraPos]
Vector 1 [alphaMask1]
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
"ps_3_0
def c7, 5, 0.200000003, 0, 1
def c8, 1, -1, 0.5, 0
dcl_texcoord v0.w
dcl_texcoord1 v1.x
dcl_texcoord2 v2.x
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
mov r0.xz, c8.xyyw
dp3 r0.w, v4, v4
rsq r0.w, r0.w
mul r1.xyz, r0.w, v4.yxzw
max r0.w, r1_abs.y, r1_abs.z
add r0.w, -r1_abs.x, r0.w
add r1.w, -r1_abs.y, r1_abs.z
cmp_pp r2.x, r1.w, r1.z, r1.y
cmp r2.x, r0.w, r2.x, r1.x
cmp r2.y, -r2.x, c7.z, c7.w
cmp r2.x, r2.x, -c7.z, -c7.w
add_pp r2.y, r2.x, r2.y
mov_pp r0.y, -r2.y
mul_pp r0.xyz, r0, r1.yzxw
mov r2.xz, c8.xyyw
mul_pp r3.xyz, r1.zyxw, r2
mul_pp r1.xyz, r1, r2.xxyw
cmp_pp r0.xyz, r1.w, r3, r0
cmp_pp r0.xyz, r0.w, r0, r1
mul_pp r0.yz, r0, c8.z
rcp r0.x, r0_abs.x
mul_pp r1.xy, r0.x, r0.yzzw
mad_pp r0.xy, r0.yzzw, r0.x, c8.z
add r0.z, -r1_abs.y, r1_abs.x
cmp r1.xy, r0.z, r1_abs, r1_abs.yxzw
dsx r2.xz, r1.xyyw
dsy r1.xy, r1
texldd_pp r3, r0, s0, r2.xzzw, r1
texldd_pp r4, r0, s1, r2.xzzw, r1
cmp_pp r3, r2.y, r4, r3
texldd_pp r4, r0, s4, r2.xzzw, r1
texldd_pp r5, r0, s5, r2.xzzw, r1
cmp_pp r4, r2.y, r5, r4
cmp_pp r3, r1.w, r4, r3
texldd_pp r4, r0, s2, r2.xzzw, r1
texldd_pp r1, r0, s3, r2.xzzw, r1
cmp_pp r1, r2.y, r1, r4
cmp_pp r0, r0.w, r3, r1
mul_pp r0.xy, r0, c1
add_pp r0.x, r0.y, r0.x
mad_pp r0.x, r0.z, c1.z, r0.x
mad_pp r0.w, r0.w, c1.w, r0.x
mov r0.xyz, c7.w
mul_pp r0, r0, c2
mov r1.xz, c8.xyyw
dp3 r1.w, v5, v5
rsq r1.w, r1.w
mul r2.xyz, r1.w, v5.yxzw
max r1.w, r2_abs.y, r2_abs.z
add r1.w, -r2_abs.x, r1.w
add r2.w, -r2_abs.y, r2_abs.z
cmp_pp r3.x, r2.w, r2.z, r2.y
cmp r3.x, r1.w, r3.x, r2.x
cmp r3.y, -r3.x, c7.z, c7.w
cmp r3.x, r3.x, -c7.z, -c7.w
add_pp r3.y, r3.x, r3.y
mov_pp r1.y, -r3.y
mul_pp r1.xyz, r1, r2.yzxw
mov r3.xz, c8.xyyw
mul_pp r4.xyz, r2.zyxw, r3
mul_pp r2.xyz, r2, r3.xxyw
cmp_pp r1.xyz, r2.w, r4, r1
cmp_pp r1.xyz, r1.w, r1, r2
mul_pp r1.yz, r1, c8.z
rcp r1.x, r1_abs.x
mad_pp r1.xy, r1.yzzw, r1.x, c8.z
mul_pp r1.xy, r1, c3.x
mov r1.z, c8.z
mad r1.zw, c3.x, -r1.z, r1.xyxy
add r2.x, -r1_abs.w, r1_abs.z
cmp r1.zw, r2.x, r1_abs, r1_abs.xywz
dsx r2.xy, r1.zwzw
dsy r1.zw, r1
texldd_pp r1, r1, s6, r2, r1.zwzw
add r2.xyz, -c0, v3
dp3 r2.x, r2, r2
rsq r2.x, r2.x
rcp r2.x, r2.x
mov r2.z, c7.z
dp2add_sat_pp r2.x, r2.x, c4.x, r2.z
lrp_pp r3, r2.x, c7.w, r1
mad_pp r1.x, r0.w, -r3.w, c7.w
mul_pp r0, r0, r3
mul_sat_pp r1.xyz, r1.x, r0
add r1.xyz, r1, -c7.w
mul r1.w, r0.w, c6.x
mul r0.xyz, r1, r1.w
add_pp r0, r0, c8.wwwy
add r1.x, c7.x, v2.x
add r1.x, r1.x, -c5.x
mul_sat r1.x, r1.x, c7.y
mul_pp r1.x, r1.x, v1.x
cmp_pp r1.x, v0.w, r1.x, c7.z
mad_pp oC0, r1.x, r0, c7.w

"
}
SubProgram "d3d11 " {
// Stats: 100 math
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 528
Vector 352 [alphaMask1]
Vector 368 [_Color]
Float 400 [_DetailScale]
Float 404 [_DetailDist]
Float 436 [_PlanetRadius]
Float 440 [_ShadowFactor]
ConstBuffer "UnityPerCamera" 144
Vector 64 [_WorldSpaceCameraPos] 3
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
"ps_4_0
root12:ahacahaa
eefiecedhbdaibonffdlmdaabfajmiglmlhclaacabaaaaaagebbaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaacacaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccmbaaaaaeaaaaaaaalaeaaaa
fjaaaaaeegiocaaaaaaaaaaabmaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadbcbabaaaacaaaaaagcbaaaad
ccbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacaiaaaaaa
dgaaaaaifcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialpaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaabgbgbaaaaeaaaaaadcaaaaakicaabaaaabaaaaaackbabaaaaeaaaaaa
dkaabaaaaaaaaaaabkaabaiaebaaaaaaabaaaaaabnaaaaajbcaabaaaacaaaaaa
ckaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaaabaaaaaaabaaaaahbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaa
akaabaaaacaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaakicaabaaa
aaaaaaaabkbabaiaebaaaaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
deaaaaajicaabaaaabaaaaaackaabaiaibaaaaaaabaaaaaabkaabaiaibaaaaaa
abaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaiaibaaaaaa
abaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaaaaaaaaa
dbaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaaaboaaaaai
icaabaaaaaaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaaaaaaaaaaclaaaaaf
ccaabaaaadaaaaaadkaabaaaaaaaaaaadgaaaaagccaabaaaaaaaaaaabkaabaia
ebaaaaaaadaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgaebaaa
abaaaaaadgaaaaaifcaabaaaadaaaaaaaceaaaaaaaaaiadpaaaaaaaaaaaaialp
aaaaaaaadcaaaaakocaabaaaacaaaaaaagajbaaaadaaaaaakgabbaaaabaaaaaa
agajbaiaebaaaaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaagaabaaaacaaaaaa
jgahbaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagabbaia
ebaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadiaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaaagabbaaaadaaaaaabnaaaaahicaabaaaaaaaaaaa
bkaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaaaaaaaaapgapbaaaabaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaaidcaabaaa
aaaaaaaajgafbaaaaaaaaaaaagaabaiaibaaaaaaaaaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
deaaaaajecaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaddaaaaajbcaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaalaaaaafdcaabaaaadaaaaaacgakbaaaaaaaaaaaamaaaaaf
dcaabaaaaeaaaaaacgakbaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaejaaaaanpcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaaaafaaaaaaegaobaiaebaaaaaaagaaaaaadcaaaaajpcaabaaa
afaaaaaapgapbaaaaaaaaaaaegaobaaaafaaaaaaegaobaaaagaaaaaaejaaaaan
pcaabaaaagaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaahaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaaipcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaiaebaaaaaa
ahaaaaaadcaaaaajpcaabaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaagaaaaaa
egaobaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaia
ebaaaaaaagaaaaaadcaaaaajpcaabaaaacaaaaaaagaabaaaacaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
acaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaa
aaaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaaegaobaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaegiacaaaaaaaaaaabgaaaaaaaaaaaaah
bcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackaabaaaaaaaaaaackiacaaaaaaaaaaabgaaaaaaakaabaaaaaaaaaaa
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaabgaaaaaa
akaabaaaaaaaaaaadgaaaaaihcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabhaaaaaadgaaaaaifcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaaaaa
aaaaialpaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaabgbgbaaaafaaaaaadcaaaaakicaabaaaacaaaaaa
ckbabaaaafaaaaaadkaabaaaabaaaaaabkaabaiaebaaaaaaacaaaaaabnaaaaaj
bcaabaaaadaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdcaaaaaj
icaabaaaacaaaaaaakaabaaaadaaaaaadkaabaaaacaaaaaabkaabaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaabkbabaiaebaaaaaaafaaaaaadkaabaaaabaaaaaa
dkaabaaaacaaaaaadeaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaajicaabaaaabaaaaaadkaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadbaaaaahccaabaaaadaaaaaaabeaaaaaaaaaaaaa
dkaabaaaabaaaaaadbaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaboaaaaaiicaabaaaabaaaaaabkaabaiaebaaaaaaadaaaaaadkaabaaa
abaaaaaaclaaaaafccaabaaaaeaaaaaadkaabaaaabaaaaaadgaaaaagccaabaaa
abaaaaaabkaabaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaajgaebaaaacaaaaaadgaaaaaifcaabaaaaeaaaaaaaceaaaaaaaaaiadp
aaaaaaaaaaaaialpaaaaaaaadcaaaaakocaabaaaadaaaaaaagajbaaaaeaaaaaa
kgabbaaaacaaaaaaagajbaiaebaaaaaaabaaaaaadcaaaaajhcaabaaaabaaaaaa
agaabaaaadaaaaaajgahbaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaagabbaiaebaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaaagabbaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaafgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaaidcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaia
ibaaaaaaabaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaaegaabaaa
abaaaaaaagiacaaaaaaaaaaabjaaaaaadcaaaaaomcaabaaaabaaaaaaagiacaia
ebaaaaaaaaaaaaaabjaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
agaebaaaabaaaaaadeaaaaajbcaabaaaacaaaaaadkaabaiaibaaaaaaabaaaaaa
ckaabaiaibaaaaaaabaaaaaaddaaaaajecaabaaaabaaaaaadkaabaiaibaaaaaa
abaaaaaackaabaiaibaaaaaaabaaaaaaalaaaaafbcaabaaaadaaaaaaakaabaaa
acaaaaaaamaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaaalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaacaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaagaaaaaaaagabaaa
agaaaaaaegaabaaaadaaaaaaegaabaaaacaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaadaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaibcaabaaaadaaaaaa
agaabaaaadaaaaaafgifcaaaaaaaaaaabjaaaaaadcaaaaajpcaabaaaabaaaaaa
agaabaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadcaaaaakbcaabaaa
acaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadicaaaah
hcaabaaaabaaaaaaagaabaaaacaaaaaaegacbaaaaaaaaaaaaaaaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaa
diaaaaaiicaabaaaabaaaaaadkaabaaaaaaaaaaackiacaaaaaaaaaaablaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaabaaaaaapgapbaaaabaaaaaaaaaaaaak
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaialpbnaaaaahbcaabaaaabaaaaaadkbabaaaabaaaaaaabeaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaakbabaaaacaaaaaaaaaaaaahccaabaaa
abaaaaaabkbabaaaacaaaaaaabeaaaaaaaaakaeaaaaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaablaaaaaadicaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaamnmmemdodiaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaampccabaaaaaaaaaaaagaabaaa
abaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
doaaaaab"
}
SubProgram "gles " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 99 math, 7 textures
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
SetTexture 0 [cube_MainTexxn] 2D 0
SetTexture 1 [cube_MainTexxp] 2D 1
SetTexture 2 [cube_MainTexyn] 2D 2
SetTexture 3 [cube_MainTexyp] 2D 3
SetTexture 4 [cube_MainTexzn] 2D 4
SetTexture 5 [cube_MainTexzp] 2D 5
SetTexture 6 [_DetailTex] 2D 6
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [alphaMask1] 4
VectorHalf 24 [_Color] 4
Float 32 [_DetailScale]
Float 36 [_DetailDist]
Float 40 [_PlanetRadius]
Float 44 [_ShadowFactor]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float xlv_TEXCOORD1;
  float xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 alphaMask1;
  half4 _Color;
  float _DetailScale;
  float _DetailDist;
  float _PlanetRadius;
  float _ShadowFactor;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> cube_MainTexxn [[texture(0)]], sampler _mtlsmp_cube_MainTexxn [[sampler(0)]]
  ,   texture2d<half> cube_MainTexxp [[texture(1)]], sampler _mtlsmp_cube_MainTexxp [[sampler(1)]]
  ,   texture2d<half> cube_MainTexyn [[texture(2)]], sampler _mtlsmp_cube_MainTexyn [[sampler(2)]]
  ,   texture2d<half> cube_MainTexyp [[texture(3)]], sampler _mtlsmp_cube_MainTexyp [[sampler(3)]]
  ,   texture2d<half> cube_MainTexzn [[texture(4)]], sampler _mtlsmp_cube_MainTexzn [[sampler(4)]]
  ,   texture2d<half> cube_MainTexzp [[texture(5)]], sampler _mtlsmp_cube_MainTexzp [[sampler(5)]]
  ,   texture2d<half> _DetailTex [[texture(6)]], sampler _mtlsmp__DetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 color_2;
  half shadowCheck_3;
  float tmpvar_4;
  tmpvar_4 = (float((_mtl_i.xlv_TEXCOORD0.w >= 0.0)) * _mtl_i.xlv_TEXCOORD1);
  shadowCheck_3 = half(tmpvar_4);
  float tmpvar_5;
  tmpvar_5 = clamp ((0.2 * (
    (_mtl_i.xlv_TEXCOORD2 + 5.0)
   - _mtl_u._PlanetRadius)), 0.0, 1.0);
  shadowCheck_3 = ((half)((float)shadowCheck_3 * tmpvar_5));
  half3 detailCoords_6;
  half s_7;
  half nylerp_8;
  half zxlerp_9;
  float3 tmpvar_10;
  tmpvar_10 = normalize(_mtl_i.xlv_TEXCOORD4);
  float3 tmpvar_11;
  tmpvar_11 = abs(tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = float((tmpvar_11.z >= tmpvar_11.x));
  zxlerp_9 = half(tmpvar_12);
  float tmpvar_13;
  tmpvar_13 = float((max (tmpvar_11.x, tmpvar_11.z) >= tmpvar_11.y));
  nylerp_8 = half(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = mix (tmpvar_10.x, tmpvar_10.z, (float)zxlerp_9);
  s_7 = half(tmpvar_14);
  float tmpvar_15;
  tmpvar_15 = sign(mix (tmpvar_10.y, (float)s_7, (float)nylerp_8));
  s_7 = half(tmpvar_15);
  half3 tmpvar_16;
  tmpvar_16.xz = half2(float2(1.0, -1.0));
  tmpvar_16.y = -(s_7);
  half3 tmpvar_17;
  tmpvar_17.xz = half2(float2(1.0, -1.0));
  tmpvar_17.y = s_7;
  float3 tmpvar_18;
  tmpvar_18 = mix (((float3)tmpvar_16 * tmpvar_10.xzy), ((float3)tmpvar_17 * tmpvar_10.zxy), (float3)half3(zxlerp_9));
  detailCoords_6 = half3(tmpvar_18);
  half3 tmpvar_19;
  tmpvar_19.xy = half2(float2(1.0, 1.0));
  tmpvar_19.z = s_7;
  float3 tmpvar_20;
  tmpvar_20 = mix (((float3)tmpvar_19 * tmpvar_10.yxz), (float3)detailCoords_6, (float3)half3(nylerp_8));
  detailCoords_6 = half3(tmpvar_20);
  half2 tmpvar_21;
  tmpvar_21 = ((((half)0.5 * detailCoords_6.yz) / abs(detailCoords_6.x)) + (half)0.5);
  float2 uv_22;
  uv_22 = float2(tmpvar_21);
  float2 uvCont_23;
  float2 tmpvar_24;
  tmpvar_24 = abs((uv_22 - 0.5));
  uvCont_23.x = max (tmpvar_24.x, tmpvar_24.y);
  uvCont_23.y = min (tmpvar_24.x, tmpvar_24.y);
  float4 tmpvar_25;
  tmpvar_25.xy = dfdx(uvCont_23);
  tmpvar_25.zw = dfdy(uvCont_23);
  half4 tmpvar_26;
  tmpvar_26 = cube_MainTexxn.sample(_mtlsmp_cube_MainTexxn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  half4 tmpvar_28;
  tmpvar_28 = cube_MainTexxp.sample(_mtlsmp_cube_MainTexxp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_29;
  tmpvar_29 = tmpvar_28;
  half4 tmpvar_30;
  tmpvar_30 = cube_MainTexyn.sample(_mtlsmp_cube_MainTexyn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  half4 tmpvar_32;
  tmpvar_32 = cube_MainTexyp.sample(_mtlsmp_cube_MainTexyp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_33;
  tmpvar_33 = tmpvar_32;
  half4 tmpvar_34;
  tmpvar_34 = cube_MainTexzn.sample(_mtlsmp_cube_MainTexzn, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  half4 tmpvar_36;
  tmpvar_36 = cube_MainTexzp.sample(_mtlsmp_cube_MainTexzp, (float2)(tmpvar_21), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  half4 tmpvar_37;
  tmpvar_37 = tmpvar_36;
  half4 v_38;
  v_38 = (mix (mix (tmpvar_31, tmpvar_33, half4(
    half((s_7 >= (half)0.0))
  )), mix (
    mix (tmpvar_27, tmpvar_29, half4(half((s_7 >= (half)0.0))))
  , 
    mix (tmpvar_35, tmpvar_37, half4(half((s_7 >= (half)0.0))))
  , half4(zxlerp_9)), half4(nylerp_8)) * _mtl_u.alphaMask1);
  half4 tmpvar_39;
  tmpvar_39.xyz = half3(float3(1.0, 1.0, 1.0));
  tmpvar_39.w = ((v_38.x + v_38.y) + (v_38.z + v_38.w));
  half2 uv_40;
  half3 detailCoords_41;
  half s_42;
  half nylerp_43;
  half zxlerp_44;
  float3 tmpvar_45;
  tmpvar_45 = normalize(_mtl_i.xlv_TEXCOORD5);
  float3 tmpvar_46;
  tmpvar_46 = abs(tmpvar_45);
  float tmpvar_47;
  tmpvar_47 = float((tmpvar_46.z >= tmpvar_46.x));
  zxlerp_44 = half(tmpvar_47);
  float tmpvar_48;
  tmpvar_48 = float((max (tmpvar_46.x, tmpvar_46.z) >= tmpvar_46.y));
  nylerp_43 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = mix (tmpvar_45.x, tmpvar_45.z, (float)zxlerp_44);
  s_42 = half(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = sign(mix (tmpvar_45.y, (float)s_42, (float)nylerp_43));
  s_42 = half(tmpvar_50);
  half3 tmpvar_51;
  tmpvar_51.xz = half2(float2(1.0, -1.0));
  tmpvar_51.y = -(s_42);
  half3 tmpvar_52;
  tmpvar_52.xz = half2(float2(1.0, -1.0));
  tmpvar_52.y = s_42;
  float3 tmpvar_53;
  tmpvar_53 = mix (((float3)tmpvar_51 * tmpvar_45.xzy), ((float3)tmpvar_52 * tmpvar_45.zxy), (float3)half3(zxlerp_44));
  detailCoords_41 = half3(tmpvar_53);
  half3 tmpvar_54;
  tmpvar_54.xy = half2(float2(1.0, 1.0));
  tmpvar_54.z = s_42;
  float3 tmpvar_55;
  tmpvar_55 = mix (((float3)tmpvar_54 * tmpvar_45.yxz), (float3)detailCoords_41, (float3)half3(nylerp_43));
  detailCoords_41 = half3(tmpvar_55);
  uv_40 = half2(((float2)((
    ((half)0.5 * detailCoords_41.yz)
   / 
    abs(detailCoords_41.x)
  ) + (half)0.5) * _mtl_u._DetailScale));
  float2 uv_56;
  uv_56 = float2(uv_40);
  float2 uvCont_57;
  float2 tmpvar_58;
  tmpvar_58 = abs((uv_56 - (0.5 * _mtl_u._DetailScale)));
  uvCont_57.x = max (tmpvar_58.x, tmpvar_58.y);
  uvCont_57.y = min (tmpvar_58.x, tmpvar_58.y);
  float4 tmpvar_59;
  tmpvar_59.xy = dfdx(uvCont_57);
  tmpvar_59.zw = dfdy(uvCont_57);
  half4 tmpvar_60;
  tmpvar_60 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(uv_40), gradient2d((float2)(tmpvar_59.xy), (float2)(tmpvar_59.zw)));
  half4 tmpvar_61;
  tmpvar_61 = tmpvar_60;
  float3 tmpvar_62;
  tmpvar_62 = (_mtl_i.xlv_TEXCOORD3.xyz - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_63;
  float tmpvar_64;
  tmpvar_64 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (tmpvar_62, tmpvar_62)
  )), 0.0, 1.0);
  tmpvar_63 = half(tmpvar_64);
  half4 tmpvar_65;
  tmpvar_65 = ((_mtl_u._Color * tmpvar_39) * mix (tmpvar_61, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_63)));
  color_2 = tmpvar_65;
  color_2.xyz = clamp ((color_2.xyz * ((half)1.0 - color_2.w)), (half)0.0, (half)1.0);
  float3 tmpvar_66;
  tmpvar_66 = float3(mix (1.0, (float)color_2.x, (_mtl_u._ShadowFactor * (float)color_2.w)));
  color_2.xyz = half3(tmpvar_66);
  half4 tmpvar_67;
  tmpvar_67 = half4(mix ((half)1.0, color_2.x, shadowCheck_3));
  tmpvar_1 = tmpvar_67;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "glcore " {
Keywords { "ALPHAMAP_1" "MAP_TYPE_CUBE6_1" "WORLD_SPACE_ON" }
"!!GL3x"
}
}
 }
}
}
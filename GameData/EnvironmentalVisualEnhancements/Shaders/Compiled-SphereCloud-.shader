// Compiled shader for all platforms, uncompressed size: 3672.5KB

Shader "EVE/Cloud" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _MainTex ("Main (RGB)", 2D) = "white" {}
 _DetailTex ("Detail (RGB)", 2D) = "white" {}
 _FalloffPow ("Falloff Power", Range(0,3)) = 2
 _FalloffScale ("Falloff Scale", Range(0,20)) = 3
 _DetailScale ("Detail Scale", Range(0,100)) = 100
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _MinLight ("Minimum Light", Range(0,1)) = 0.5
 _DistFade ("Fade Distance", Range(0,100)) = 10
 _DistFadeVert ("Fade Scale", Range(0,1)) = 0.002
 _RimDist ("Rim Distance", Range(0,1)) = 1
 _RimDistSub ("Rim Distance Sub", Range(0,2)) = 1.01
 _InvFade ("Soft Particles Factor", Range(0.01,3)) = 0.01
 _OceanRadius ("Ocean Radius", Float) = 63000
 _PlanetOrigin ("Sphere Center", Vector) = (0,0,0,1)
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }


 // Stats for Vertex shader:
 //       d3d11 : 32 avg math (25..45)
 //        d3d9 : 37 avg math (30..48)
 //        gles : 205 avg math (186..225), 2 avg texture (2..3), 6 branch
 //       gles3 : 205 avg math (186..225), 2 avg texture (2..3), 6 branch
 //   glesdesktop : 205 avg math (186..225), 2 avg texture (2..3), 6 branch
 //       metal : 14 avg math (11..18)
 //      opengl : 205 avg math (186..225), 2 avg texture (2..3), 6 branch
 // Stats for Fragment shader:
 //       d3d11 : 139 avg math (123..156), 0 avg texture (0..1)
 //        d3d9 : 166 avg math (150..183), 6 avg texture (6..7)
 //       metal : 205 avg math (186..225), 2 avg texture (2..3), 6 branch
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  Lighting On
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha
  AlphaTest Greater 0
  ColorMask RGB
Program "vp" {
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256
Matrix 48 [_MainRotation]
Matrix 112 [_DetailRotation]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedlaokdemmdgfaghecnejaclgignbehnefabaaaaaaniafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcemaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 cse_2;
  cse_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_3;
  tmpvar_3 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_2.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_3);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_2.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_2.xyz));
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinfhlpgjmolfogngfogfledgoccpcacdabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedhcppkinpliajlonhjccinfgmohedhlekabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DGradEXT (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DGradEXT (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump vec4 color_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_6;
  highp float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    highp float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_5.xz);
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_5.xz);
  highp vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureGrad (_MainTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  mediump vec4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec4 tmpvar_14;
  mediump vec3 detailCoords_15;
  mediump float nylerp_16;
  mediump float zxlerp_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_19;
  highp float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    highp float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * inversesqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _DetailScale);
  highp vec2 tmpvar_23;
  tmpvar_23 = dFdx(tmpvar_18.xz);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdy(tmpvar_18.xz);
  highp vec4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dFdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dFdy(tmpvar_22.y);
  highp vec3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  highp float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, vec3(zxlerp_17));
  detailCoords_15 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, detailCoords_15, vec3(nylerp_16));
  detailCoords_15 = tmpvar_30;
  mediump float tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  highp vec2 coord_32;
  coord_32 = (((0.5 * detailCoords_15.zy) / tmpvar_31) * _DetailScale);
  lowp vec4 tmpvar_33;
  tmpvar_33 = textureGrad (_DetailTex, coord_32, tmpvar_25.xy, tmpvar_25.zw);
  tmpvar_14 = tmpvar_33;
  highp vec3 cse_34;
  cse_34 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37 = ((_Color * tmpvar_13) * mix (tmpvar_14, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_35)));
  highp float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  highp vec3 tmpvar_39;
  tmpvar_39 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_41;
  tmpvar_41 = mix (0.0, tmpvar_37.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  mediump float tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_44 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = clamp (((_LightColor0.w * 
    ((tmpvar_44 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_47;
  tmpvar_47 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_46)), 0.0, 1.0);
  color_4.xyz = (tmpvar_37.xyz * tmpvar_47);
  tmpvar_1 = color_4;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256
Matrix 48 [_MainRotation]
Matrix 112 [_DetailRotation]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedlaokdemmdgfaghecnejaclgignbehnefabaaaaaaniafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcemaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 cse_2;
  cse_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((cse_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_2.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 cse_2;
  cse_2 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_3;
  tmpvar_3 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_2.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_3);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_3;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_2.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_2.xyz));
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinfhlpgjmolfogngfogfledgoccpcacdabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedhcppkinpliajlonhjccinfgmohedhlekabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;

uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 cse_4;
  cse_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 30 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 25 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_2;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2DGradEXT (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = texture2DGradEXT (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = cse_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((cse_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_4.xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp vec3 _PlanetOrigin;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 lightDirection_2;
  mediump vec3 ambientLighting_3;
  mediump float sphereCheck_4;
  mediump vec3 worldDir_5;
  mediump vec4 color_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_8;
  highp float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    highp float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * inversesqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdx(tmpvar_7.xz);
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_7.xz);
  highp vec4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dFdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dFdy(uv_8.y);
  lowp vec4 tmpvar_14;
  tmpvar_14 = textureGrad (_MainTex, uv_8, tmpvar_13.xy, tmpvar_13.zw);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  mediump vec4 tmpvar_16;
  mediump vec3 detailCoords_17;
  mediump float nylerp_18;
  mediump float zxlerp_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_21;
  highp float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    highp float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _DetailScale);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  highp vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  highp float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = tmpvar_29;
  highp float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, vec3(zxlerp_19));
  detailCoords_17 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, detailCoords_17, vec3(nylerp_18));
  detailCoords_17 = tmpvar_32;
  mediump float tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  highp vec2 coord_34;
  coord_34 = (((0.5 * detailCoords_17.zy) / tmpvar_33) * _DetailScale);
  lowp vec4 tmpvar_35;
  tmpvar_35 = textureGrad (_DetailTex, coord_34, tmpvar_27.xy, tmpvar_27.zw);
  tmpvar_16 = tmpvar_35;
  highp vec3 cse_36;
  cse_36 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((_Color * tmpvar_15) * mix (tmpvar_16, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  highp vec3 tmpvar_41;
  tmpvar_41 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_43;
  tmpvar_43 = mix (0.0, tmpvar_39.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD1, worldDir_5);
  highp float tmpvar_46;
  highp float cse_47;
  cse_47 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  highp float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  highp float tmpvar_49;
  tmpvar_49 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_48));
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = (tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = tmpvar_52;
  color_6.w = (color_6.w * (1.0 - sphereCheck_4));
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  mediump float tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD4, lightDirection_2), 0.0, 1.0);
  tmpvar_55 = tmpvar_56;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * 
    ((tmpvar_55 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_3 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_57)), 0.0, 1.0);
  color_6.xyz = (tmpvar_39.xyz * tmpvar_58);
  tmpvar_1 = color_6;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 11 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 288
Matrix 16 [glstate_matrix_mvp]
Matrix 80 [_Object2World]
Matrix 144 [_MainRotation]
Matrix 208 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 272 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 tmpvar_1;
  float4 tmpvar_2;
  float4 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_5;
  tmpvar_5 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = cse_4.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_5);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_4.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_4.xyz));
  _mtl_o.xlv_TEXCOORD6 = tmpvar_1;
  _mtl_o.xlv_TEXCOORD7 = tmpvar_2;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_3;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 43 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 38 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c24.x
mul r2.y, r2, c21.x
dp4 r0.z, v0, c6
mov o0, r0
mad o7.xy, r2.z, c22.zwzw, r2
add r2.xyz, -r1, c20
dp3 r2.w, r2, r2
rsq r2.w, r2.w
mov o1.xyz, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c20, r1
mov o7.z, -r0.x
mov o7.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 33 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256
Matrix 48 [_MainRotation]
Matrix 112 [_DetailRotation]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedonaeokcmkahioilpnjdgbeommonlpfigabaaaaaacaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeafaaaaeaaaabaagfabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaa
fgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaa
egacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaahaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaahaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 16 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_MainRotation]
Matrix 288 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 352 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.w, r0, c15
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedkledjckfmhgkcoejpngolbbpebigobhjabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaa
abaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 43 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedabikfgkhhfpdgnkaegeioogpooehdmdmabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaa
abaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaa
dcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xy;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 45 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityShadows" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 41 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r2, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c20, r1
mov o8.z, -r0.x
mov o8.w, r2
"
}
SubProgram "d3d11 " {
// Stats: 34 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjgaopjcdgkkgoeihlgcfnkeeaobokjhhabaaaaaaheahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naafaaaaeaaaabaaheabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaa
agadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaah
dcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaa
ahaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaaiaaaaaaegambaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 45 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c28.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r2, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c27
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r2
dp4 r0.w, v0, c11
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c24, r1
mov o9.z, -r0.x
mov o9.w, r2
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedhppaklinplcboldnoedlnopnabkjffjnabaaaaaamiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcamahaaaaeaaaabaa
mdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaak
hccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
anaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaabaaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaapaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
bbaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaak
dcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaa
abaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaa
abaaaaaaegaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaaaiaaaaaaegaobaaaaaaaaaaa
dgaaaaaflccabaaaajaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 45 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityShadows" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 624
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_MainRotation]
Matrix 544 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 608 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_MainTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _DetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _DetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_DetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  highp vec3 cse_35;
  cse_35 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((_Color * tmpvar_14) * mix (tmpvar_15, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_36)));
  highp float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  highp vec3 tmpvar_40;
  tmpvar_40 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_42;
  tmpvar_42 = mix (0.0, tmpvar_38.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = tmpvar_42;
  highp vec3 tmpvar_43;
  tmpvar_43 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  mediump float tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_45 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp (((_LightColor0.w * 
    ((tmpvar_45 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_47)), 0.0, 1.0);
  color_5.xyz = (tmpvar_38.xyz * tmpvar_48);
  lowp float tmpvar_49;
  tmpvar_49 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = (color_5.w * clamp ((_InvFade * 
    (tmpvar_50 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = tmpvar_51;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xy;
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 43 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 38 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c24.x
mul r2.y, r2, c21.x
dp4 r0.z, v0, c6
mov o0, r0
mad o7.xy, r2.z, c22.zwzw, r2
add r2.xyz, -r1, c20
dp3 r2.w, r2, r2
rsq r2.w, r2.w
mov o1.xyz, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c20, r1
mov o7.z, -r0.x
mov o7.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 33 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256
Matrix 48 [_MainRotation]
Matrix 112 [_DetailRotation]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedonaeokcmkahioilpnjdgbeommonlpfigabaaaaaacaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeafaaaaeaaaabaagfabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaa
fgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaa
egacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaahaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaahaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 16 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 368
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_MainRotation]
Matrix 288 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 352 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.w, r0, c15
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedkledjckfmhgkcoejpngolbbpebigobhjabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaa
abaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 43 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 41 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedabikfgkhhfpdgnkaegeioogpooehdmdmabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaa
abaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaa
dcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 432
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [glstate_matrix_modelview0]
Matrix 160 [_Object2World]
Matrix 224 [_LightMatrix0]
Matrix 288 [_MainRotation]
Matrix 352 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 416 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xy;
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 45 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityShadows" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 41 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Vector 23 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r2, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c20, r1
mov o8.z, -r0.x
mov o8.w, r2
"
}
SubProgram "d3d11 " {
// Stats: 34 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjgaopjcdgkkgoeihlgcfnkeeaobokjhhabaaaaaaheahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naafaaaaeaaaabaaheabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaa
agadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaah
dcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaa
ahaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaaiaaaaaaegambaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 45 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c28.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r2, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c27
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r2
dp4 r0.w, v0, c11
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c24, r1
mov o9.z, -r0.x
mov o9.w, r2
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedhppaklinplcboldnoedlnopnabkjffjnabaaaaaamiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcamahaaaaeaaaabaa
mdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaak
hccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
anaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaabaaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaapaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
bbaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaak
dcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaa
abaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaa
abaaaaaaegaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaaaiaaaaaaegaobaaaaaaaaaaa
dgaaaaaflccabaaaajaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform mat4 unity_World2Shadow[4];


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 48 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Vector 31 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 45 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
Matrix 176 [_MainRotation]
Matrix 240 [_DetailRotation]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityShadows" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _LightPositionRange;


uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
uniform mat4 _MainRotation;
uniform mat4 _DetailRotation;
uniform vec3 _PlanetOrigin;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ZBufferParams;
uniform vec4 _WorldSpaceLightPos0;

uniform vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform vec4 _Color;
uniform float _FalloffPow;
uniform float _FalloffScale;
uniform float _DetailScale;
uniform float _DetailDist;
uniform float _MinLight;
uniform float _DistFade;
uniform float _DistFadeVert;
uniform float _RimDist;
uniform float _RimDistSub;
uniform float _OceanRadius;
uniform float _InvFade;
uniform vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying vec3 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD8;
void main ()
{
  vec4 color_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_3;
  float tmpvar_4;
  if ((abs(tmpvar_2.z) > (1e-08 * abs(tmpvar_2.x)))) {
    float tmpvar_5;
    tmpvar_5 = (tmpvar_2.x / tmpvar_2.z);
    tmpvar_4 = (tmpvar_5 * inversesqrt((
      (tmpvar_5 * tmpvar_5)
     + 1.0)));
    tmpvar_4 = (sign(tmpvar_4) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_4)))
     * 
      (1.5708 + (abs(tmpvar_4) * (-0.214602 + (
        abs(tmpvar_4)
       * 
        (0.0865667 + (abs(tmpvar_4) * -0.0310296))
      ))))
    )));
    if ((tmpvar_2.z < 0.0)) {
      if ((tmpvar_2.x >= 0.0)) {
        tmpvar_4 += 3.14159;
      } else {
        tmpvar_4 = (tmpvar_4 - 3.14159);
      };
    };
  } else {
    tmpvar_4 = (sign(tmpvar_2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * tmpvar_4));
  uv_3.y = (0.31831 * (1.5708 - (
    sign(tmpvar_2.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_2.y)
    )) * (1.5708 + (
      abs(tmpvar_2.y)
     * 
      (-0.214602 + (abs(tmpvar_2.y) * (0.0865667 + (
        abs(tmpvar_2.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_6;
  tmpvar_6 = dFdx(tmpvar_2.xz);
  vec2 tmpvar_7;
  tmpvar_7 = dFdy(tmpvar_2.xz);
  vec4 tmpvar_8;
  tmpvar_8.x = (0.159155 * sqrt(dot (tmpvar_6, tmpvar_6)));
  tmpvar_8.y = dFdx(uv_3.y);
  tmpvar_8.z = (0.159155 * sqrt(dot (tmpvar_7, tmpvar_7)));
  tmpvar_8.w = dFdy(uv_3.y);
  vec4 tmpvar_9;
  tmpvar_9 = texture2DGradARB (_MainTex, uv_3, tmpvar_8.xy, tmpvar_8.zw);
  vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_11;
  float tmpvar_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    float tmpvar_13;
    tmpvar_13 = (tmpvar_10.x / tmpvar_10.z);
    tmpvar_12 = (tmpvar_13 * inversesqrt((
      (tmpvar_13 * tmpvar_13)
     + 1.0)));
    tmpvar_12 = (sign(tmpvar_12) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_12)))
     * 
      (1.5708 + (abs(tmpvar_12) * (-0.214602 + (
        abs(tmpvar_12)
       * 
        (0.0865667 + (abs(tmpvar_12) * -0.0310296))
      ))))
    )));
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        tmpvar_12 += 3.14159;
      } else {
        tmpvar_12 = (tmpvar_12 - 3.14159);
      };
    };
  } else {
    tmpvar_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * tmpvar_12));
  uv_11.y = (0.31831 * (1.5708 - (
    sign(tmpvar_10.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_10.y)
    )) * (1.5708 + (
      abs(tmpvar_10.y)
     * 
      (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (
        abs(tmpvar_10.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_14;
  tmpvar_14 = ((uv_11 * 4.0) * _DetailScale);
  vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_10.xz);
  vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_10.xz);
  vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(tmpvar_14.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(tmpvar_14.y);
  vec3 tmpvar_18;
  tmpvar_18 = abs(tmpvar_10);
  float tmpvar_19;
  tmpvar_19 = float((tmpvar_18.z >= tmpvar_18.x));
  vec3 tmpvar_20;
  tmpvar_20 = mix (tmpvar_18.yxz, mix (tmpvar_18, tmpvar_18.zxy, vec3(tmpvar_19)), vec3(float((
    mix (tmpvar_18.x, tmpvar_18.z, tmpvar_19)
   >= tmpvar_18.y))));
  vec3 cse_21;
  cse_21 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_22;
  tmpvar_22 = ((_Color * tmpvar_9) * mix (texture2DGradARB (_DetailTex, (
    ((0.5 * tmpvar_20.zy) / abs(tmpvar_20.x))
   * _DetailScale), tmpvar_17.xy, tmpvar_17.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (
    ((2.0 * _DetailDist) * sqrt(dot (cse_21, cse_21)))
  , 0.0, 1.0))));
  color_1.xyz = tmpvar_22.xyz;
  float tmpvar_23;
  tmpvar_23 = sqrt(dot (cse_21, cse_21));
  vec3 tmpvar_24;
  tmpvar_24 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_1.w = mix (0.0, tmpvar_22.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_23), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_23)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_24, tmpvar_24)) - (_RimDistSub * sqrt(
      dot (tmpvar_25, tmpvar_25)
    ))))
  , 0.0, 1.0)));
  float tmpvar_26;
  tmpvar_26 = dot (xlv_TEXCOORD1, normalize(cse_21));
  float tmpvar_27;
  float cse_28;
  cse_28 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_27 = sqrt((cse_28 - (tmpvar_26 * tmpvar_26)));
  float tmpvar_29;
  tmpvar_29 = pow (tmpvar_27, 2.0);
  float tmpvar_30;
  tmpvar_30 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_29));
  color_1.w = (color_1.w * (1.0 - (
    clamp (((float(
      (_OceanRadius >= tmpvar_27)
    ) * float(
      (tmpvar_26 >= 0.0)
    )) + float((_OceanRadius >= 
      sqrt(cse_28)
    ))), 0.0, 1.0)
   * 
    float((tmpvar_23 >= mix ((tmpvar_30 - 
      sqrt((cse_28 - tmpvar_29))
    ), (tmpvar_26 - tmpvar_30), float(
      (tmpvar_26 >= 0.0)
    ))))
  )));
  color_1.xyz = (tmpvar_22.xyz * clamp ((gl_LightModel.ambient.xyz + 
    ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * 
      ((clamp (dot (xlv_TEXCOORD4, 
        normalize(_WorldSpaceLightPos0)
      .xyz), 0.0, 1.0) - 0.01) / 0.99)
    ) * 4.0), 0.0, 1.0))
  ), 0.0, 1.0));
  color_1.w = (color_1.w * clamp ((_InvFade * 
    ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 44 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Vector 28 [_PlanetOrigin]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}
SubProgram "d3d11 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
Matrix 112 [_MainRotation]
Matrix 176 [_DetailRotation]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 64 [glstate_matrix_modelview0]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xyz;
  xlv_TEXCOORD7 = (cse_3.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 448
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [glstate_matrix_modelview0]
Matrix 176 [_Object2World]
Matrix 240 [_LightMatrix0]
Matrix 304 [_MainRotation]
Matrix 368 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 32 [_LightPositionRange]
Vector 432 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_3.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 17 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 624
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_MainRotation]
Matrix 544 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 608 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
varying highp vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DGradEXT (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2DGradEXT (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
uniform highp vec3 _PlanetOrigin;
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 cse_3;
  cse_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = cse_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((cse_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - cse_3.xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_3);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ZBufferParams;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump vec4 color_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * inversesqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_12;
  tmpvar_12 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_13;
  tmpvar_13 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_15;
  tmpvar_15 = textureGrad (_MainTex, uv_9, tmpvar_14.xy, tmpvar_14.zw);
  mediump vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  mediump vec3 detailCoords_18;
  mediump float nylerp_19;
  mediump float zxlerp_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_22;
  highp float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    highp float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * inversesqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _DetailScale);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdx(tmpvar_21.xz);
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdy(tmpvar_21.xz);
  highp vec4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dFdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dFdy(tmpvar_25.y);
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  highp float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, vec3(zxlerp_20));
  detailCoords_18 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, detailCoords_18, vec3(nylerp_19));
  detailCoords_18 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  highp vec2 coord_35;
  coord_35 = (((0.5 * detailCoords_18.zy) / tmpvar_34) * _DetailScale);
  lowp vec4 tmpvar_36;
  tmpvar_36 = textureGrad (_DetailTex, coord_35, tmpvar_28.xy, tmpvar_28.zw);
  tmpvar_17 = tmpvar_36;
  highp vec3 cse_37;
  cse_37 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  mediump float tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = tmpvar_39;
  mediump vec4 tmpvar_40;
  tmpvar_40 = ((_Color * tmpvar_16) * mix (tmpvar_17, vec4(1.0, 1.0, 1.0, 1.0), vec4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  highp float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  highp vec3 tmpvar_42;
  tmpvar_42 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_44;
  tmpvar_44 = mix (0.0, tmpvar_40.w, mix ((1.0 - 
    (clamp ((_DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow)
  , 0.0, 1.0), clamp (
    (_RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = tmpvar_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_47;
  highp float cse_48;
  cse_48 = dot (xlv_TEXCOORD1, xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  highp float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  highp float tmpvar_50;
  tmpvar_50 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_49));
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = (tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = tmpvar_53;
  color_7.w = (color_7.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  mediump float tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  tmpvar_56 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (((_LightColor0.w * 
    ((tmpvar_56 - 0.01) / 0.99)
  ) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_4 + (
    (_MinLight + _LightColor0.xyz)
   * tmpvar_58)), 0.0, 1.0);
  color_7.xyz = (tmpvar_40.xyz * tmpvar_59);
  lowp float tmpvar_60;
  tmpvar_60 = textureProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (color_7.w * clamp ((_InvFade * 
    (tmpvar_61 - xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = tmpvar_62;
  tmpvar_1 = color_7;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 18 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Bind "vertex" ATTR0
ConstBuffer "$Globals" 688
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [glstate_matrix_modelview0]
Matrix 416 [_Object2World]
Matrix 480 [_LightMatrix0]
Matrix 544 [_MainRotation]
Matrix 608 [_DetailRotation]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ProjectionParams]
Vector 672 [_PlanetOrigin] 3
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ProjectionParams;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 glstate_matrix_modelview0;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
  float4x4 _MainRotation;
  float4x4 _DetailRotation;
  float3 _PlanetOrigin;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_2 = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  float4 cse_3;
  cse_3 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float4 tmpvar_4;
  tmpvar_4 = -((_mtl_u._MainRotation * _mtl_i._glesVertex));
  float4 o_5;
  float4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  float2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _mtl_u._ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((_mtl_u.glstate_matrix_modelview0 * _mtl_i._glesVertex).z);
  _mtl_o.gl_Position = tmpvar_2;
  _mtl_o.xlv_TEXCOORD0 = cse_3.xyz;
  _mtl_o.xlv_TEXCOORD1 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._DetailRotation * tmpvar_4);
  _mtl_o.xlv_TEXCOORD3 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD4 = normalize((cse_3.xyz - (_mtl_u._Object2World * float4(0.0, 0.0, 0.0, 1.0)).xyz));
  _mtl_o.xlv_TEXCOORD5 = normalize((_mtl_u._WorldSpaceCameraPos - cse_3.xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_3).xy;
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_3);
  _mtl_o.xlv_TEXCOORD8 = tmpvar_1;
  return _mtl_o;
}

"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedodhfakccdbjecjkgehmkbcnagifkhmblabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 256
Vector 16 [_LightColor0]
Vector 176 [_Color]
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedeealjpdfiadfaanfknimefaadpdabhgkabaaaaaahebbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
alaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaaanaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
apaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedpjmgddhfndgneamapoljmkkechcpehlhabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedodhfakccdbjecjkgehmkbcnagifkhmblabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedgpomnoikmehpjahnpdhegionfoeicggoabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedklhlalbooadodmncbfjdjgmcaabnkcmgabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedpjmgddhfndgneamapoljmkkechcpehlhabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedfoabdeabjikimcopindiokalkceajlomabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedfekciligicncmkehfdeeblaoifhckhdmabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 150 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 123 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_43);
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 186 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half4 color_4;
  float3 tmpvar_5;
  tmpvar_5 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_6;
  float tmpvar_7;
  if ((abs(tmpvar_5.z) > (1e-08 * abs(tmpvar_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (tmpvar_5.x / tmpvar_5.z);
    tmpvar_7 = (tmpvar_8 * rsqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((tmpvar_5.z < 0.0)) {
      if ((tmpvar_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(tmpvar_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(tmpvar_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_5.y)
    )) * (1.5708 + (
      abs(tmpvar_5.y)
     * 
      (-0.214602 + (abs(tmpvar_5.y) * (0.0865667 + (
        abs(tmpvar_5.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_9;
  tmpvar_9 = dfdx(tmpvar_5.xz);
  float2 tmpvar_10;
  tmpvar_10 = dfdy(tmpvar_5.xz);
  float4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dfdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dfdy(uv_6.y);
  half4 tmpvar_12;
  tmpvar_12 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_6), gradient2d((float2)(tmpvar_11.xy), (float2)(tmpvar_11.zw)));
  half4 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  half4 tmpvar_14;
  half3 detailCoords_15;
  half nylerp_16;
  half zxlerp_17;
  float3 tmpvar_18;
  tmpvar_18 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_19;
  float tmpvar_20;
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_18.x)))) {
    float tmpvar_21;
    tmpvar_21 = (tmpvar_18.x / tmpvar_18.z);
    tmpvar_20 = (tmpvar_21 * rsqrt((
      (tmpvar_21 * tmpvar_21)
     + 1.0)));
    tmpvar_20 = (sign(tmpvar_20) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_20)))
     * 
      (1.5708 + (abs(tmpvar_20) * (-0.214602 + (
        abs(tmpvar_20)
       * 
        (0.0865667 + (abs(tmpvar_20) * -0.0310296))
      ))))
    )));
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_18.x >= 0.0)) {
        tmpvar_20 += 3.14159;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.14159);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_18.x) * 1.5708);
  };
  uv_19.x = (0.5 + (0.159155 * tmpvar_20));
  uv_19.y = (0.31831 * (1.5708 - (
    sign(tmpvar_18.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_18.y)
    )) * (1.5708 + (
      abs(tmpvar_18.y)
     * 
      (-0.214602 + (abs(tmpvar_18.y) * (0.0865667 + (
        abs(tmpvar_18.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_22;
  tmpvar_22 = ((uv_19 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_23;
  tmpvar_23 = dfdx(tmpvar_18.xz);
  float2 tmpvar_24;
  tmpvar_24 = dfdy(tmpvar_18.xz);
  float4 tmpvar_25;
  tmpvar_25.x = (0.159155 * sqrt(dot (tmpvar_23, tmpvar_23)));
  tmpvar_25.y = dfdx(tmpvar_22.y);
  tmpvar_25.z = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_25.w = dfdy(tmpvar_22.y);
  float3 tmpvar_26;
  tmpvar_26 = abs(tmpvar_18);
  float tmpvar_27;
  tmpvar_27 = float((tmpvar_26.z >= tmpvar_26.x));
  zxlerp_17 = half(tmpvar_27);
  float tmpvar_28;
  tmpvar_28 = float((mix (tmpvar_26.x, tmpvar_26.z, (float)zxlerp_17) >= tmpvar_26.y));
  nylerp_16 = half(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = mix (tmpvar_26, tmpvar_26.zxy, (float3)half3(zxlerp_17));
  detailCoords_15 = half3(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_26.yxz, (float3)detailCoords_15, (float3)half3(nylerp_16));
  detailCoords_15 = half3(tmpvar_30);
  half tmpvar_31;
  tmpvar_31 = abs(detailCoords_15.x);
  float2 coord_32;
  coord_32 = ((float2)(((half)0.5 * detailCoords_15.zy) / tmpvar_31) * _mtl_u._DetailScale);
  half4 tmpvar_33;
  tmpvar_33 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_32), gradient2d((float2)(tmpvar_25.xy), (float2)(tmpvar_25.zw)));
  tmpvar_14 = tmpvar_33;
  float3 cse_34;
  cse_34 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_35;
  float tmpvar_36;
  tmpvar_36 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_34, cse_34)
  )), 0.0, 1.0);
  tmpvar_35 = half(tmpvar_36);
  half4 tmpvar_37;
  tmpvar_37 = ((_mtl_u._Color * tmpvar_13) * mix (tmpvar_14, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_35)));
  float tmpvar_38;
  tmpvar_38 = sqrt(dot (cse_34, cse_34));
  float3 tmpvar_39;
  tmpvar_39 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_41;
  tmpvar_41 = mix (0.0, (float)tmpvar_37.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_38), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_38)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_39, tmpvar_39)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_40, tmpvar_40)
    ))))
  , 0.0, 1.0)));
  color_4.w = half(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_42);
  half3 tmpvar_43;
  tmpvar_43 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_43;
  half tmpvar_44;
  float tmpvar_45;
  tmpvar_45 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_44 = half(tmpvar_45);
  half tmpvar_46;
  tmpvar_46 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_44 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_47;
  tmpvar_47 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_46)), 0.0, 1.0);
  color_4.xyz = ((half3)((float3)tmpvar_37.xyz * tmpvar_47));
  tmpvar_1 = color_4;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkegjnfdodmifkgjghnnbcnncgimbkobmabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 256
Vector 16 [_LightColor0]
Vector 176 [_Color]
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_OceanRadius]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedecgkejbgappciaffkellfiebkgpjmjifabaaaaaalebeaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaaamaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaaanaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
amaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaaapaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
aoaaaaaabkiacaaaaaaaaaaaaoaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaaaoaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaaaoaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  half3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedgjnpipjjnbapgojmgijoldicgipadmlfabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkegjnfdodmifkgjghnnbcnncgimbkobmabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedcklaalangkaffolplbdljljjdnpplmcfabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  half3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedppbmmofdgjdkpdlaefihehcfkipfjepbabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedgjnpipjjnbapgojmgijoldicgipadmlfabaaaaaammbeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgebdaaaaeaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedmdfanedofgpncpcfelogmcflinfhelkhabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabfaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaaaaaaaaaabgaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedagedpehpgnfngbimblagejaceffcgjemabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedagedpehpgnfngbimblagejaceffcgjemabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedjbopnckbfcnnlknjnfbkokcbkongoihlabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabfaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaaaaaaaaaabgaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedagedpehpgnfngbimblagejaceffcgjemabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 179 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
"ps_3_0
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, -r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r1.x, r3.w, -r1
rsq r0.y, r2.y
rcp r0.y, r0.y
cmp r1.y, r1.x, c16, c16.x
add r1.x, -r0.y, c14
add r0.y, -r2.z, c14.x
cmp r1.x, r1, c16.y, c16
cmp r0.y, r0, c16, c16.x
mad_sat r0.y, r0, r0.z, r1.x
mad_pp r0.y, -r0, r1, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}
SubProgram "d3d11 " {
// Stats: 150 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedagedpehpgnfngbimblagejaceffcgjemabaaaaaaoebeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgebdaaaa
eaaaaaaanjaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaa
acaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaa
bkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaa
egaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaa
akaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  float3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = half3(tmpvar_54);
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  half3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 218 math, 2 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 32 [glstate_lightmodel_ambient]
VectorHalf 48 [_LightColor0] 4
VectorHalf 56 [_Color] 4
Float 64 [_FalloffPow]
Float 68 [_FalloffScale]
Float 72 [_DetailScale]
Float 76 [_DetailDist]
Float 80 [_MinLight]
Float 84 [_DistFade]
Float 88 [_DistFadeVert]
Float 92 [_RimDist]
Float 96 [_RimDistSub]
Float 100 [_OceanRadius]
Vector 112 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half3 lightDirection_2;
  half3 ambientLighting_3;
  half sphereCheck_4;
  half3 worldDir_5;
  half4 color_6;
  float3 tmpvar_7;
  tmpvar_7 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_8;
  float tmpvar_9;
  if ((abs(tmpvar_7.z) > (1e-08 * abs(tmpvar_7.x)))) {
    float tmpvar_10;
    tmpvar_10 = (tmpvar_7.x / tmpvar_7.z);
    tmpvar_9 = (tmpvar_10 * rsqrt((
      (tmpvar_10 * tmpvar_10)
     + 1.0)));
    tmpvar_9 = (sign(tmpvar_9) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_9)))
     * 
      (1.5708 + (abs(tmpvar_9) * (-0.214602 + (
        abs(tmpvar_9)
       * 
        (0.0865667 + (abs(tmpvar_9) * -0.0310296))
      ))))
    )));
    if ((tmpvar_7.z < 0.0)) {
      if ((tmpvar_7.x >= 0.0)) {
        tmpvar_9 += 3.14159;
      } else {
        tmpvar_9 = (tmpvar_9 - 3.14159);
      };
    };
  } else {
    tmpvar_9 = (sign(tmpvar_7.x) * 1.5708);
  };
  uv_8.x = (0.5 + (0.159155 * tmpvar_9));
  uv_8.y = (0.31831 * (1.5708 - (
    sign(tmpvar_7.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_7.y)
    )) * (1.5708 + (
      abs(tmpvar_7.y)
     * 
      (-0.214602 + (abs(tmpvar_7.y) * (0.0865667 + (
        abs(tmpvar_7.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_11;
  tmpvar_11 = dfdx(tmpvar_7.xz);
  float2 tmpvar_12;
  tmpvar_12 = dfdy(tmpvar_7.xz);
  float4 tmpvar_13;
  tmpvar_13.x = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_13.y = dfdx(uv_8.y);
  tmpvar_13.z = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_13.w = dfdy(uv_8.y);
  half4 tmpvar_14;
  tmpvar_14 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_8), gradient2d((float2)(tmpvar_13.xy), (float2)(tmpvar_13.zw)));
  half4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  half4 tmpvar_16;
  half3 detailCoords_17;
  half nylerp_18;
  half zxlerp_19;
  float3 tmpvar_20;
  tmpvar_20 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * rsqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_25;
  tmpvar_25 = dfdx(tmpvar_20.xz);
  float2 tmpvar_26;
  tmpvar_26 = dfdy(tmpvar_20.xz);
  float4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dfdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dfdy(tmpvar_24.y);
  float3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  zxlerp_19 = half(tmpvar_29);
  float tmpvar_30;
  tmpvar_30 = float((mix (tmpvar_28.x, tmpvar_28.z, (float)zxlerp_19) >= tmpvar_28.y));
  nylerp_18 = half(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_28, tmpvar_28.zxy, (float3)half3(zxlerp_19));
  detailCoords_17 = half3(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_28.yxz, (float3)detailCoords_17, (float3)half3(nylerp_18));
  detailCoords_17 = half3(tmpvar_32);
  half tmpvar_33;
  tmpvar_33 = abs(detailCoords_17.x);
  float2 coord_34;
  coord_34 = ((float2)(((half)0.5 * detailCoords_17.zy) / tmpvar_33) * _mtl_u._DetailScale);
  half4 tmpvar_35;
  tmpvar_35 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_34), gradient2d((float2)(tmpvar_27.xy), (float2)(tmpvar_27.zw)));
  tmpvar_16 = tmpvar_35;
  float3 cse_36;
  cse_36 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_37;
  float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_36, cse_36)
  )), 0.0, 1.0);
  tmpvar_37 = half(tmpvar_38);
  half4 tmpvar_39;
  tmpvar_39 = ((_mtl_u._Color * tmpvar_15) * mix (tmpvar_16, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_37)));
  color_6.xyz = tmpvar_39.xyz;
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (cse_36, cse_36));
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_43;
  tmpvar_43 = mix (0.0, (float)tmpvar_39.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_40), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_40)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_41, tmpvar_41)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_42, tmpvar_42)
    ))))
  , 0.0, 1.0)));
  color_6.w = half(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(cse_36);
  worldDir_5 = half3(tmpvar_44);
  float tmpvar_45;
  tmpvar_45 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_5);
  float tmpvar_46;
  float cse_47;
  cse_47 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_46 = sqrt((cse_47 - (tmpvar_45 * tmpvar_45)));
  float tmpvar_48;
  tmpvar_48 = pow (tmpvar_46, 2.0);
  float tmpvar_49;
  tmpvar_49 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_48));
  half tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_46))
   * 
    float((tmpvar_45 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_47))
  )), 0.0, 1.0);
  tmpvar_50 = half(tmpvar_51);
  float tmpvar_52;
  tmpvar_52 = ((float)tmpvar_50 * float((tmpvar_40 >= 
    mix ((tmpvar_49 - sqrt((cse_47 - tmpvar_48))), (tmpvar_45 - tmpvar_49), float((tmpvar_45 >= 0.0)))
  )));
  sphereCheck_4 = half(tmpvar_52);
  color_6.w = (color_6.w * ((half)1.0 - sphereCheck_4));
  float3 tmpvar_53;
  tmpvar_53 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_3 = half3(tmpvar_53);
  half3 tmpvar_54;
  tmpvar_54 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_2 = tmpvar_54;
  half tmpvar_55;
  float tmpvar_56;
  tmpvar_56 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_2), 0.0, 1.0);
  tmpvar_55 = half(tmpvar_56);
  half tmpvar_57;
  tmpvar_57 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_55 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_58;
  tmpvar_58 = clamp (((float3)ambientLighting_3 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_57)), 0.0, 1.0);
  color_6.xyz = ((half3)((float3)tmpvar_39.xyz * tmpvar_58));
  tmpvar_1 = color_6;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedncncplmhbjbmhlkdmcbkhkgbigahgbigabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 256
Vector 16 [_LightColor0]
Vector 176 [_Color]
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 232 [_InvFade]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedhbmednkgdimknhkdcmjbejlahaednafbabaaaaaaimbcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdp
aaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
ckaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaa
ckaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaa
acaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaa
aaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
apaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaa
ogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
aaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaa
baaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaa
abaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaa
acaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaa
adaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaa
dcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaia
ibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaa
adaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaia
ibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
adaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaa
kgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaah
dcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaia
mbaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaa
acaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdp
alaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaaf
dcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaa
acaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaah
ecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaal
pcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaaanaaaaaadccaaaal
ccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaaapaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaaanaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaapgbpbaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaa
akaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaadicaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaaaoaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaa
anaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefieceddhbiheiioemaobmheaklbecpdgpoljaiabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedncncplmhbjbmhlkdmcbkhkgbigahgbigabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedpdiophneplejfijpppebknnomkbmedfgabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedncghalfhnpjehpoamiffdoppaabgkdioabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefieceddhbiheiioemaobmheaklbecpdgpoljaiabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedfbpplnhaolhjkbhppedacpfpfkaaonljabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
beaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedpjibnomdmjdiibkogbknadalajkflkpnabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
beaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 154 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 129 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  float3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_44);
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 193 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_OFF" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._DetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  float3 cse_35;
  cse_35 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_35, cse_35)
  )), 0.0, 1.0);
  tmpvar_36 = half(tmpvar_37);
  half4 tmpvar_38;
  tmpvar_38 = ((_mtl_u._Color * tmpvar_14) * mix (tmpvar_15, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_36)));
  float tmpvar_39;
  tmpvar_39 = sqrt(dot (cse_35, cse_35));
  float3 tmpvar_40;
  tmpvar_40 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_41;
  tmpvar_41 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_42;
  tmpvar_42 = mix (0.0, (float)tmpvar_38.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_39), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_39)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_40, tmpvar_40)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_41, tmpvar_41)
    ))))
  , 0.0, 1.0)));
  color_5.w = half(tmpvar_42);
  float3 tmpvar_43;
  tmpvar_43 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_43);
  half3 tmpvar_44;
  tmpvar_44 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_44;
  half tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_45 = half(tmpvar_46);
  half tmpvar_47;
  tmpvar_47 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_45 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_48;
  tmpvar_48 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_47)), 0.0, 1.0);
  color_5.xyz = ((half3)((float3)tmpvar_38.xyz * tmpvar_48));
  half tmpvar_49;
  tmpvar_49 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_49);
  float tmpvar_50;
  tmpvar_50 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_50;
  float tmpvar_51;
  tmpvar_51 = ((float)color_5.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_50 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_5.w = half(tmpvar_51);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedminkkkhollfnmikikoieimopnhhckejhabaaaaaaoebfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 256
Vector 16 [_LightColor0]
Vector 176 [_Color]
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_OceanRadius]
Float 232 [_InvFade]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedonobnebipoamkdicpenajmkojnomidebabaaaaaammbfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
acaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
aaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaa
abaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
pcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaa
adaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaia
ibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaa
aeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaa
egaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaia
mbaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaa
abaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaakgikcaaaaaaaaaaaamaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaah
bcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaa
abeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaa
dkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaaeaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaaeaaaaaabkiacaaaaaaaaaaaanaaaaaadgcaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaa
anaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
apaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaak
ccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaa
abaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaa
bkiacaaaaaaaaaaaaoaaaaaabkiacaaaaaaaaaaaaoaaaaaackaabaiaebaaaaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaa
acaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaa
abaaaaaabkiacaaaaaaaaaaaaoaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaa
aoaaaaaaakaabaaaabaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaapgbpbaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaa
akaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaadicaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaaaoaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaa
anaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  half3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedbbljfmflephcepobckeogkbpagihoicpabaaaaaaoebfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedminkkkhollfnmikikoieimopnhhckejhabaaaaaaoebfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedilpaokgmoddefcinhhanodkabfdjojioabaaaaaaoebfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  half3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedcdpholieclmppkamnbamaopaoloadnbbabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedbbljfmflephcepobckeogkbpagihoicpabaaaaaaoebfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchmbeaaaaeaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaaibcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaa
abaaaaaaabaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaaaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaacaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabnaaaaahccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedobmalikloodefdlmbhpfjdiandajjennabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bfaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaa
aaaaaaaabgaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkmdpmimjdnhangiafamjjdbknnppibbaabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkmdpmimjdnhangiafamjjdbknnppibbaabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 384
Vector 144 [_LightColor0]
Vector 304 [_Color]
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedbjnilkkhpafijmcbeipddgmdldfloilpabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bfaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaa
aaaaaaaabgaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkmdpmimjdnhangiafamjjdbknnppibbaabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 183 math, 7 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, -r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.z, r2.w, -r1
rsq r1.x, r3.w
cmp r2.y, r1.z, c18.x, c18
rcp r1.x, r1.x
add r1.z, -r1.x, c15.x
add r1.x, -r2, c15
cmp r1.z, r1, c18.x, c18.y
cmp r1.x, r1, c18, c18.y
mad_sat r1.w, r1.x, r1.y, r1.z
mad_pp r3.x, -r1.w, r2.y, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}
SubProgram "d3d11 " {
// Stats: 156 math, 1 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 320
Vector 80 [_LightColor0]
Vector 240 [_Color]
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerFrame" 208
Vector 64 [glstate_lightmodel_ambient]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerFrame" 3
"ps_4_0
eefiecedkmdpmimjdnhangiafamjjdbknnppibbaabaaaaaapmbfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmbeaaaa
eaaaaaaabpafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakccaabaaaacaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaai
bcaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaaakaabaaaabaaaaaaabaaaaak
dcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaaaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpelaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaabnaaaaah
ccaabaaaabaaaaaaakaabaaaaeaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  float4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  float3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = half3(tmpvar_55);
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  half3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 225 math, 3 textures, 6 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "WORLD_SPACE_ON" "SOFT_DEPTH_ON" }
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
ConstBuffer "$Globals" 144
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_ZBufferParams]
VectorHalf 32 [_WorldSpaceLightPos0] 4
Vector 48 [glstate_lightmodel_ambient]
VectorHalf 64 [_LightColor0] 4
VectorHalf 72 [_Color] 4
Float 80 [_FalloffPow]
Float 84 [_FalloffScale]
Float 88 [_DetailScale]
Float 92 [_DetailDist]
Float 96 [_MinLight]
Float 100 [_DistFade]
Float 104 [_DistFadeVert]
Float 108 [_RimDist]
Float 112 [_RimDistSub]
Float 116 [_OceanRadius]
Float 120 [_InvFade]
Vector 128 [_PlanetOrigin] 3
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD8;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _ZBufferParams;
  half4 _WorldSpaceLightPos0;
  float4 glstate_lightmodel_ambient;
  half4 _LightColor0;
  half4 _Color;
  float _FalloffPow;
  float _FalloffScale;
  float _DetailScale;
  float _DetailDist;
  float _MinLight;
  float _DistFade;
  float _DistFadeVert;
  float _RimDist;
  float _RimDistSub;
  float _OceanRadius;
  float _InvFade;
  float3 _PlanetOrigin;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]]
  ,   texture2d<half> _DetailTex [[texture(1)]], sampler _mtlsmp__DetailTex [[sampler(1)]]
  ,   texture2d<half> _CameraDepthTexture [[texture(2)]], sampler _mtlsmp__CameraDepthTexture [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  float depth_2;
  half3 lightDirection_3;
  half3 ambientLighting_4;
  half sphereCheck_5;
  half3 worldDir_6;
  half4 color_7;
  float3 tmpvar_8;
  tmpvar_8 = normalize(_mtl_i.xlv_TEXCOORD3.xyz);
  float2 uv_9;
  float tmpvar_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    float tmpvar_11;
    tmpvar_11 = (tmpvar_8.x / tmpvar_8.z);
    tmpvar_10 = (tmpvar_11 * rsqrt((
      (tmpvar_11 * tmpvar_11)
     + 1.0)));
    tmpvar_10 = (sign(tmpvar_10) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_10)))
     * 
      (1.5708 + (abs(tmpvar_10) * (-0.214602 + (
        abs(tmpvar_10)
       * 
        (0.0865667 + (abs(tmpvar_10) * -0.0310296))
      ))))
    )));
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        tmpvar_10 += 3.14159;
      } else {
        tmpvar_10 = (tmpvar_10 - 3.14159);
      };
    };
  } else {
    tmpvar_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * tmpvar_10));
  uv_9.y = (0.31831 * (1.5708 - (
    sign(tmpvar_8.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_8.y)
    )) * (1.5708 + (
      abs(tmpvar_8.y)
     * 
      (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (
        abs(tmpvar_8.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_12;
  tmpvar_12 = dfdx(tmpvar_8.xz);
  float2 tmpvar_13;
  tmpvar_13 = dfdy(tmpvar_8.xz);
  float4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dfdx(uv_9.y);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dfdy(uv_9.y);
  half4 tmpvar_15;
  tmpvar_15 = _MainTex.sample(_mtlsmp__MainTex, (float2)(uv_9), gradient2d((float2)(tmpvar_14.xy), (float2)(tmpvar_14.zw)));
  half4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  half4 tmpvar_17;
  half3 detailCoords_18;
  half nylerp_19;
  half zxlerp_20;
  float3 tmpvar_21;
  tmpvar_21 = normalize(_mtl_i.xlv_TEXCOORD2.xyz);
  float2 uv_22;
  float tmpvar_23;
  if ((abs(tmpvar_21.z) > (1e-08 * abs(tmpvar_21.x)))) {
    float tmpvar_24;
    tmpvar_24 = (tmpvar_21.x / tmpvar_21.z);
    tmpvar_23 = (tmpvar_24 * rsqrt((
      (tmpvar_24 * tmpvar_24)
     + 1.0)));
    tmpvar_23 = (sign(tmpvar_23) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_23)))
     * 
      (1.5708 + (abs(tmpvar_23) * (-0.214602 + (
        abs(tmpvar_23)
       * 
        (0.0865667 + (abs(tmpvar_23) * -0.0310296))
      ))))
    )));
    if ((tmpvar_21.z < 0.0)) {
      if ((tmpvar_21.x >= 0.0)) {
        tmpvar_23 += 3.14159;
      } else {
        tmpvar_23 = (tmpvar_23 - 3.14159);
      };
    };
  } else {
    tmpvar_23 = (sign(tmpvar_21.x) * 1.5708);
  };
  uv_22.x = (0.5 + (0.159155 * tmpvar_23));
  uv_22.y = (0.31831 * (1.5708 - (
    sign(tmpvar_21.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_21.y)
    )) * (1.5708 + (
      abs(tmpvar_21.y)
     * 
      (-0.214602 + (abs(tmpvar_21.y) * (0.0865667 + (
        abs(tmpvar_21.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_25;
  tmpvar_25 = ((uv_22 * 4.0) * _mtl_u._DetailScale);
  float2 tmpvar_26;
  tmpvar_26 = dfdx(tmpvar_21.xz);
  float2 tmpvar_27;
  tmpvar_27 = dfdy(tmpvar_21.xz);
  float4 tmpvar_28;
  tmpvar_28.x = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_28.y = dfdx(tmpvar_25.y);
  tmpvar_28.z = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_28.w = dfdy(tmpvar_25.y);
  float3 tmpvar_29;
  tmpvar_29 = abs(tmpvar_21);
  float tmpvar_30;
  tmpvar_30 = float((tmpvar_29.z >= tmpvar_29.x));
  zxlerp_20 = half(tmpvar_30);
  float tmpvar_31;
  tmpvar_31 = float((mix (tmpvar_29.x, tmpvar_29.z, (float)zxlerp_20) >= tmpvar_29.y));
  nylerp_19 = half(tmpvar_31);
  float3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_29, tmpvar_29.zxy, (float3)half3(zxlerp_20));
  detailCoords_18 = half3(tmpvar_32);
  float3 tmpvar_33;
  tmpvar_33 = mix (tmpvar_29.yxz, (float3)detailCoords_18, (float3)half3(nylerp_19));
  detailCoords_18 = half3(tmpvar_33);
  half tmpvar_34;
  tmpvar_34 = abs(detailCoords_18.x);
  float2 coord_35;
  coord_35 = ((float2)(((half)0.5 * detailCoords_18.zy) / tmpvar_34) * _mtl_u._DetailScale);
  half4 tmpvar_36;
  tmpvar_36 = _DetailTex.sample(_mtlsmp__DetailTex, (float2)(coord_35), gradient2d((float2)(tmpvar_28.xy), (float2)(tmpvar_28.zw)));
  tmpvar_17 = tmpvar_36;
  float3 cse_37;
  cse_37 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._WorldSpaceCameraPos);
  half tmpvar_38;
  float tmpvar_39;
  tmpvar_39 = clamp (((2.0 * _mtl_u._DetailDist) * sqrt(
    dot (cse_37, cse_37)
  )), 0.0, 1.0);
  tmpvar_38 = half(tmpvar_39);
  half4 tmpvar_40;
  tmpvar_40 = ((_mtl_u._Color * tmpvar_16) * mix (tmpvar_17, (half4)float4(1.0, 1.0, 1.0, 1.0), half4(tmpvar_38)));
  color_7.xyz = tmpvar_40.xyz;
  float tmpvar_41;
  tmpvar_41 = sqrt(dot (cse_37, cse_37));
  float3 tmpvar_42;
  tmpvar_42 = (_mtl_u._PlanetOrigin - _mtl_u._WorldSpaceCameraPos);
  float3 tmpvar_43;
  tmpvar_43 = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._PlanetOrigin);
  float tmpvar_44;
  tmpvar_44 = mix (0.0, (float)tmpvar_40.w, mix ((1.0 - 
    (clamp ((_mtl_u._DistFade * tmpvar_41), 0.0, 1.0) * clamp ((1.0 - (_mtl_u._DistFadeVert * tmpvar_41)), 0.0, 1.0))
  ), clamp (
    pow ((_mtl_u._FalloffScale * clamp (dot (_mtl_i.xlv_TEXCOORD5, _mtl_i.xlv_TEXCOORD4), 0.0, 1.0)), _mtl_u._FalloffPow)
  , 0.0, 1.0), clamp (
    (_mtl_u._RimDist * (sqrt(dot (tmpvar_42, tmpvar_42)) - (_mtl_u._RimDistSub * sqrt(
      dot (tmpvar_43, tmpvar_43)
    ))))
  , 0.0, 1.0)));
  color_7.w = half(tmpvar_44);
  float3 tmpvar_45;
  tmpvar_45 = normalize(cse_37);
  worldDir_6 = half3(tmpvar_45);
  float tmpvar_46;
  tmpvar_46 = dot (_mtl_i.xlv_TEXCOORD1, (float3)worldDir_6);
  float tmpvar_47;
  float cse_48;
  cse_48 = dot (_mtl_i.xlv_TEXCOORD1, _mtl_i.xlv_TEXCOORD1);
  tmpvar_47 = sqrt((cse_48 - (tmpvar_46 * tmpvar_46)));
  float tmpvar_49;
  tmpvar_49 = pow (tmpvar_47, 2.0);
  float tmpvar_50;
  tmpvar_50 = sqrt(((_mtl_u._OceanRadius * _mtl_u._OceanRadius) - tmpvar_49));
  half tmpvar_51;
  float tmpvar_52;
  tmpvar_52 = clamp (((
    float((_mtl_u._OceanRadius >= tmpvar_47))
   * 
    float((tmpvar_46 >= 0.0))
  ) + float(
    (_mtl_u._OceanRadius >= sqrt(cse_48))
  )), 0.0, 1.0);
  tmpvar_51 = half(tmpvar_52);
  float tmpvar_53;
  tmpvar_53 = ((float)tmpvar_51 * float((tmpvar_41 >= 
    mix ((tmpvar_50 - sqrt((cse_48 - tmpvar_49))), (tmpvar_46 - tmpvar_50), float((tmpvar_46 >= 0.0)))
  )));
  sphereCheck_5 = half(tmpvar_53);
  color_7.w = (color_7.w * ((half)1.0 - sphereCheck_5));
  float3 tmpvar_54;
  tmpvar_54 = _mtl_u.glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = half3(tmpvar_54);
  half3 tmpvar_55;
  tmpvar_55 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_55;
  half tmpvar_56;
  float tmpvar_57;
  tmpvar_57 = clamp (dot (_mtl_i.xlv_TEXCOORD4, (float3)lightDirection_3), 0.0, 1.0);
  tmpvar_56 = half(tmpvar_57);
  half tmpvar_58;
  tmpvar_58 = clamp (((_mtl_u._LightColor0.w * 
    ((tmpvar_56 - (half)0.01) / (half)0.99)
  ) * (half)4.0), (half)0.0, (half)1.0);
  float3 tmpvar_59;
  tmpvar_59 = clamp (((float3)ambientLighting_4 + (
    (_mtl_u._MinLight + (float3)_mtl_u._LightColor0.xyz)
   * (float)tmpvar_58)), 0.0, 1.0);
  color_7.xyz = ((half3)((float3)tmpvar_40.xyz * tmpvar_59));
  half tmpvar_60;
  tmpvar_60 = _CameraDepthTexture.sample(_mtlsmp__CameraDepthTexture, ((float2)(_mtl_i.xlv_TEXCOORD8).xy / (float)(_mtl_i.xlv_TEXCOORD8).w)).x;
  depth_2 = float(tmpvar_60);
  float tmpvar_61;
  tmpvar_61 = (1.0/(((_mtl_u._ZBufferParams.z * depth_2) + _mtl_u._ZBufferParams.w)));
  depth_2 = tmpvar_61;
  float tmpvar_62;
  tmpvar_62 = ((float)color_7.w * clamp ((_mtl_u._InvFade * 
    (tmpvar_61 - _mtl_i.xlv_TEXCOORD8.z)
  ), 0.0, 1.0));
  color_7.w = half(tmpvar_62);
  tmpvar_1 = color_7;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
}
 }
}
}